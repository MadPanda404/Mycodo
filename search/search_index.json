{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo Environmental Monitoring and Regulation System ~ Mycodo is open source software designed to run on the Raspberry Pi and other single-board computers (SBCs). It couples inputs and outputs in interesting ways to sense and manipulate the environment. Information ~ See the README for features, projects using Mycodo, screenshots, and other information. Prerequisites ~ Single-board computer (Recommended: Raspberry Pi , any version: Zero, 1, 2, 3, or 4) Debian-based operating system An active internet connection Install ~ Once booted and logged in, run the following command to initiate the Mycodo install: curl -L https://kizniche.github.io/Mycodo/install | bash After installation, open a web browser to the SBC's IP address and you will be prompted to create an Admin user and login. https://127.0.0.1 Support ~ Mycodo on GitHub Mycodo Wiki Mycodo API Discussion Forum Frequently Asked Questions Donate ~ Become a Sponsor: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"Home"},{"location":"#mycodo-environmental-monitoring-and-regulation-system","text":"Mycodo is open source software designed to run on the Raspberry Pi and other single-board computers (SBCs). It couples inputs and outputs in interesting ways to sense and manipulate the environment.","title":"Mycodo Environmental Monitoring and Regulation System"},{"location":"#information","text":"See the README for features, projects using Mycodo, screenshots, and other information.","title":"Information"},{"location":"#prerequisites","text":"Single-board computer (Recommended: Raspberry Pi , any version: Zero, 1, 2, 3, or 4) Debian-based operating system An active internet connection","title":"Prerequisites"},{"location":"#install","text":"Once booted and logged in, run the following command to initiate the Mycodo install: curl -L https://kizniche.github.io/Mycodo/install | bash After installation, open a web browser to the SBC's IP address and you will be prompted to create an Admin user and login. https://127.0.0.1","title":"Install"},{"location":"#support","text":"Mycodo on GitHub Mycodo Wiki Mycodo API Discussion Forum Frequently Asked Questions","title":"Support"},{"location":"#donate","text":"Become a Sponsor: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"Donate"},{"location":"API/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. REST API ~ As of version 8, Mycodo has a REST API (See API Endpoint Documentation ). An API is an application programming interface - in short, it\u2019s a set of rules that lets programs talk to each other, exposing data and functionality across the internet in a consistent format. REST stands for Representational State Transfer. This is an architectural pattern that describes how distributed systems can expose a consistent interface. When people use the term \u2018REST API,\u2019 they are generally referring to an API accessed via HTTP protocol at a predefined set of URLs. These URLs represent various resources - any information or content accessed at that location, which can be returned as JSON, HTML, audio files, or images. Often, resources have one or more methods that can be performed on them over HTTP, like GET, POST, PUT and DELETE. Authentication ~ An API Key can be generated from the User Settings page ( [Gear Icon] -> Configure -> Users ). This is stored as a 128-bit bytes object in the database, but will be presented to the user as a base64-encoded string. This can be used to access HTTPS endpoints. Mycodo supports several authentication methods. All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will fail. Bash Examples ~ curl can be used, but you must either use -k to allow the use of an unsigned SSL certificate, or use your own certificate and domain. curl -k -v -X GET \"https://127.0.0.1/api/settings/users\" -H \"authorization: Basic 0scjVcxRGi0XczregANBRXG3VMMro+oolPYdauadLblaNThd79bzFPITJjYneU1yK/Ikc9ahHXmll9JiKZO9+hogKoIp2Q8a2cMFBGevgJSd5jYVYz5D83dFE5+OBvvKKaN1U5TvPOXXcj3lkjvPzgxOnEF0CZUsKfU3MA3cFEs=\" -H \"accept: application/vnd.mycodo.v1+json\" curl -k -v -X GET \"https://127.0.0.1/api/settings/users\" -H \"X-API-KEY: 0scjVcxRGi0XczregANBRXG3VMMro+oolPYdauadLblaNThd79bzFPITJjYneU1yK/Ikc9ahHXmll9JiKZO9+hogKoIp2Q8a2cMFBGevgJSd5jYVYz5D83dFE5+OBvvKKaN1U5TvPOXXcj3lkjvPzgxOnEF0CZUsKfU3MA3cFEs=\" -H \"accept: application/vnd.mycodo.v1+json\" curl -k -v -X GET \"https://127.0.0.1/api/settings/users?api_key=0scjVcxRGi0XczregANBRXG3VMMro+oolPYdauadLblaNThd79bzFPITJjYneU1yK/Ikc9ahHXmll9JiKZO9+hogKoIp2Q8a2cMFBGevgJSd5jYVYz5D83dFE5+OBvvKKaN1U5TvPOXXcj3lkjvPzgxOnEF0CZUsKfU3MA3cFEs=\" -H \"accept: application/vnd.mycodo.v1+json\" Python Example (GET) ~ import json import requests ip_address = '127.0.0.1' api_key = 'YOUR_API_KEY' endpoint = 'settings/inputs' url = 'https:// {ip} /api/ {ep} ' . format ( ip = ip_address , ep = endpoint ) headers = { 'Accept' : 'application/vnd.mycodo.v1+json' , 'X-API-KEY' : api_key } response = requests . get ( url , headers = headers , verify = False ) print ( \"Response Status: {} \" . format ( response . status_code )) print ( \"Response Headers: {} \" . format ( response . headers )) response_dict = json . loads ( response . text ) print ( \"Response Dictionary: {} \" . format ( response_dict )) Python Example (POST) ~ import json import requests import urllib3 urllib3 . disable_warnings ( urllib3 . exceptions . InsecureRequestWarning ) ip_address = '127.0.0.1' api_key = 'YOUR_API_KEY' endpoint = 'outputs/3f5a4806-c830-432d-b329-7821da8336e4' url = 'https:// {ip} /api/ {ep} ' . format ( ip = ip_address , ep = endpoint ) data = { \"state\" : True } # Turn Output On headers = { 'Accept' : 'application/vnd.mycodo.v1+json' , 'X-API-KEY' : api_key } response = requests . post ( url , json = data , headers = headers , verify = False ) print ( \"Response Status: {} \" . format ( response . status_code )) print ( \"Response Headers: {} \" . format ( response . headers )) response_dict = json . loads ( response . text ) print ( \"Response Dictionary: {} \" . format ( response_dict )) Errors ~ Mycodo uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the 2xx range indicate success. Codes in the 4xx range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the 5xx range indicate an error with Mycodo's servers (these are rare). Some 4xx errors that could be handled programmatically (e.g., a card is declined) include an error code that briefly explains the error reported. Endpoints ~ A vendor-specific content type header must be included to determine which API version to use. For version 1, this is \"application/vnd.mycodo.v1+json\", as can be seen in the examples, above. Visit https://{RASPBERRY_PI_IP_ADDRESS}/api for documentation of the current API endpoints of your Mycodo install. Documentation for the latest API version is also available in HTML format: Mycodo API Docs <https://kizniche.github.io/Mycodo/mycodo-api.html> __ Daemon Control Object ~ DaemonControl() ~ class mycodo_client.DaemonControl ( pyro_uri='PYRO:mycodo.pyro_server@127.0.0.1:9080' , pyro_timeout=None ) The mycodo client object implements a way to communicate with a mycodo daemon and query information from the influxdb database. Example usage: from mycodo.mycodo_client import DaemonControl control = DaemonControl () control . terminate_daemon () Parameters: pyro_uri - the Pyro5 uri to use to connect to the daemon. pyro_timeout - the Pyro5 timeout period. controller_activate() ~ controller_activate ( controller_id ) Activates a controller. Parameters: controller_type - the type of controller being activated. Options are: \"Function\", \"Input\", \"Output\", \"PID\", \"Trigger\", or \"Function\". controller_id - the unique ID of the controller to activate. controller_deactivate() ~ controller_deactivate ( controller_id ) Deactivates a controller. Parameters: controller_type - the type of controller being deactivated. Options are: \"Conditional\", \"Input\", \"Output\", \"PID\", \"Trigger\", or \"Function\". controller_id - the unique ID of the controller to deactivate. get_condition_measurement() ~ get_condition_measurement ( condition_id ) Gets the measurement from a Condition of a Conditional Function. Parameters: condition_id - The unique ID of the controller. get_condition_measurement_dict() ~ get_condition_measurement_dict ( condition_id ) Gets the measurement dictionary from a Condition of a Conditional Function. Parameters: condition_id - The unique ID of the controller. input_force_measurements() ~ input_force_measurements ( input_id ) Induce an Input to conduct a measurement. Parameters: input_id - The unique ID of the controller. lcd_backlight() ~ lcd_backlight ( lcd_id , state ) Turn the backlight of an LCD on or off, if the LCD supports that functionality. Parameters: lcd_id - The unique ID of the controller. state - The state of the LCD backlight. Options are: False for off, True for on. lcd_flash() ~ lcd_flash ( lcd_id , state ) Cause the LCD backlight to start or stop flashing, if the LCD supports that functionality. Parameters: lcd_id - The unique ID of the controller. state - The state of the LCD flashing. Options are: False for off, True for on. lcd_reset() ~ lcd_reset ( lcd_id ) Reset an LCD to its default startup state. This can be used to clear the screen, fix display issues, or turn off flashing. Parameters: lcd_id - The unique ID of the controller. output_off() ~ output_off ( output_id , trigger_conditionals=True ) Turn an Output off. Parameters: output_id - The unique ID of the Output. trigger_conditionals - Whether to trigger controllers that may be monitoring Outputs for state changes. output_on() ~ output_on ( output_id , output_type='sec' , amount=0.0 , min_off=0.0 , trigger_conditionals=True ) Turn an Output on. Parameters: output_id - The unique ID of the Output. output_type - The type of output to send to the output module (e.g. \"sec\", \"pwm\", \"vol\"). amount - The amount to send to the output module. min_off - How long to keep the Output off after turning on, if on for a duration. trigger_conditionals - Whether to trigger controllers that may be monitoring Outputs for state changes. output_on_off() ~ output_on_off ( output_id , state , output_type='sec' , amount=0.0 ,) Turn an Output on or off. Parameters: output_id - The unique ID of the Output. state - The state to turn the Output. Options are: \"on\", \"off\" output_type - The type of output to send to the output module (e.g. \"sec\", \"pwm\", \"vol\"). amount - The amount to send to the output module. output_sec_currently_on() ~ output_sec_currently_on ( output_id ) Get how many seconds an Output has been on. Parameters: output_id - The unique ID of the Output. output_setup() ~ output_setup ( action , output_id ) Set up an Output (i.e. load/reload settings from database, initialize any pins/classes, etc.). Parameters: action - What action to instruct for the Output. Options are: \"Add\", \"Delete\", or \"Modify\". output_id - The unique ID of the Output. output_state() ~ output_state ( output_id ) Gets the state of an Output. Returns \"on\" or \"off\" or duty cycle value. Parameters: output_id - The unique ID of the Output. pid_get() ~ pid_get ( pid_id , setting ) Get a parameter of a PID controller. Parameters: pid_id - The unique ID of the controller. setting - Which option to get. Options are: \"setpoint\", \"error\", \"integrator\", \"derivator\", \"kp\", \"ki\", or \"kd\". pid_hold() ~ pid_hold ( pid_id ) Set a PID Controller to Hold. Parameters: pid_id - The unique ID of the controller. pid_mod() ~ pid_mod ( pid_id ) Refresh/Initialize the variables of a running PID controller. Parameters: pid_id - The unique ID of the controller. pid_pause() ~ pid_pause ( pid_id ) Set a PID Controller to Pause. Parameters: pid_id - The unique ID of the controller. pid_resume() ~ pid_resume ( pid_id ) Set a PID Controller to Resume. Parameters: pid_id - The unique ID of the controller. pid_set() ~ pid_set ( pid_id , setting , value ) Set a parameter of a running PID controller. Parameters: pid_id - The unique ID of the controller. setting - Which option to set. Options are: \"setpoint\", \"method\", \"integrator\", \"derivator\", \"kp\", \"ki\", or \"kd\". value - The value to set. refresh_daemon_conditional_settings() ~ refresh_daemon_conditional_settings ( unique_id ) Refresh the settings of a running Conditional Function. Parameters: unique_id - The unique ID of the controller. refresh_daemon_misc_settings() ~ refresh_daemon_misc_settings () Refresh the miscellaneous settings stored in the running daemon from the database values. refresh_daemon_trigger_settings() ~ refresh_daemon_trigger_settings ( unique_id ) Refresh the Trigger Controller settings of a running Trigger Controller. Parameters: unique_id - The unique ID of the controller. send_email() ~ send_email ( recipients , message , subject ) Send an email with the credentials configured for alert notifications. Parameters: recipients - The email address (string) or addresses (list of strings) to send the email. message - The body of the email. subject - The subject of the email. terminate_daemon() ~ terminate_daemon () Instruct the daemon to shut down. trigger_action() ~ trigger_action ( action_id , value={} , debug=False ) Instruct a Function Action to be executed. Parameters: action_id - The unique ID of the Function Action. value - A dict with at a minimum 'message' key to have messages appended in the action. This dict should be returned by the action. debug - Whether to show debug logging messages. trigger_all_actions() ~ trigger_all_actions ( function_id , message='' , debug=False ) Instruct all Function Actions of a Function Controller to be executed sequentially. Parameters: function_id - The unique ID of the controller. message - A message to send with the action that may be used by the action. debug - Whether to show debug logging messages.","title":"API"},{"location":"API/#rest-api","text":"As of version 8, Mycodo has a REST API (See API Endpoint Documentation ). An API is an application programming interface - in short, it\u2019s a set of rules that lets programs talk to each other, exposing data and functionality across the internet in a consistent format. REST stands for Representational State Transfer. This is an architectural pattern that describes how distributed systems can expose a consistent interface. When people use the term \u2018REST API,\u2019 they are generally referring to an API accessed via HTTP protocol at a predefined set of URLs. These URLs represent various resources - any information or content accessed at that location, which can be returned as JSON, HTML, audio files, or images. Often, resources have one or more methods that can be performed on them over HTTP, like GET, POST, PUT and DELETE.","title":"REST API"},{"location":"API/#authentication","text":"An API Key can be generated from the User Settings page ( [Gear Icon] -> Configure -> Users ). This is stored as a 128-bit bytes object in the database, but will be presented to the user as a base64-encoded string. This can be used to access HTTPS endpoints. Mycodo supports several authentication methods. All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will fail.","title":"Authentication"},{"location":"API/#bash-examples","text":"curl can be used, but you must either use -k to allow the use of an unsigned SSL certificate, or use your own certificate and domain. curl -k -v -X GET \"https://127.0.0.1/api/settings/users\" -H \"authorization: Basic 0scjVcxRGi0XczregANBRXG3VMMro+oolPYdauadLblaNThd79bzFPITJjYneU1yK/Ikc9ahHXmll9JiKZO9+hogKoIp2Q8a2cMFBGevgJSd5jYVYz5D83dFE5+OBvvKKaN1U5TvPOXXcj3lkjvPzgxOnEF0CZUsKfU3MA3cFEs=\" -H \"accept: application/vnd.mycodo.v1+json\" curl -k -v -X GET \"https://127.0.0.1/api/settings/users\" -H \"X-API-KEY: 0scjVcxRGi0XczregANBRXG3VMMro+oolPYdauadLblaNThd79bzFPITJjYneU1yK/Ikc9ahHXmll9JiKZO9+hogKoIp2Q8a2cMFBGevgJSd5jYVYz5D83dFE5+OBvvKKaN1U5TvPOXXcj3lkjvPzgxOnEF0CZUsKfU3MA3cFEs=\" -H \"accept: application/vnd.mycodo.v1+json\" curl -k -v -X GET \"https://127.0.0.1/api/settings/users?api_key=0scjVcxRGi0XczregANBRXG3VMMro+oolPYdauadLblaNThd79bzFPITJjYneU1yK/Ikc9ahHXmll9JiKZO9+hogKoIp2Q8a2cMFBGevgJSd5jYVYz5D83dFE5+OBvvKKaN1U5TvPOXXcj3lkjvPzgxOnEF0CZUsKfU3MA3cFEs=\" -H \"accept: application/vnd.mycodo.v1+json\"","title":"Bash Examples"},{"location":"API/#python-example-get","text":"import json import requests ip_address = '127.0.0.1' api_key = 'YOUR_API_KEY' endpoint = 'settings/inputs' url = 'https:// {ip} /api/ {ep} ' . format ( ip = ip_address , ep = endpoint ) headers = { 'Accept' : 'application/vnd.mycodo.v1+json' , 'X-API-KEY' : api_key } response = requests . get ( url , headers = headers , verify = False ) print ( \"Response Status: {} \" . format ( response . status_code )) print ( \"Response Headers: {} \" . format ( response . headers )) response_dict = json . loads ( response . text ) print ( \"Response Dictionary: {} \" . format ( response_dict ))","title":"Python Example (GET)"},{"location":"API/#python-example-post","text":"import json import requests import urllib3 urllib3 . disable_warnings ( urllib3 . exceptions . InsecureRequestWarning ) ip_address = '127.0.0.1' api_key = 'YOUR_API_KEY' endpoint = 'outputs/3f5a4806-c830-432d-b329-7821da8336e4' url = 'https:// {ip} /api/ {ep} ' . format ( ip = ip_address , ep = endpoint ) data = { \"state\" : True } # Turn Output On headers = { 'Accept' : 'application/vnd.mycodo.v1+json' , 'X-API-KEY' : api_key } response = requests . post ( url , json = data , headers = headers , verify = False ) print ( \"Response Status: {} \" . format ( response . status_code )) print ( \"Response Headers: {} \" . format ( response . headers )) response_dict = json . loads ( response . text ) print ( \"Response Dictionary: {} \" . format ( response_dict ))","title":"Python Example (POST)"},{"location":"API/#errors","text":"Mycodo uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the 2xx range indicate success. Codes in the 4xx range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the 5xx range indicate an error with Mycodo's servers (these are rare). Some 4xx errors that could be handled programmatically (e.g., a card is declined) include an error code that briefly explains the error reported.","title":"Errors"},{"location":"API/#endpoints","text":"A vendor-specific content type header must be included to determine which API version to use. For version 1, this is \"application/vnd.mycodo.v1+json\", as can be seen in the examples, above. Visit https://{RASPBERRY_PI_IP_ADDRESS}/api for documentation of the current API endpoints of your Mycodo install. Documentation for the latest API version is also available in HTML format: Mycodo API Docs <https://kizniche.github.io/Mycodo/mycodo-api.html> __","title":"Endpoints"},{"location":"API/#daemon-control-object","text":"","title":"Daemon Control Object"},{"location":"API/#daemoncontrol","text":"class mycodo_client.DaemonControl ( pyro_uri='PYRO:mycodo.pyro_server@127.0.0.1:9080' , pyro_timeout=None ) The mycodo client object implements a way to communicate with a mycodo daemon and query information from the influxdb database. Example usage: from mycodo.mycodo_client import DaemonControl control = DaemonControl () control . terminate_daemon () Parameters: pyro_uri - the Pyro5 uri to use to connect to the daemon. pyro_timeout - the Pyro5 timeout period.","title":"DaemonControl()"},{"location":"API/#controller_activate","text":"controller_activate ( controller_id ) Activates a controller. Parameters: controller_type - the type of controller being activated. Options are: \"Function\", \"Input\", \"Output\", \"PID\", \"Trigger\", or \"Function\". controller_id - the unique ID of the controller to activate.","title":"controller_activate()"},{"location":"API/#controller_deactivate","text":"controller_deactivate ( controller_id ) Deactivates a controller. Parameters: controller_type - the type of controller being deactivated. Options are: \"Conditional\", \"Input\", \"Output\", \"PID\", \"Trigger\", or \"Function\". controller_id - the unique ID of the controller to deactivate.","title":"controller_deactivate()"},{"location":"API/#get_condition_measurement","text":"get_condition_measurement ( condition_id ) Gets the measurement from a Condition of a Conditional Function. Parameters: condition_id - The unique ID of the controller.","title":"get_condition_measurement()"},{"location":"API/#get_condition_measurement_dict","text":"get_condition_measurement_dict ( condition_id ) Gets the measurement dictionary from a Condition of a Conditional Function. Parameters: condition_id - The unique ID of the controller.","title":"get_condition_measurement_dict()"},{"location":"API/#input_force_measurements","text":"input_force_measurements ( input_id ) Induce an Input to conduct a measurement. Parameters: input_id - The unique ID of the controller.","title":"input_force_measurements()"},{"location":"API/#lcd_backlight","text":"lcd_backlight ( lcd_id , state ) Turn the backlight of an LCD on or off, if the LCD supports that functionality. Parameters: lcd_id - The unique ID of the controller. state - The state of the LCD backlight. Options are: False for off, True for on.","title":"lcd_backlight()"},{"location":"API/#lcd_flash","text":"lcd_flash ( lcd_id , state ) Cause the LCD backlight to start or stop flashing, if the LCD supports that functionality. Parameters: lcd_id - The unique ID of the controller. state - The state of the LCD flashing. Options are: False for off, True for on.","title":"lcd_flash()"},{"location":"API/#lcd_reset","text":"lcd_reset ( lcd_id ) Reset an LCD to its default startup state. This can be used to clear the screen, fix display issues, or turn off flashing. Parameters: lcd_id - The unique ID of the controller.","title":"lcd_reset()"},{"location":"API/#output_off","text":"output_off ( output_id , trigger_conditionals=True ) Turn an Output off. Parameters: output_id - The unique ID of the Output. trigger_conditionals - Whether to trigger controllers that may be monitoring Outputs for state changes.","title":"output_off()"},{"location":"API/#output_on","text":"output_on ( output_id , output_type='sec' , amount=0.0 , min_off=0.0 , trigger_conditionals=True ) Turn an Output on. Parameters: output_id - The unique ID of the Output. output_type - The type of output to send to the output module (e.g. \"sec\", \"pwm\", \"vol\"). amount - The amount to send to the output module. min_off - How long to keep the Output off after turning on, if on for a duration. trigger_conditionals - Whether to trigger controllers that may be monitoring Outputs for state changes.","title":"output_on()"},{"location":"API/#output_on_off","text":"output_on_off ( output_id , state , output_type='sec' , amount=0.0 ,) Turn an Output on or off. Parameters: output_id - The unique ID of the Output. state - The state to turn the Output. Options are: \"on\", \"off\" output_type - The type of output to send to the output module (e.g. \"sec\", \"pwm\", \"vol\"). amount - The amount to send to the output module.","title":"output_on_off()"},{"location":"API/#output_sec_currently_on","text":"output_sec_currently_on ( output_id ) Get how many seconds an Output has been on. Parameters: output_id - The unique ID of the Output.","title":"output_sec_currently_on()"},{"location":"API/#output_setup","text":"output_setup ( action , output_id ) Set up an Output (i.e. load/reload settings from database, initialize any pins/classes, etc.). Parameters: action - What action to instruct for the Output. Options are: \"Add\", \"Delete\", or \"Modify\". output_id - The unique ID of the Output.","title":"output_setup()"},{"location":"API/#output_state","text":"output_state ( output_id ) Gets the state of an Output. Returns \"on\" or \"off\" or duty cycle value. Parameters: output_id - The unique ID of the Output.","title":"output_state()"},{"location":"API/#pid_get","text":"pid_get ( pid_id , setting ) Get a parameter of a PID controller. Parameters: pid_id - The unique ID of the controller. setting - Which option to get. Options are: \"setpoint\", \"error\", \"integrator\", \"derivator\", \"kp\", \"ki\", or \"kd\".","title":"pid_get()"},{"location":"API/#pid_hold","text":"pid_hold ( pid_id ) Set a PID Controller to Hold. Parameters: pid_id - The unique ID of the controller.","title":"pid_hold()"},{"location":"API/#pid_mod","text":"pid_mod ( pid_id ) Refresh/Initialize the variables of a running PID controller. Parameters: pid_id - The unique ID of the controller.","title":"pid_mod()"},{"location":"API/#pid_pause","text":"pid_pause ( pid_id ) Set a PID Controller to Pause. Parameters: pid_id - The unique ID of the controller.","title":"pid_pause()"},{"location":"API/#pid_resume","text":"pid_resume ( pid_id ) Set a PID Controller to Resume. Parameters: pid_id - The unique ID of the controller.","title":"pid_resume()"},{"location":"API/#pid_set","text":"pid_set ( pid_id , setting , value ) Set a parameter of a running PID controller. Parameters: pid_id - The unique ID of the controller. setting - Which option to set. Options are: \"setpoint\", \"method\", \"integrator\", \"derivator\", \"kp\", \"ki\", or \"kd\". value - The value to set.","title":"pid_set()"},{"location":"API/#refresh_daemon_conditional_settings","text":"refresh_daemon_conditional_settings ( unique_id ) Refresh the settings of a running Conditional Function. Parameters: unique_id - The unique ID of the controller.","title":"refresh_daemon_conditional_settings()"},{"location":"API/#refresh_daemon_misc_settings","text":"refresh_daemon_misc_settings () Refresh the miscellaneous settings stored in the running daemon from the database values.","title":"refresh_daemon_misc_settings()"},{"location":"API/#refresh_daemon_trigger_settings","text":"refresh_daemon_trigger_settings ( unique_id ) Refresh the Trigger Controller settings of a running Trigger Controller. Parameters: unique_id - The unique ID of the controller.","title":"refresh_daemon_trigger_settings()"},{"location":"API/#send_email","text":"send_email ( recipients , message , subject ) Send an email with the credentials configured for alert notifications. Parameters: recipients - The email address (string) or addresses (list of strings) to send the email. message - The body of the email. subject - The subject of the email.","title":"send_email()"},{"location":"API/#terminate_daemon","text":"terminate_daemon () Instruct the daemon to shut down.","title":"terminate_daemon()"},{"location":"API/#trigger_action","text":"trigger_action ( action_id , value={} , debug=False ) Instruct a Function Action to be executed. Parameters: action_id - The unique ID of the Function Action. value - A dict with at a minimum 'message' key to have messages appended in the action. This dict should be returned by the action. debug - Whether to show debug logging messages.","title":"trigger_action()"},{"location":"API/#trigger_all_actions","text":"trigger_all_actions ( function_id , message='' , debug=False ) Instruct all Function Actions of a Function Controller to be executed sequentially. Parameters: function_id - The unique ID of the controller. message - A message to send with the action that may be used by the action. debug - Whether to show debug logging messages.","title":"trigger_all_actions()"},{"location":"About.de/","text":"English Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo ist ein quelloffenes Umwelt\u00fcberwachungs- und -regulierungssystem, das f\u00fcr den Betrieb auf Einplatinencomputern, insbesondere dem Raspberry Pi , entwickelt wurde. Urspr\u00fcnglich f\u00fcr die Zucht von Speisepilzen entwickelt, kann Mycodo inzwischen viel mehr. Das System besteht aus zwei Teilen, einem Backend (Daemon) und einem Frontend (Webserver). Das Backend \u00fcbernimmt Aufgaben wie die Erfassung von Messwerten von Sensoren und Ger\u00e4ten und koordiniert eine Reihe von Reaktionen auf diese Messwerte, einschlie\u00dflich der F\u00e4higkeit, Ausg\u00e4nge zu modulieren (Relais schalten, PWM-Signale erzeugen, Pumpen betreiben, drahtlose Ausg\u00e4nge schalten, MQTT ver\u00f6ffentlichen/abonnieren usw.), Umgebungsbedingungen mit PID-Steuerung zu regulieren, Zeitpl\u00e4ne zu erstellen, Fotos aufzunehmen und Videos zu streamen, Aktionen auszul\u00f6sen, wenn Messwerte bestimmte Bedingungen erf\u00fcllen, und vieles mehr. Das Frontend beherbergt eine Weboberfl\u00e4che, die Anzeige und Konfiguration von jedem Browser-f\u00e4higen Ger\u00e4t aus erm\u00f6glicht. F\u00fcr Mycodo gibt es eine Reihe von unterschiedlichen Verwendungszwecken. Einige Nutzer speichern einfach Sensormessungen, um die Bedingungen aus der Ferne zu \u00fcberwachen, andere regulieren die Umgebungsbedingungen eines physischen Raums, w\u00e4hrend andere unter anderem bewegungsaktivierte oder Zeitrafferaufnahmen machen. Input-Controller erfassen Messwerte und speichern sie in der InfluxDB-Zeitreihendatenbank. Die Messungen stammen in der Regel von Sensoren, k\u00f6nnen aber auch so konfiguriert werden, dass sie den R\u00fcckgabewert von Linux-Bash- oder Python-Befehlen oder mathematische Gleichungen verwenden, was dieses System zu einem sehr dynamischen System f\u00fcr die Erfassung und Erzeugung von Daten macht. Ausgangssteuerungen erzeugen \u00c4nderungen an den GPIO-Pins (GPIO = General Input/Output) oder k\u00f6nnen so konfiguriert werden, dass sie Linux-Bash- oder Python-Befehle ausf\u00fchren, was eine Vielzahl von Verwendungsm\u00f6glichkeiten bietet. Es gibt einige verschiedene Arten von Ausg\u00e4ngen: einfaches Schalten von GPIO-Pins (HIGH/LOW), Erzeugen von pulsweitenmodulierten (PWM) Signalen, Steuern von Schlauchpumpen, MQTT-Ver\u00f6ffentlichung und mehr. Wenn Eing\u00e4nge und Ausg\u00e4nge kombiniert werden, k\u00f6nnen Funktionsregler verwendet werden, um R\u00fcckkopplungsschleifen zu erstellen, die das Ausgangsger\u00e4t verwenden, um einen Umgebungszustand zu modulieren, den der Eingang misst. Bestimmte Eing\u00e4nge k\u00f6nnen mit bestimmten Ausg\u00e4ngen gekoppelt werden, um eine Vielzahl verschiedener Steuerungs- und Regelungsanwendungen zu schaffen. \u00dcber die einfache Regelung hinaus k\u00f6nnen Methoden verwendet werden, um einen sich im Laufe der Zeit \u00e4ndernden Sollwert zu erzeugen, was z. B. Thermocycler, Reflow-\u00d6fen, Umweltsimulationen f\u00fcr Terrarien, Fermentierung oder Reifung von Lebensmitteln und Getr\u00e4nken sowie das Garen von Lebensmitteln ( Sous-vide ) erm\u00f6glicht, um nur einige Beispiele zu nennen. Ausl\u00f6ser k\u00f6nnen so eingestellt werden, dass sie Ereignisse auf der Grundlage bestimmter Daten und Uhrzeiten, Zeitspannen oder des Sonnenaufgangs/Sonnenuntergangs an einem bestimmten Breiten- und L\u00e4ngengrad aktivieren. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.es/","text":"English Deutsche Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo es un sistema de supervisi\u00f3n y regulaci\u00f3n medioambiental de c\u00f3digo abierto que se ha creado para funcionar en ordenadores de placa \u00fanica, concretamente en la Raspberry Pi . Desarrollado originalmente para el cultivo de setas comestibles, Mycodo ha crecido para hacer mucho m\u00e1s. El sistema consta de dos partes, un backend (demonio) y un frontend (servidor web). El backend realiza tareas como la adquisici\u00f3n de mediciones de sensores y dispositivos y la coordinaci\u00f3n de un conjunto diverso de respuestas a esas mediciones, incluida la capacidad de modular las salidas (conmutar rel\u00e9s, generar se\u00f1ales PWM, operar bombas, conmutar salidas inal\u00e1mbricas, publicar/suscribirse a MQTT, entre otras), regular las condiciones ambientales con control PID, programar temporizadores, capturar fotos y transmitir v\u00eddeo, desencadenar acciones cuando las mediciones cumplen ciertas condiciones, y m\u00e1s. El frontend alberga una interfaz web que permite la visualizaci\u00f3n y configuraci\u00f3n desde cualquier dispositivo con navegador. Los usos de Mycodo son muy variados. Algunos usuarios simplemente almacenan las mediciones de los sensores para supervisar las condiciones a distancia, otros regulan las condiciones ambientales de un espacio f\u00edsico, mientras que otros capturan fotograf\u00edas activadas por el movimiento o por el tiempo, entre otros usos. Los controladores de entrada adquieren mediciones y las almacenan en la base de datos de series temporales InfluxDB. Las mediciones suelen proceder de los sensores, pero tambi\u00e9n pueden configurarse para utilizar el valor de retorno de los comandos de Linux Bash o Python, o las ecuaciones matem\u00e1ticas, lo que hace que sea un sistema muy din\u00e1mico para adquirir y generar datos. Los controladores de salida producen cambios en los pines generales de entrada/salida (GPIO) o pueden ser configurados para ejecutar comandos de Linux Bash o Python, permitiendo una variedad de usos potenciales. Existen varios tipos de salidas: la simple conmutaci\u00f3n de los pines GPIO (HIGH/LOW), la generaci\u00f3n de se\u00f1ales de ancho de pulso modulado (PWM), el control de bombas perist\u00e1lticas, la publicaci\u00f3n de MQTT, etc. Cuando se combinan las Entradas y las Salidas, los controladores de funciones pueden utilizarse para crear bucles de retroalimentaci\u00f3n que utilizan el dispositivo de Salida para modular una condici\u00f3n ambiental que la Entrada mide. Ciertas Entradas pueden ser acopladas con ciertas Salidas para crear una variedad de diferentes aplicaciones de control y regulaci\u00f3n. M\u00e1s all\u00e1 de la simple regulaci\u00f3n, los M\u00e9todos pueden ser utilizados para crear un punto de ajuste cambiante en el tiempo, permitiendo cosas como cicladores t\u00e9rmicos, hornos de reflujo, simulaci\u00f3n ambiental para terrarios, fermentaci\u00f3n o curado de alimentos y bebidas, y cocci\u00f3n de alimentos ( sous-vide ), por nombrar algunos. Los disparadores se pueden configurar para activar eventos basados en fechas y horas espec\u00edficas, seg\u00fan duraciones de tiempo, o la salida/puesta del sol en una latitud y longitud espec\u00edficas. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"Sobre"},{"location":"About.fr/","text":"English Deutsche Espa\u00f1ol Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo est un syst\u00e8me open-source de surveillance et de r\u00e9gulation de l'environnement con\u00e7u pour fonctionner sur des ordinateurs monocartes, notamment le Raspberry Pi . D\u00e9velopp\u00e9 \u00e0 l'origine pour la culture de champignons comestibles, Mycodo s'est d\u00e9velopp\u00e9 pour faire beaucoup plus. Le syst\u00e8me se compose de deux parties, un backend (d\u00e9mon) et un frontend (serveur web). Le backend effectue des t\u00e2ches telles que l'acquisition de mesures \u00e0 partir de capteurs et de dispositifs et la coordination d'un ensemble diversifi\u00e9 de r\u00e9ponses \u00e0 ces mesures, y compris la capacit\u00e9 de moduler les sorties (commutation de relais, g\u00e9n\u00e9ration de signaux PWM, fonctionnement de pompes, commutation de prises sans fil, publication/abonnement \u00e0 MQTT, entre autres), de r\u00e9guler les conditions environnementales avec un contr\u00f4le PID, de programmer des minuteries, de capturer des photos et de diffuser des vid\u00e9os, de d\u00e9clencher des actions lorsque les mesures r\u00e9pondent \u00e0 certaines conditions, etc. Le frontal h\u00e9berge une interface web qui permet de visualiser et de configurer les appareils \u00e0 partir de n'importe quel navigateur. Il existe un certain nombre d'utilisations diff\u00e9rentes de Mycodo. Certains utilisateurs stockent simplement les mesures des capteurs pour surveiller les conditions \u00e0 distance, d'autres r\u00e9gulent les conditions environnementales d'un espace physique, tandis que d'autres capturent des photographies activ\u00e9es par le mouvement ou en time-lapse, entre autres utilisations. Les contr\u00f4leurs d'entr\u00e9e acqui\u00e8rent des mesures et les stockent dans la base de donn\u00e9es de s\u00e9ries temporelles InfluxDB. Les mesures proviennent g\u00e9n\u00e9ralement de capteurs, mais peuvent \u00e9galement \u00eatre configur\u00e9es pour utiliser la valeur de retour de commandes Linux Bash ou Python, ou d'\u00e9quations math\u00e9matiques, ce qui en fait un syst\u00e8me tr\u00e8s dynamique d'acquisition et de g\u00e9n\u00e9ration de donn\u00e9es. Les contr\u00f4leurs de sortie produisent des changements sur les broches d'entr\u00e9e/sortie g\u00e9n\u00e9rales (GPIO) ou peuvent \u00eatre configur\u00e9s pour ex\u00e9cuter des commandes Linux Bash ou Python, ce qui permet une vari\u00e9t\u00e9 d'utilisations potentielles. Il existe diff\u00e9rents types de sorties : la simple commutation des broches GPIO (HAUT/BAS), la g\u00e9n\u00e9ration de signaux modul\u00e9s en largeur d'impulsion (PWM), le contr\u00f4le de pompes p\u00e9ristaltiques, la publication MQTT, etc. Lorsque les entr\u00e9es et les sorties sont combin\u00e9es, les contr\u00f4leurs de fonction peuvent \u00eatre utilis\u00e9s pour cr\u00e9er des boucles de r\u00e9troaction qui utilisent le dispositif de sortie pour moduler une condition environnementale mesur\u00e9e par l'entr\u00e9e. Certaines entr\u00e9es peuvent \u00eatre coupl\u00e9es \u00e0 certaines sorties pour cr\u00e9er une vari\u00e9t\u00e9 d'applications de contr\u00f4le et de r\u00e9gulation diff\u00e9rentes. Au-del\u00e0 de la simple r\u00e9gulation, les m\u00e9thodes peuvent \u00eatre utilis\u00e9es pour cr\u00e9er un point de consigne changeant au fil du temps, permettant des choses telles que les thermocycleurs, les fours de refusion, la simulation environnementale pour les terrariums, la fermentation ou le s\u00e9chage des aliments et des boissons, et la cuisson des aliments ( sous-vide ), pour n'en citer que quelques-unes. Les d\u00e9clencheurs peuvent \u00eatre configur\u00e9s pour activer des \u00e9v\u00e9nements en fonction de dates et d'heures sp\u00e9cifiques, en fonction de dur\u00e9es, ou du lever/coucher du soleil \u00e0 une latitude et une longitude sp\u00e9cifiques. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.id/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo adalah sistem pemantauan dan pengaturan lingkungan bersumber terbuka yang dibangun untuk dijalankan pada komputer papan tunggal, khususnya Raspberry Pi . Awalnya dikembangkan untuk membudidayakan jamur yang dapat dimakan, Mycodo telah berkembang untuk melakukan lebih banyak lagi. Sistem ini terdiri atas dua bagian, backend (daemon) dan frontend (server web). Backend melakukan tugas-tugas seperti memperoleh pengukuran dari sensor dan perangkat dan mengoordinasikan beragam respons terhadap pengukuran tersebut, termasuk kemampuan untuk memodulasi output (mengganti relay, menghasilkan sinyal PWM, mengoperasikan pompa, mengganti outlet nirkabel, menerbitkan / berlangganan MQTT, antara lain), mengatur kondisi lingkungan dengan kontrol PID, menjadwalkan pengatur waktu, mengambil foto dan streaming video, memicu tindakan ketika pengukuran memenuhi kondisi tertentu, dan banyak lagi. Frontend menjadi tuan rumah antarmuka web yang memungkinkan tampilan dan konfigurasi dari perangkat berkemampuan browser apa pun. Ada sejumlah kegunaan berbeda untuk Mycodo. Beberapa pengguna hanya menyimpan pengukuran sensor untuk memantau kondisi dari jarak jauh, yang lain mengatur kondisi lingkungan ruang fisik, sementara yang lain menangkap fotografi yang diaktifkan gerakan atau selang waktu, di antara kegunaan lainnya. Pengontrol input memperoleh pengukuran dan menyimpannya dalam basis data deret waktu InfluxDB. Pengukuran biasanya berasal dari sensor, tetapi juga dapat dikonfigurasi untuk menggunakan nilai balik dari perintah Linux Bash atau Python, atau persamaan matematika, menjadikannya sistem yang sangat dinamis untuk memperoleh dan menghasilkan data. Pengontrol output menghasilkan perubahan pada pin input/output umum (GPIO) atau dapat dikonfigurasi untuk menjalankan perintah Linux Bash atau Python, memungkinkan berbagai potensi penggunaan. Ada beberapa jenis output yang berbeda: peralihan sederhana pin GPIO (HIGH/LOW), menghasilkan sinyal pulse-width modulated (PWM), mengendalikan pompa peristaltik, penerbitan MQTT, dan banyak lagi. Ketika Input dan Output digabungkan, Pengontrol fungsi dapat digunakan untuk membuat loop umpan balik yang menggunakan perangkat Output untuk memodulasi kondisi lingkungan yang diukur Input. Input tertentu dapat digabungkan dengan Output tertentu untuk membuat berbagai aplikasi kontrol dan regulasi yang berbeda. Di luar regulasi sederhana, Metode dapat digunakan untuk membuat setpoint yang berubah dari waktu ke waktu, memungkinkan hal-hal seperti thermal cyclers, oven reflow, simulasi lingkungan untuk terarium, fermentasi atau pengawetan makanan dan minuman, dan memasak makanan ( sous-vide ), untuk beberapa nama. Pemicu bisa ditetapkan untuk mengaktifkan peristiwa berdasarkan tanggal dan waktu tertentu, menurut durasi waktu, atau matahari terbit/terbenam pada garis lintang dan garis bujur tertentu. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.it/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo \u00e8 un sistema open-source di monitoraggio e regolazione ambientale costruito per funzionare su computer a scheda singola, in particolare il Raspberry Pi . Originariamente sviluppato per la coltivazione di funghi commestibili, Mycodo \u00e8 cresciuto per fare molto di pi\u00f9. Il sistema \u00e8 composto da due parti, un backend (demone) e un frontend (server web). Il backend esegue compiti quali l'acquisizione di misure da sensori e dispositivi e il coordinamento di una serie di risposte a tali misure, tra cui la capacit\u00e0 di modulare le uscite (commutare rel\u00e8, generare segnali PWM, azionare pompe, commutare prese wireless, pubblicare/sottoscrivere a MQTT, tra le altre cose), regolare le condizioni ambientali con il controllo PID, programmare timer, catturare foto e trasmettere video, attivare azioni quando le misure soddisfano determinate condizioni e altro ancora. Il frontend ospita un'interfaccia web che consente la visualizzazione e la configurazione da qualsiasi dispositivo abilitato al browser. Mycodo pu\u00f2 essere utilizzato in diversi modi. Alcuni utenti si limitano a memorizzare le misure dei sensori per monitorare le condizioni a distanza, altri regolano le condizioni ambientali di uno spazio fisico, altri ancora scattano fotografie in movimento o in time-lapse, tra gli altri usi. I controllori di ingresso acquisiscono le misure e le memorizzano nel database delle serie temporali InfluxDB. Le misure provengono in genere da sensori, ma possono anche essere configurate per utilizzare il valore di ritorno di comandi Linux Bash o Python, o equazioni matematiche, rendendo questo sistema molto dinamico per l'acquisizione e la generazione di dati. I controllori di uscita producono modifiche ai pin di ingresso/uscita generale (GPIO) o possono essere configurati per eseguire comandi Linux Bash o Python, consentendo una variet\u00e0 di usi potenziali. Esistono diversi tipi di uscite: semplice commutazione dei pin GPIO (ALTO/BASSO), generazione di segnali modulati a larghezza di impulso (PWM), controllo di pompe peristaltiche, pubblicazione MQTT e altro ancora. Quando gli ingressi e le uscite sono combinati, i controllori di funzione possono essere utilizzati per creare anelli di retroazione che utilizzano il dispositivo di uscita per modulare una condizione ambientale misurata dall'ingresso. Alcuni ingressi possono essere abbinati a determinate uscite per creare una serie di applicazioni di controllo e regolazione diverse. Oltre alla semplice regolazione, i metodi possono essere utilizzati per creare un setpoint variabile nel tempo, consentendo di realizzare applicazioni come i termociclatori, i forni a rifusione, la simulazione ambientale per i terrari, la fermentazione o la stagionatura di alimenti e bevande e la cottura di cibi ( sous-vide ), per citarne alcune. I trigger possono essere impostati per attivare eventi in base a date e orari specifici, in base alla durata del tempo o all'alba/tramonto a una specifica latitudine e longitudine. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About/","text":"Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo is an open-source environmental monitoring and regulation system that was built to run on single-board computers, specifically the Raspberry Pi . Originally developed for cultivating edible mushrooms, Mycodo has grown to do much more. The system consists of two parts, a backend (daemon) and a frontend (web server). The backend performs tasks such as acquiring measurements from sensors and devices and coordinating a diverse set of responses to those measurements, including the ability to modulate outputs (switch relays, generate PWM signals, operate pumps, switch wireless outlets, publish/subscribe to MQTT, among others), regulate environmental conditions with PID control, schedule timers, capture photos and stream video, trigger actions when measurements meet certain conditions, and more. The frontend hosts a web interface that enables viewing and configuration from any browser-enabled device. There are a number of different uses for Mycodo. Some users simply store sensor measurements to monitor conditions remotely, others regulate the environmental conditions of a physical space, while others capture motion-activated or time-lapse photography, among other uses. Input controllers acquire measurements and store them in the InfluxDB time series database. Measurements typically come from sensors, but may also be configured to use the return value of Linux Bash or Python commands, or math equations, making this a very dynamic system for acquiring and generating data. Output controllers produce changes to the general input/output (GPIO) pins or may be configured to execute Linux Bash or Python commands, enabling a variety of potential uses. There are a few different types of outputs: simple switching of GPIO pins (HIGH/LOW), generating pulse-width modulated (PWM) signals, controlling peristaltic pumps, MQTT publishing, and more. When Inputs and Outputs are combined, Function controllers may be used to create feedback loops that uses the Output device to modulate an environmental condition the Input measures. Certain Inputs may be coupled with certain Outputs to create a variety of different control and regulation applications. Beyond simple regulation, Methods may be used to create a changing setpoint over time, enabling such things as thermal cyclers, reflow ovens, environmental simulation for terrariums, food and beverage fermentation or curing, and cooking food ( sous-vide ), to name a few. Triggers can be set to activate events based on specific dates and times, according to durations of time, or the sunrise/sunset at a specific latitude and longitude. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.nl/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo is een open-source milieubewakings- en regelsysteem dat is gebouwd om te draaien op single-board computers, met name de Raspberry Pi . Mycodo is oorspronkelijk ontwikkeld voor het kweken van eetbare paddenstoelen, maar is uitgegroeid tot veel meer. Het systeem bestaat uit twee delen, een backend (daemon) en een frontend (webserver). De backend voert taken uit zoals het verzamelen van metingen van sensoren en apparaten en het co\u00f6rdineren van een diverse reeks reacties op die metingen, waaronder de mogelijkheid om uitgangen te moduleren (relais schakelen, PWM-signalen genereren, pompen bedienen, draadloze stopcontacten schakelen, publiceren/aanmelden voor MQTT, enzovoort), omgevingscondities regelen met PID-regeling, timers plannen, foto's en video's vastleggen, acties activeren wanneer metingen aan bepaalde voorwaarden voldoen, en nog veel meer. De frontend bevat een webinterface die weergave en configuratie vanaf elk apparaat met een browser mogelijk maakt. Mycodo wordt op verschillende manieren gebruikt. Sommige gebruikers slaan gewoon sensormetingen op om de omstandigheden op afstand te controleren, anderen regelen de omgevingscondities van een fysieke ruimte, en weer anderen leggen onder meer bewegingsgeactiveerde of time-lapse fotografie vast. Input controllers verwerven metingen en slaan deze op in de InfluxDB tijdreeksdatabase. Metingen komen meestal van sensoren, maar kunnen ook worden geconfigureerd om de retourwaarde van Linux Bash of Python commando's, of wiskundige vergelijkingen te gebruiken, waardoor dit een zeer dynamisch systeem is voor het verwerven en genereren van gegevens. Output controllers produceren veranderingen aan de algemene input/output (GPIO) pinnen of kunnen worden geconfigureerd om Linux Bash of Python commando's uit te voeren, waardoor een verscheidenheid aan mogelijke toepassingen mogelijk is. Er zijn een paar verschillende soorten uitgangen: eenvoudig schakelen van GPIO-pinnen (HIGH/LOW), genereren van pulsbreedtegemoduleerde (PWM) signalen, aansturen van slangenpompen, MQTT-publicatie, en meer. Wanneer ingangen en uitgangen worden gecombineerd, kunnen functieregelaars worden gebruikt om terugkoppellussen te cre\u00ebren die de uitgang gebruiken om een door de ingang gemeten omgevingsconditie te moduleren. Bepaalde ingangen kunnen aan bepaalde uitgangen worden gekoppeld om een verscheidenheid van verschillende regel- en toezichttoepassingen te cre\u00ebren. Naast eenvoudige regeling kunnen methoden worden gebruikt om een in de tijd veranderend instelpunt te cre\u00ebren, waardoor bijvoorbeeld thermische cyclers, reflow-ovens, omgevingssimulatie voor terraria, fermentatie of uitharding van voedsel en dranken, en het koken van voedsel ( sous-vide ) mogelijk worden. Triggers kunnen worden ingesteld om gebeurtenissen te activeren op basis van specifieke data en tijden, volgens tijdsduur, of de zonsopgang/ondergang op een specifieke breedte- en lengtegraad. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.nn/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo is an open-source environmental monitoring and regulation system that was built to run on single-board computers, specifically the Raspberry Pi . Originally developed for cultivating edible mushrooms, Mycodo has grown to do much more. The system consists of two parts, a backend (daemon) and a frontend (web server). The backend performs tasks such as acquiring measurements from sensors and devices and coordinating a diverse set of responses to those measurements, including the ability to modulate outputs (switch relays, generate PWM signals, operate pumps, switch wireless outlets, publish/subscribe to MQTT, among others), regulate environmental conditions with PID control, schedule timers, capture photos and stream video, trigger actions when measurements meet certain conditions, and more. The frontend hosts a web interface that enables viewing and configuration from any browser-enabled device. There are a number of different uses for Mycodo. Some users simply store sensor measurements to monitor conditions remotely, others regulate the environmental conditions of a physical space, while others capture motion-activated or time-lapse photography, among other uses. Input controllers acquire measurements and store them in the InfluxDB time series database. Measurements typically come from sensors, but may also be configured to use the return value of Linux Bash or Python commands, or math equations, making this a very dynamic system for acquiring and generating data. Output controllers produce changes to the general input/output (GPIO) pins or may be configured to execute Linux Bash or Python commands, enabling a variety of potential uses. There are a few different types of outputs: simple switching of GPIO pins (HIGH/LOW), generating pulse-width modulated (PWM) signals, controlling peristaltic pumps, MQTT publishing, and more. When Inputs and Outputs are combined, Function controllers may be used to create feedback loops that uses the Output device to modulate an environmental condition the Input measures. Certain Inputs may be coupled with certain Outputs to create a variety of different control and regulation applications. Beyond simple regulation, Methods may be used to create a changing setpoint over time, enabling such things as thermal cyclers, reflow ovens, environmental simulation for terrariums, food and beverage fermentation or curing, and cooking food ( sous-vide ), to name a few. Triggers can be set to activate events based on specific dates and times, according to durations of time, or the sunrise/sunset at a specific latitude and longitude. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.pl/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo to open-source'owy system monitorowania i regulacji \u015brodowiska, kt\u00f3ry zosta\u0142 zbudowany do dzia\u0142ania na komputerach jednop\u0142ytkowych, a konkretnie na Raspberry Pi . Pierwotnie opracowany do uprawy grzyb\u00f3w jadalnych, Mycodo rozwin\u0105\u0142 si\u0119 do znacznie wi\u0119kszych mo\u017cliwo\u015bci. System sk\u0142ada si\u0119 z dw\u00f3ch cz\u0119\u015bci, backendu (demona) i frontu (serwera internetowego). Backend wykonuje takie zadania, jak pobieranie pomiar\u00f3w z czujnik\u00f3w i urz\u0105dze\u0144 oraz koordynacja r\u00f3\u017cnorodnych reakcji na te pomiary, w tym mo\u017cliwo\u015b\u0107 modulowania wyj\u015b\u0107 (prze\u0142\u0105czanie przeka\u017anik\u00f3w, generowanie sygna\u0142\u00f3w PWM, obs\u0142uga pomp, prze\u0142\u0105czanie gniazdek bezprzewodowych, publikowanie/podpisywanie si\u0119 do MQTT, mi\u0119dzy innymi), regulowanie warunk\u00f3w \u015brodowiskowych za pomoc\u0105 kontroli PID, harmonogramy, przechwytywanie zdj\u0119\u0107 i strumieniowanie wideo, wyzwalanie dzia\u0142a\u0144, gdy pomiary spe\u0142niaj\u0105 okre\u015blone warunki, i wiele innych. Frontend hostuje interfejs webowy, kt\u00f3ry umo\u017cliwia podgl\u0105d i konfiguracj\u0119 z dowolnego urz\u0105dzenia obs\u0142uguj\u0105cego przegl\u0105dark\u0119. Istnieje wiele r\u00f3\u017cnych zastosowa\u0144 dla Mycodo. Niekt\u00f3rzy u\u017cytkownicy po prostu przechowuj\u0105 pomiary czujnik\u00f3w, aby zdalnie monitorowa\u0107 warunki, inni reguluj\u0105 warunki \u015brodowiskowe w przestrzeni fizycznej, a jeszcze inni rejestruj\u0105 fotografi\u0119 aktywowan\u0105 ruchem lub poklatkow\u0105, w\u015br\u00f3d innych zastosowa\u0144. Kontrolery wej\u015bciowe pozyskuj\u0105 pomiary i przechowuj\u0105 je w bazie danych serii czasowych InfluxDB. Pomiary pochodz\u0105 zazwyczaj z czujnik\u00f3w, ale mog\u0105 by\u0107 r\u00f3wnie\u017c skonfigurowane tak, aby u\u017cywa\u0107 warto\u015bci zwrotnej polece\u0144 Linux Bash lub Python, lub r\u00f3wna\u0144 matematycznych, co sprawia, \u017ce jest to bardzo dynamiczny system pozyskiwania i generowania danych. Kontrolery wyj\u015b\u0107 wytwarzaj\u0105 zmiany na pinach og\u00f3lnego wej\u015bcia/wyj\u015bcia (GPIO) lub mog\u0105 by\u0107 skonfigurowane do wykonywania polece\u0144 Linux Bash lub Python, umo\u017cliwiaj\u0105c wiele potencjalnych zastosowa\u0144. Istnieje kilka r\u00f3\u017cnych typ\u00f3w wyj\u015b\u0107: proste prze\u0142\u0105czanie pin\u00f3w GPIO (HIGH/LOW), generowanie sygna\u0142\u00f3w modulowanych w szeroko\u015bci impulsu (PWM), sterowanie pompami perystaltycznymi, publikowanie MQTT i inne. Gdy wej\u015bcia i wyj\u015bcia s\u0105 po\u0142\u0105czone, sterowniki funkcyjne mog\u0105 by\u0107 u\u017cywane do tworzenia p\u0119tli sprz\u0119\u017cenia zwrotnego, kt\u00f3re wykorzystuje urz\u0105dzenie wyj\u015bciowe do modulowania warunk\u00f3w \u015brodowiskowych mierzonych przez wej\u015bcie. Niekt\u00f3re wej\u015bcia mog\u0105 by\u0107 po\u0142\u0105czone z niekt\u00f3rymi wyj\u015bciami, aby stworzy\u0107 wiele r\u00f3\u017cnych zastosowa\u0144 w zakresie sterowania i regulacji. Poza prost\u0105 regulacj\u0105, Metody mog\u0105 by\u0107 u\u017cywane do tworzenia zmieniaj\u0105cych si\u0119 w czasie warto\u015bci zadanych, umo\u017cliwiaj\u0105c takie rzeczy jak termocyklery, piece rozp\u0142ywowe, symulacj\u0119 \u015brodowiska dla terrari\u00f3w, fermentacj\u0119 \u017cywno\u015bci i napoj\u00f3w lub utwardzanie, oraz gotowanie \u017cywno\u015bci ( sous-vide ), aby wymieni\u0107 tylko kilka. Wyzwalacze mo\u017cna ustawi\u0107 tak, aby aktywowa\u0142y zdarzenia w oparciu o okre\u015blone daty i godziny, wed\u0142ug czasu trwania lub wschodu/zachodu s\u0142o\u0144ca na okre\u015blonej szeroko\u015bci i d\u0142ugo\u015bci geograficznej. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.pt/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo \u00e9 um sistema de monitoriza\u00e7\u00e3o e regula\u00e7\u00e3o ambiental de c\u00f3digo aberto que foi constru\u00eddo para funcionar em computadores de placa \u00fanica, especificamente o Raspberry Pi . Originalmente desenvolvido para o cultivo de cogumelos comest\u00edveis, Mycodo tem crescido para fazer muito mais. O sistema consiste em duas partes, um backend (daemon) e um frontend (servidor web). O backend executa tarefas tais como adquirir medi\u00e7\u00f5es de sensores e dispositivos e coordenar um conjunto diversificado de respostas a essas medi\u00e7\u00f5es, incluindo a capacidade de modular sa\u00eddas (comutar rel\u00e9s, gerar sinais PWM, operar bombas, mudar sa\u00eddas sem fios, publicar/assinar ao MQTT, entre outros), regular as condi\u00e7\u00f5es ambientais com controlo PID, programar temporizadores, capturar fotos e transmitir v\u00eddeo, desencadear ac\u00e7\u00f5es quando as medi\u00e7\u00f5es satisfazem determinadas condi\u00e7\u00f5es, e muito mais. O frontend aloja uma interface web que permite a visualiza\u00e7\u00e3o e configura\u00e7\u00e3o a partir de qualquer dispositivo activado por browser. Existem v\u00e1rias utiliza\u00e7\u00f5es diferentes para Mycodo. Alguns utilizadores simplesmente armazenam medi\u00e7\u00f5es de sensores para monitorizar as condi\u00e7\u00f5es \u00e0 dist\u00e2ncia, outros regulam as condi\u00e7\u00f5es ambientais de um espa\u00e7o f\u00edsico, enquanto outros captam fotografia activada por movimento ou time-lapse, entre outras utiliza\u00e7\u00f5es. Os controladores de entrada adquirem medidas e armazenam-nas na base de dados de s\u00e9ries temporais InfluxDB. As medi\u00e7\u00f5es v\u00eam tipicamente de sensores, mas tamb\u00e9m podem ser configuradas para utilizar o valor de retorno dos comandos Linux Bash ou Python, ou equa\u00e7\u00f5es matem\u00e1ticas, tornando-o um sistema muito din\u00e2mico para a aquisi\u00e7\u00e3o e gera\u00e7\u00e3o de dados. Os controladores de sa\u00edda produzem altera\u00e7\u00f5es nos pinos de entrada/sa\u00edda geral (GPIO) ou podem ser configurados para executar comandos Linux Bash ou Python, permitindo uma variedade de usos potenciais. Existem alguns tipos diferentes de sa\u00eddas: simples comuta\u00e7\u00e3o de pinos GPIO (HIGH/LOW), gera\u00e7\u00e3o de sinais de largura de pulso modulada (PWM), controlo de bombas perist\u00e1lticas, publica\u00e7\u00e3o de MQTT, e muito mais. Quando as Entradas e Sa\u00eddas s\u00e3o combinadas, os controladores de fun\u00e7\u00f5es podem ser utilizados para criar la\u00e7os de feedback que utilizam o dispositivo de Sa\u00edda para modular uma condi\u00e7\u00e3o ambiental as medidas de Entrada. Certas Entradas podem ser acopladas a certas Sa\u00eddas para criar uma variedade de diferentes aplica\u00e7\u00f5es de controlo e regula\u00e7\u00e3o. Para al\u00e9m da regula\u00e7\u00e3o simples, podem ser utilizados m\u00e9todos para criar um ponto de ajuste vari\u00e1vel ao longo do tempo, permitindo coisas como termocicladores, fornos de refluxo, simula\u00e7\u00e3o ambiental para terr\u00e1rios, fermenta\u00e7\u00e3o ou cura de alimentos e bebidas, e cozinhar alimentos ( sous-vide ), para citar alguns. Os gatilhos podem ser definidos para activar eventos com base em datas e horas espec\u00edficas, de acordo com dura\u00e7\u00f5es de tempo, ou o nascer/p\u00f4r-do-sol a uma latitude e longitude espec\u00edficas. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.ru/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo - \u044d\u0442\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0438 \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0439 \u0441\u0440\u0435\u0434\u044b \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 \u043e\u0434\u043d\u043e\u043f\u043b\u0430\u0442\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430\u0445, \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438 Raspberry Pi . \u041f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0432\u044b\u0440\u0430\u0449\u0438\u0432\u0430\u043d\u0438\u044f \u0441\u044a\u0435\u0434\u043e\u0431\u043d\u044b\u0445 \u0433\u0440\u0438\u0431\u043e\u0432, Mycodo \u0441\u0442\u0430\u043b\u0430 \u0434\u0435\u043b\u0430\u0442\u044c \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0430\u0441\u0442\u0435\u0439: \u0431\u044d\u043a\u044d\u043d\u0434 (\u0434\u0435\u043c\u043e\u043d) \u0438 \u0444\u0440\u043e\u043d\u0442\u044d\u043d\u0434 (\u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440). \u0411\u044d\u043a\u044d\u043d\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0442\u0430\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u043a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 \u043e\u0442 \u0434\u0430\u0442\u0447\u0438\u043a\u043e\u0432 \u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432 \u0438 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0440\u0435\u0430\u043a\u0446\u0438\u0439 \u043d\u0430 \u044d\u0442\u0438 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u0445\u043e\u0434\u044b (\u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0440\u0435\u043b\u0435, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0428\u0418\u041c-\u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0441\u043e\u0441\u0430\u043c\u0438, \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0431\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0440\u043e\u0437\u0435\u0442\u043a\u0438, \u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u0442\u044c/\u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 MQTT \u0438 \u0442.\u0434.), \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0439 \u0441\u0440\u0435\u0434\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u041f\u0418\u0414-\u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u0439\u043c\u0435\u0440\u044b, \u0434\u0435\u043b\u0430\u0442\u044c \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0438 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0438\u0434\u0435\u043e, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u043a\u043e\u0433\u0434\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c, \u0438 \u043c\u043d\u043e\u0433\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435. \u041d\u0430 \u043f\u0435\u0440\u0435\u0434\u043d\u0435\u0439 \u043f\u0430\u043d\u0435\u043b\u0438 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0438 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441 \u043b\u044e\u0431\u043e\u0433\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e \u0431\u0440\u0430\u0443\u0437\u0435\u0440. Mycodo \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e-\u0440\u0430\u0437\u043d\u043e\u043c\u0443. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0445\u0440\u0430\u043d\u044f\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 \u0434\u0430\u0442\u0447\u0438\u043a\u043e\u0432 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u0439, \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u0443\u044e\u0442 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0439 \u0441\u0440\u0435\u0434\u044b \u0432 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435, \u0442\u0440\u0435\u0442\u044c\u0438 \u0434\u0435\u043b\u0430\u044e\u0442 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438, \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435\u043c, \u0438\u043b\u0438 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0441 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u043e\u0439. \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442 \u0438\u0445 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0440\u044f\u0434\u043e\u0432 InfluxDB. \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0442 \u043e\u0442 \u0434\u0430\u0442\u0447\u0438\u043a\u043e\u0432, \u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u0430\u043d\u0434 Linux Bash \u0438\u043b\u0438 Python, \u0438\u043b\u0438 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0439, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u0443 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043e\u0447\u0435\u043d\u044c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u043d\u043e\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0432\u044b\u0445\u043e\u0434\u043e\u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0431\u0449\u0438\u0445 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430\u0445 \u0432\u0432\u043e\u0434\u0430/\u0432\u044b\u0432\u043e\u0434\u0430 (GPIO) \u0438\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 Linux Bash \u0438\u043b\u0438 Python, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0432 \u0441\u0430\u043c\u044b\u0445 \u0440\u0430\u0437\u043d\u044b\u0445 \u0446\u0435\u043b\u044f\u0445. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0432\u044b\u0445\u043e\u0434\u043e\u0432: \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 GPIO (HIGH/LOW), \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0441 \u0448\u0438\u0440\u043e\u0442\u043d\u043e-\u0438\u043c\u043f\u0443\u043b\u044c\u0441\u043d\u043e\u0439 \u043c\u043e\u0434\u0443\u043b\u044f\u0446\u0438\u0435\u0439 (PWM), \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0438\u0441\u0442\u0430\u043b\u044c\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0441\u043e\u0441\u0430\u043c\u0438, \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f MQTT \u0438 \u043c\u043d\u043e\u0433\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435. \u041a\u043e\u0433\u0434\u0430 \u0432\u0445\u043e\u0434\u044b \u0438 \u0432\u044b\u0445\u043e\u0434\u044b \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b, \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0443\u0440\u043e\u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0439 \u0441\u0440\u0435\u0434\u044b, \u0438\u0437\u043c\u0435\u0440\u044f\u0435\u043c\u044b\u0445 \u0432\u0445\u043e\u0434\u043e\u043c. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0432\u0445\u043e\u0434\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0432\u044b\u0445\u043e\u0434\u0430\u043c\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e\u043c\u0438\u043c\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043c\u0435\u0442\u043e\u0434\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u044f\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0432 \u0442\u0435\u0440\u043c\u043e\u0446\u0438\u043a\u043b\u0435\u0440\u0430\u0445, \u043f\u0435\u0447\u0430\u0445 \u0434\u043e\u0432\u043e\u0434\u043a\u0438, \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0439 \u0441\u0440\u0435\u0434\u044b \u0434\u043b\u044f \u0442\u0435\u0440\u0440\u0430\u0440\u0438\u0443\u043c\u043e\u0432, \u0444\u0435\u0440\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u043f\u0438\u0442\u0430\u043d\u0438\u044f \u0438 \u043d\u0430\u043f\u0438\u0442\u043a\u043e\u0432, \u043f\u0440\u0438\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0438\u0449\u0438 ( sous-vide ) \u0438 \u0442.\u0434., \u0438 \u0442.\u043f. \u0422\u0440\u0438\u0433\u0433\u0435\u0440\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u0434\u043b\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u0442 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438\u043b\u0438 \u0432\u043e\u0441\u0445\u043e\u0434\u043e\u043c/\u0437\u0430\u043a\u0430\u0442\u043e\u043c \u0441\u043e\u043b\u043d\u0446\u0430 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0448\u0438\u0440\u043e\u0442\u0435 \u0438 \u0434\u043e\u043b\u0433\u043e\u0442\u0435. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.sr/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo is an open-source environmental monitoring and regulation system that was built to run on single-board computers, specifically the Raspberry Pi . Originally developed for cultivating edible mushrooms, Mycodo has grown to do much more. The system consists of two parts, a backend (daemon) and a frontend (web server). The backend performs tasks such as acquiring measurements from sensors and devices and coordinating a diverse set of responses to those measurements, including the ability to modulate outputs (switch relays, generate PWM signals, operate pumps, switch wireless outlets, publish/subscribe to MQTT, among others), regulate environmental conditions with PID control, schedule timers, capture photos and stream video, trigger actions when measurements meet certain conditions, and more. The frontend hosts a web interface that enables viewing and configuration from any browser-enabled device. There are a number of different uses for Mycodo. Some users simply store sensor measurements to monitor conditions remotely, others regulate the environmental conditions of a physical space, while others capture motion-activated or time-lapse photography, among other uses. Input controllers acquire measurements and store them in the InfluxDB time series database. Measurements typically come from sensors, but may also be configured to use the return value of Linux Bash or Python commands, or math equations, making this a very dynamic system for acquiring and generating data. Output controllers produce changes to the general input/output (GPIO) pins or may be configured to execute Linux Bash or Python commands, enabling a variety of potential uses. There are a few different types of outputs: simple switching of GPIO pins (HIGH/LOW), generating pulse-width modulated (PWM) signals, controlling peristaltic pumps, MQTT publishing, and more. When Inputs and Outputs are combined, Function controllers may be used to create feedback loops that uses the Output device to modulate an environmental condition the Input measures. Certain Inputs may be coupled with certain Outputs to create a variety of different control and regulation applications. Beyond simple regulation, Methods may be used to create a changing setpoint over time, enabling such things as thermal cyclers, reflow ovens, environmental simulation for terrariums, food and beverage fermentation or curing, and cooking food ( sous-vide ), to name a few. Triggers can be set to activate events based on specific dates and times, according to durations of time, or the sunrise/sunset at a specific latitude and longitude. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.sv/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo \u00e4r ett milj\u00f6\u00f6vervaknings- och regleringssystem med \u00f6ppen k\u00e4llkod som byggdes f\u00f6r att k\u00f6ras p\u00e5 enbordsdatorer, s\u00e4rskilt Raspberry Pi . Mycodo utvecklades ursprungligen f\u00f6r att odla \u00e4tliga svampar, men har vuxit till att g\u00f6ra mycket mer. Systemet best\u00e5r av tv\u00e5 delar, en backend (daemon) och en frontend (webbserver). Baksidan utf\u00f6r uppgifter som att samla in m\u00e4tningar fr\u00e5n sensorer och enheter och samordna en m\u00e4ngd olika svar p\u00e5 dessa m\u00e4tningar, inklusive f\u00f6rm\u00e5gan att modulera utg\u00e5ngar (koppla om rel\u00e4er, generera PWM-signaler, driva pumpar, koppla om tr\u00e5dl\u00f6sa uttag, publicera/skriva p\u00e5 MQTT, med mera), reglera milj\u00f6f\u00f6rh\u00e5llanden med PID-kontroll, schemal\u00e4gga timers, ta foton och str\u00f6mma video, utl\u00f6sa \u00e5tg\u00e4rder n\u00e4r m\u00e4tningar uppfyller vissa villkor, med mera. Frontenden \u00e4r v\u00e4rd f\u00f6r ett webbgr\u00e4nssnitt som g\u00f6r det m\u00f6jligt att visa och konfigurera fr\u00e5n alla enheter med webbl\u00e4sare. Mycodo kan anv\u00e4ndas p\u00e5 m\u00e5nga olika s\u00e4tt. Vissa anv\u00e4ndare lagrar helt enkelt sensorm\u00e4tningar f\u00f6r att \u00f6vervaka f\u00f6rh\u00e5llandena p\u00e5 distans, andra reglerar milj\u00f6f\u00f6rh\u00e5llandena i ett fysiskt utrymme, medan andra bland annat tar r\u00f6relsestyrd eller tidsf\u00f6rloppsfotografering. Ing\u00e5ngskontrollanter samlar in m\u00e4tningar och lagrar dem i InfluxDB:s tidsseriedatabas. M\u00e4tningarna kommer vanligtvis fr\u00e5n sensorer, men kan ocks\u00e5 konfigureras f\u00f6r att anv\u00e4nda returv\u00e4rdet av Linux Bash- eller Pythonkommandon eller matematiska ekvationer, vilket g\u00f6r detta till ett mycket dynamiskt system f\u00f6r att samla in och generera data. Utg\u00e5ngskontroller producerar \u00e4ndringar p\u00e5 GPIO-stift (general input/output) eller kan konfigureras f\u00f6r att utf\u00f6ra Linux Bash- eller Python-kommandon, vilket m\u00f6jligg\u00f6r en m\u00e4ngd olika anv\u00e4ndningsomr\u00e5den. Det finns n\u00e5gra olika typer av utg\u00e5ngar: enkel omkoppling av GPIO-stift (HIGH/LOW), generering av PWM-signaler (pulsbreddsmodulerade signaler), styrning av peristaltiska pumpar, MQTT-publicering med mera. N\u00e4r ing\u00e5ngar och utg\u00e5ngar kombineras kan funktionskontroller anv\u00e4ndas f\u00f6r att skapa \u00e5terkopplingsslingor som anv\u00e4nder utg\u00e5ngsenheten f\u00f6r att modulera ett milj\u00f6tillst\u00e5nd som ing\u00e5ngen m\u00e4ter. Vissa ing\u00e5ngar kan kombineras med vissa utg\u00e5ngar f\u00f6r att skapa en m\u00e4ngd olika styr- och reglertill\u00e4mpningar. Ut\u00f6ver enkel reglering kan metoderna anv\u00e4ndas f\u00f6r att skapa ett f\u00f6r\u00e4ndrat b\u00f6rv\u00e4rde \u00f6ver tiden, vilket m\u00f6jligg\u00f6r t.ex. termiska cyklare, reflow-ugnar, milj\u00f6simulering f\u00f6r terrarier, j\u00e4sning eller h\u00e4rdning av livsmedel och drycker och tillagning av mat ( sous-vide ), f\u00f6r att n\u00e4mna n\u00e5gra exempel. Utl\u00f6sare kan st\u00e4llas in f\u00f6r att aktivera h\u00e4ndelser baserat p\u00e5 specifika datum och tider, enligt tidsperioder eller vid soluppg\u00e5ng/solnedg\u00e5ng p\u00e5 en specifik latitud och longitud. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.tr/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska \u4e2d\u6587 Mycodo, tek kartl\u0131 bilgisayarlarda, \u00f6zellikle de Raspberry Pi \u00fczerinde \u00e7al\u0131\u015fmak \u00fczere in\u015fa edilmi\u015f a\u00e7\u0131k kaynakl\u0131 bir \u00e7evresel izleme ve d\u00fczenleme sistemidir. Ba\u015flang\u0131\u00e7ta yenilebilir mantar yeti\u015ftirmek i\u00e7in geli\u015ftirilen Mycodo, \u00e7ok daha fazlas\u0131n\u0131 yapmak i\u00e7in b\u00fcy\u00fcd\u00fc. Sistem, bir arka u\u00e7 (daemon) ve bir \u00f6n u\u00e7 (web sunucusu) olmak \u00fczere iki b\u00f6l\u00fcmden olu\u015fmaktad\u0131r. Arka u\u00e7, sens\u00f6rlerden ve cihazlardan \u00f6l\u00e7\u00fcmler almak ve bu \u00f6l\u00e7\u00fcmlere verilen, \u00e7\u0131k\u0131\u015flar\u0131 mod\u00fcle etme (r\u00f6leleri de\u011fi\u015ftirme, PWM sinyalleri \u00fcretme, pompalar\u0131 \u00e7al\u0131\u015ft\u0131rma, kablosuz \u00e7\u0131k\u0131\u015flar\u0131 de\u011fi\u015ftirme, MQTT'ye yay\u0131nlama/abone olma ve di\u011ferleri), PID kontrol\u00fc ile \u00e7evresel ko\u015fullar\u0131 d\u00fczenleme, zamanlay\u0131c\u0131lar\u0131 zamanlama, foto\u011fraf \u00e7ekme ve video ak\u0131\u015f\u0131, \u00f6l\u00e7\u00fcmler belirli ko\u015fullar\u0131 kar\u015f\u0131lad\u0131\u011f\u0131nda eylemleri tetikleme ve daha fazlas\u0131 dahil olmak \u00fczere \u00e7e\u015fitli yan\u0131tlar\u0131 koordine etme gibi g\u00f6revleri yerine getirir. \u00d6n u\u00e7, taray\u0131c\u0131 \u00f6zellikli herhangi bir cihazdan g\u00f6r\u00fcnt\u00fcleme ve yap\u0131land\u0131rma sa\u011flayan bir web aray\u00fcz\u00fc bar\u0131nd\u0131r\u0131r. Mycodo'nun \u00e7ok say\u0131da farkl\u0131 kullan\u0131m alan\u0131 vard\u0131r. Baz\u0131 kullan\u0131c\u0131lar ko\u015fullar\u0131 uzaktan izlemek i\u00e7in sens\u00f6r \u00f6l\u00e7\u00fcmlerini depolarken, di\u011ferleri fiziksel bir alan\u0131n \u00e7evresel ko\u015fullar\u0131n\u0131 d\u00fczenliyor, di\u011ferleri ise di\u011fer kullan\u0131mlar\u0131n yan\u0131 s\u0131ra hareketle etkinle\u015ftirilen veya h\u0131zland\u0131r\u0131lm\u0131\u015f foto\u011fraf \u00e7ekiyor. Giri\u015f denetleyicileri \u00f6l\u00e7\u00fcmleri al\u0131r ve bunlar\u0131 InfluxDB zaman serisi veritaban\u0131nda depolar. \u00d6l\u00e7\u00fcmler genellikle sens\u00f6rlerden gelir, ancak Linux Bash veya Python komutlar\u0131n\u0131n veya matematik denklemlerinin d\u00f6n\u00fc\u015f de\u011ferini kullanmak \u00fczere de yap\u0131land\u0131r\u0131labilir, bu da bunu veri elde etmek ve \u00fcretmek i\u00e7in \u00e7ok dinamik bir sistem haline getirir. \u00c7\u0131k\u0131\u015f denetleyicileri genel giri\u015f/\u00e7\u0131k\u0131\u015f (GPIO) pinlerinde de\u011fi\u015fiklikler \u00fcretir veya Linux Bash veya Python komutlar\u0131n\u0131 y\u00fcr\u00fctecek \u015fekilde yap\u0131land\u0131r\u0131larak \u00e7e\u015fitli potansiyel kullan\u0131mlara olanak sa\u011flar. Birka\u00e7 farkl\u0131 \u00e7\u0131k\u0131\u015f t\u00fcr\u00fc vard\u0131r: GPIO pinlerinin basit anahtarlanmas\u0131 (Y\u00dcKSEK/D\u00dc\u015e\u00dcK), darbe geni\u015fli\u011fi mod\u00fclasyonlu (PWM) sinyaller \u00fcretme, peristaltik pompalar\u0131 kontrol etme, MQTT yay\u0131nlama ve daha fazlas\u0131. Giri\u015fler ve \u00c7\u0131k\u0131\u015flar birle\u015ftirildi\u011finde, Fonksiyon kontrol\u00f6rleri, Giri\u015fin \u00f6l\u00e7t\u00fc\u011f\u00fc bir \u00e7evresel ko\u015fulu mod\u00fcle etmek i\u00e7in \u00c7\u0131k\u0131\u015f cihaz\u0131n\u0131 kullanan geri besleme d\u00f6ng\u00fcleri olu\u015fturmak i\u00e7in kullan\u0131labilir. \u00c7e\u015fitli farkl\u0131 kontrol ve d\u00fczenleme uygulamalar\u0131 olu\u015fturmak i\u00e7in belirli Giri\u015fler belirli \u00c7\u0131k\u0131\u015flarla birle\u015ftirilebilir. Basit d\u00fczenlemenin \u00f6tesinde, Y\u00f6ntemler zaman i\u00e7inde de\u011fi\u015fen bir ayar noktas\u0131 olu\u015fturmak i\u00e7in kullan\u0131labilir, bu da termal d\u00f6ng\u00fcler, yeniden ak\u0131\u015f f\u0131r\u0131nlar\u0131, teraryumlar i\u00e7in \u00e7evresel sim\u00fclasyon, yiyecek ve i\u00e7ecek fermantasyonu veya k\u00fcrleme ve yiyecek pi\u015firme ( sous-vide ) gibi \u015feyleri m\u00fcmk\u00fcn k\u0131lar. Tetikleyiciler, belirli tarih ve saatlere, zaman s\u00fcrelerine veya belirli bir enlem ve boylamda g\u00fcne\u015fin do\u011fu\u015funa/ bat\u0131\u015f\u0131na g\u00f6re olaylar\u0131 etkinle\u015ftirmek \u00fczere ayarlanabilir. Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"About.zh/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e Mycodo\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u73af\u5883\u76d1\u6d4b\u548c\u8c03\u8282\u7cfb\u7edf\uff0c\u5b83\u662f\u5efa\u7acb\u5728\u5355\u677f\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\uff0c\u7279\u522b\u662f Raspberry Pi \u3002 Mycodo\u6700\u521d\u662f\u4e3a\u57f9\u517b\u98df\u7528\u83cc\u800c\u5f00\u53d1\u7684\uff0c\u73b0\u5728\u5df2\u7ecf\u53d1\u5c55\u5230\u53ef\u4ee5\u505a\u5f97\u66f4\u591a\u3002\u8be5\u7cfb\u7edf\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u4e2a\u540e\u7aef\uff08\u5b88\u62a4\u7a0b\u5e8f\uff09\u548c\u4e00\u4e2a\u524d\u7aef\uff08\u7f51\u7edc\u670d\u52a1\u5668\uff09\u3002\u540e\u53f0\u6267\u884c\u7684\u4efb\u52a1\u5305\u62ec\u4ece\u4f20\u611f\u5668\u548c\u8bbe\u5907\u83b7\u53d6\u6d4b\u91cf\u503c\uff0c\u5e76\u534f\u8c03\u5bf9\u8fd9\u4e9b\u6d4b\u91cf\u503c\u7684\u5404\u79cd\u53cd\u5e94\uff0c\u5305\u62ec\u8c03\u5236\u8f93\u51fa\u7684\u80fd\u529b\uff08\u5f00\u5173\u7ee7\u7535\u5668\u3001\u751f\u6210PWM\u4fe1\u53f7\u3001\u64cd\u4f5c\u6cf5\u3001\u5f00\u5173\u65e0\u7ebf\u63d2\u5ea7\u3001\u53d1\u5e03/\u8ba2\u9605MQTT\u7b49\uff09\u3001\u7528PID\u63a7\u5236\u8c03\u8282\u73af\u5883\u6761\u4ef6\u3001\u5b89\u6392\u5b9a\u65f6\u5668\u3001\u6355\u6349\u7167\u7247\u548c\u89c6\u9891\u6d41\u3001\u5728\u6d4b\u91cf\u503c\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u65f6\u89e6\u53d1\u884c\u52a8\u7b49\u7b49\u3002\u524d\u7aef\u6709\u4e00\u4e2a\u7f51\u7edc\u754c\u9762\uff0c\u53ef\u4ee5\u4ece\u4efb\u4f55\u652f\u6301\u6d4f\u89c8\u5668\u7684\u8bbe\u5907\u4e0a\u67e5\u770b\u548c\u914d\u7f6e\u3002 Mycodo\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u7528\u9014\u3002\u4e00\u4e9b\u7528\u6237\u53ea\u662f\u7b80\u5355\u5730\u5b58\u50a8\u4f20\u611f\u5668\u7684\u6d4b\u91cf\u503c\uff0c\u4ee5\u8fdc\u7a0b\u76d1\u63a7\u6761\u4ef6\uff0c\u5176\u4ed6\u7528\u6237\u5219\u662f\u8c03\u8282\u7269\u7406\u7a7a\u95f4\u7684\u73af\u5883\u6761\u4ef6\uff0c\u800c\u5176\u4ed6\u7528\u6237\u5219\u662f\u6355\u6349\u8fd0\u52a8\u6fc0\u6d3b\u6216\u5ef6\u65f6\u6444\u5f71\uff0c\u4ee5\u53ca\u5176\u4ed6\u7528\u9014\u3002 \u8f93\u5165\u63a7\u5236\u5668\u83b7\u53d6\u6d4b\u91cf\u503c\u5e76\u5c06\u5176\u5b58\u50a8\u5728InfluxDB\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e93\u4e2d\u3002\u6d4b\u91cf\u503c\u901a\u5e38\u6765\u81ea\u4f20\u611f\u5668\uff0c\u4f46\u4e5f\u53ef\u80fd\u88ab\u914d\u7f6e\u4e3a\u4f7f\u7528Linux Bash\u6216Python\u547d\u4ee4\u7684\u8fd4\u56de\u503c\uff0c\u6216\u6570\u5b66\u65b9\u7a0b\uff0c\u8fd9\u4f7f\u5f97\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u52a8\u6001\u7684\u83b7\u53d6\u548c\u751f\u6210\u6570\u636e\u7684\u7cfb\u7edf\u3002 \u8f93\u51fa\u63a7\u5236\u5668\u5bf9\u901a\u7528\u8f93\u5165/\u8f93\u51fa\uff08GPIO\uff09\u5f15\u811a\u4ea7\u751f\u53d8\u5316\uff0c\u6216\u8005\u53ef\u4ee5\u914d\u7f6e\u4e3a\u6267\u884cLinux Bash\u6216Python\u547d\u4ee4\uff0c\u5b9e\u73b0\u5404\u79cd\u6f5c\u5728\u7528\u9014\u3002\u6709\u51e0\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u8f93\u51fa\uff1aGPIO\u5f15\u811a\u7684\u7b80\u5355\u5f00\u5173\uff08\u9ad8/\u4f4e\uff09\uff0c\u4ea7\u751f\u8109\u5bbd\u8c03\u5236\uff08PWM\uff09\u4fe1\u53f7\uff0c\u63a7\u5236\u8815\u52a8\u6cf5\uff0cMQTT\u53d1\u5e03\uff0c\u7b49\u7b49\u3002 \u5f53\u8f93\u5165\u548c\u8f93\u51fa\u76f8\u7ed3\u5408\u65f6\uff0c\u529f\u80fd\u63a7\u5236\u5668\u53ef\u7528\u4e8e\u521b\u5efa\u53cd\u9988\u56de\u8def\uff0c\u4f7f\u7528\u8f93\u51fa\u8bbe\u5907\u6765\u8c03\u8282\u8f93\u5165\u6240\u6d4b\u91cf\u7684\u73af\u5883\u6761\u4ef6\u3002\u67d0\u4e9b\u8f93\u5165\u53ef\u4ee5\u4e0e\u67d0\u4e9b\u8f93\u51fa\u7ed3\u5408\uff0c\u4ee5\u521b\u9020\u5404\u79cd\u4e0d\u540c\u7684\u63a7\u5236\u548c\u8c03\u8282\u5e94\u7528\u3002\u9664\u4e86\u7b80\u5355\u7684\u8c03\u8282\uff0c\u65b9\u6cd5\u53ef\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u968f\u65f6\u95f4\u53d8\u5316\u7684\u8bbe\u5b9a\u70b9\uff0c\u5b9e\u73b0\u8bf8\u5982\u70ed\u5faa\u73af\u5668\u3001\u56de\u6d41\u7089\u3001\u9972\u517b\u7bb1\u7684\u73af\u5883\u6a21\u62df\u3001\u98df\u54c1\u548c\u996e\u6599\u7684\u53d1\u9175\u6216\u814c\u5236\uff0c\u4ee5\u53ca\u70f9\u996a\u98df\u7269\uff08 \u82cf\u5f0f\u84b8\u716e \uff09\uff0c\u4ec5\u4e3e\u51e0\u4f8b\u3002 \u89e6\u53d1\u5668\u53ef\u4ee5\u88ab\u8bbe\u7f6e\u4e3a\u6839\u636e\u7279\u5b9a\u7684\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u6839\u636e\u65f6\u95f4\u7684\u957f\u77ed\uff0c\u6216\u7279\u5b9a\u7ecf\u7eac\u5ea6\u7684\u65e5\u51fa/\u65e5\u843d\u6765\u6fc0\u6d3b\u4e8b\u4ef6\u3002 Mycodo has been translated to several languages. By default, the language of the browser will determine which language is used, but may be overridden in the General Settings, on the [Gear Icon] -> Configure -> General page. If you find an issue and would like to correct a translation or would like to add another language, this can be done at https://translate.kylegabriel.com .","title":"About"},{"location":"Actions/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. These are the actions that can be added to Controllers (i.e. Input, Conditional, and Trigger Controllers) to provide a way to add additional functionality or interact with other parts of Mycodo. Actions may work with one or more controller type, depending on how the Action has been designed. For a full list of supported Actions, see Supported Actions . Custom Actions ~ There is a Custom Action import system in Mycodo that allows user-created Actions to be used in the Mycodo system. Custom Actions can be uploaded on the [Gear Icon] -> Configure -> Custom Actions page. After import, they will be available to use on the Setup -> Function page. If you develop a working Action module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in modules located in the directory Mycodo/mycodo/actions for examples of the proper formatting. There are also example Custom Actions in the directory Mycodo/mycodo/actions/examples Additionally, I have another github repository devoted to Custom Modules that are not included in the built-in set, at kizniche/Mycodo-custom .","title":"Actions (English)"},{"location":"Actions/#custom-actions","text":"There is a Custom Action import system in Mycodo that allows user-created Actions to be used in the Mycodo system. Custom Actions can be uploaded on the [Gear Icon] -> Configure -> Custom Actions page. After import, they will be available to use on the Setup -> Function page. If you develop a working Action module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in modules located in the directory Mycodo/mycodo/actions for examples of the proper formatting. There are also example Custom Actions in the directory Mycodo/mycodo/actions/examples Additionally, I have another github repository devoted to Custom Modules that are not included in the built-in set, at kizniche/Mycodo-custom .","title":"Custom Actions"},{"location":"Alerts/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Alerts can be used to notify users about the state of the system. For things like sensor monitoring, this could be a threshold that indicates something needs attention. E-Mail notifications are built-in to Mycodo in a number of places, however there are several places (Inputs, Outputs, Controllers) that allow custom Python code to be used, enabling many other notification options to be built. See Alert Settings for more information about setting up Alerts.","title":"Alerts"},{"location":"Analog-To-Digital-Converters/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. An analog-to-digital converter (ADC) allows the measurement of an analog voltage. Note A voltage divider may be necessary to convert your source voltage to an acceptable range for the ADC. ADS1x15: Analog-to-digital converter link ADS1256: Analog-to-digital converter link MCP3008: Analog-to-digital converter link MCP342x: Analog-to-digital converter link","title":"Analog-To-Digital Converters"},{"location":"Calibration/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Calibration can be performed for any Input, Output, or Function if that functionality has been built in to the module. Some common modules that have calibration are several of the Atlas Scientific, MH-Z19, and DS-type Inputs and many of the peristaltic pump Outputs. Calibration actions can be found on the options page for the particular device. Refer to the calibration instructions at this location for how to perform a successful calibration.","title":"Calibration"},{"location":"Camera/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Page: More -> Camera Cameras can be used to capture still images, create time-lapses, and stream video. Cameras may also be used by Functions to trigger a camera image or video capture. There are several libraries that may be used to access your camera, which includes picamera (Raspberry Pi Camera), fswebcam, opencv, urllib, and requests (among potentially others). These libraries enable images to be acquired from the Raspberry Pi camera, USB cameras and webcams, and IP cameras that are accessible by a URL. Furthermore, using the urllib and request libraries, any image URL can be used to acquire images.","title":"Camera"},{"location":"Configuration-Settings/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Page: [Gear Icon] -> Configure The settings menu, accessed by selecting the gear icon in the top-right, then the Configure link, is a general area for various system-wide configuration options. General Settings ~ Page: [Gear Icon] -> Configure -> General Setting Description Language Set the language that will be displayed in the web user interface. Force HTTPS Require web browsers to use SSL/HTTPS. Any request to http:// will be redirected to https:// . Hide success alerts Hide all success alert boxes that appear at the top of the page. Hide info alerts Hide all info alert boxes that appear at the top of the page. Hide warning alerts Hide all warning alert boxes that appear at the top of the page. Opt-out of statistics Turn off sending anonymous usage statistics. Please consider that this helps the development to leave on. Time Series Database Settings ~ Page: [Gear Icon] -> Configure -> General Measurements are stored in a time-series database. There are currently two options that can be used with Mycodo, InfluxDB 1.x and InfluxDB 2.x. InfluxDB 1.x works on both 32-bit and 64-bit operating systems, but 2.x only works on 64-bit operating systems. Therefore, if you are using a 32-bit operating system, you will need to use InfluxDB 1.x. During the Mycodo install, you can select to install influxDB 1.x, 2.x, or neither. If you don't install InfluxDB, you will need to specify the host and credentials to an alternate install for Mycodo to be able to store and query measurements. If you are installing via Docker, you will need to change the hostname to \"mycodo_influxdb\" after the Mycodo install to be able to connect to the InfluxDB Docker container. Setting Description Database Select the influxdb version to use. Retention Policy Select the retention policy. Default is \"autogen\" for v1.x and \"infinite\" for v2.x. Hostname The hostname to connect to the time-series server. Default is \"localhost\". Port The time-series database port. Default is 8086. Database Name The name of the database (v1.x) or bucket (v2.x) for Mycodo to store to and query from. Default is \"mycodo_db\". Username The username to access the database (if credentials are required). Default is \"mycodo\". Password The password to access the database (if credentials are required). Dashboard Settings ~ Page: [Gear Icon] -> Configure -> General Setting Description Grid Cell Height (px) The height of each widget cell, in pixels. Upgrade Settings ~ Page: [Gear Icon] -> Configure -> General Setting Description Internet Test IP Address The IP address to use to test for an active internet connection. Internet Test Port The port to use to test for an active internet connection. Internet Test Timeout The timeout period for testing for an active internet connection. Check for Updates Automatically check for updates every 2 days and notify through the web interface. If there is a new update, the Configure (Gear Icon) as well as the Upgrade menu will turn the color red. Energy Usage Settings ~ Page: [Gear Icon] -> Configure -> General In order to calculate accurate energy usage statistics, a few characteristics of your electrical system needs to be know. These variables should describe the characteristics of the electrical system being used by the relays to operate electrical devices. Note If not using a current sensor, proper energy usage calculations will rely on the correct current draw to be set for each output (see Output Settings ). Setting Description Max Amps Set the maximum allowed amperage to be switched on at any given time. If a output that's instructed to turn on will cause the sum of active devices to exceed this amount, the output will not be allowed to turn on, to prevent any damage that may result from exceeding current limits. Voltage Alternating current (AC) voltage that is switched by the outputs. This is usually 120 or 240. Cost per kWh This is how much you pay per kWh. Currency Unit This is the unit used for the currency that pays for electricity. Day of Month This is the day of the month (1-30) that the electricity meter is read (which will correspond to the electrical bill). Generate Usage/Cost Report These options define when an Energy Usage Report will be generated. Currently, these Only support the Output Duration calculation method. Time Span to Generate How often to automatically generate a usage/cost report. Day of Week/Month to Generate On which day of the week to generate the report. Daily: 1-7 (Monday = 1), Monthly: 1-28. Hour of Day to Generate On which hour of the day to generate the report (0-23). Controller Sample Rate Settings ~ Page: [Gear Icon] -> Configure -> General Each controller for Inputs, Outputs, and Functions operate periodically. The fastest these controllers can respond is determined by the sample rate of each. The looping function of each controller is paused for the specific duration. For instance, the Output controller can only have a resolution of 1 second if the sample rate is set to 1 second, meaning if you instruct an output to turn on or off, it will take a maximum of 1 second to respond to that request. Setting Description Max Amps Set the maximum allowed amperage to be switched on at any given time. If a output that's instructed to turn on will cause the sum of active devices to exceed this amount, the output will not be allowed to turn on, to prevent any damage that may result from exceeding current limits. Voltage Alternating current (AC) voltage that is switched by the outputs. This is usually 120 or 240. Cost per kWh This is how much you pay per kWh. Currency Unit This is the unit used for the currency that pays for electricity. Day of Month This is the day of the month (1-30) that the electricity meter is read (which will correspond to the electrical bill). Generate Usage/Cost Report These options define when an Energy Usage Report will be generated. Currently, these Only support the Output Duration calculation method. Input Settings ~ Page: [Gear Icon] -> Configure -> Custom Inputs Input modules may be imported and used within Mycodo. These modules must follow a specific format. See Custom Inputs for more details. Setting Description Import Input Module Select your input module file, then click this button to begin the import. Output Settings ~ Page: [Gear Icon] -> Configure -> Custom Outputs Output modules may be imported and used within Mycodo. These modules must follow a specific format. See Custom Outputs for more details. Setting Description Import Output Module Select your output module file, then click this button to begin the import. Function Settings ~ Page: [Gear Icon] -> Configure -> Custom Functions Function modules may be imported and used within Mycodo. These modules must follow a specific format. See Custom Functions for more details. Setting Description Import Function Module Select your function module file, then click this button to begin the import. Action Settings ~ Page: [Gear Icon] -> Configure -> Custom Actions Action modules may be imported and used within Mycodo. These modules must follow a specific format. See Custom Actions for more details. Setting Description Import Action Module Select your action module file, then click this button to begin the import. Widget Settings ~ Page: [Gear Icon] -> Configure -> Custom Widgets Widget modules may be imported and used within Mycodo. These modules must follow a specific format. See Custom Widgets for more details. Setting Description Import Widget Module Select your widget module file, then click this button to begin the import. Measurement Settings ~ Page: [Gear Icon] -> Configure -> Measurements New measurements, units, and conversions can be created that can extend functionality of Mycodo beyond the built-in types and equations. Be sure to create units before measurements, as units need to be selected when creating a measurement. A measurement can be created that already exists, allowing additional units to be added to a pre-existing measurement. For example, the measurement 'altitude' already exists, however if you wanted to add the unit 'fathom', first create the unit 'fathom', then create the measurement 'altitude' with the 'fathom' unit selected. It is okay to create a custom measurement for a measurement that already exist (this is how new units for a currently-installed measurement is added). Setting Description Measurement ID ID for the measurement to use in the measurements_dict of input modules (e.g. \"length\", \"width\", \"speed\"). Measurement Name Common name for the measurement (e.g. \"Length\", \"Weight\", \"Speed\"). Measurement Units Select all the units that are associated with the measurement. Unit ID ID for the unit to use in the measurements_dict of input modules (e.g. \"K\", \"g\", \"m\"). Unit Name Common name for the unit (e.g. \"Kilogram\", \"Meter\"). Unit Abbreviation Abbreviation for the unit (e.g. \"kg\", \"m\"). Convert From Unit The unit that will be converted from. Convert To Unit The unit that will be converted to. Equation The equation used to convert one unit to another. The lowercase letter \"x\" must be included in the equation (e.g. \"x/1000+20\", \"250*(x/3)\"). This \"x\" will be replaced with the actual measurement being converted. User Settings ~ Page: [Gear Icon] -> Configure -> Users Mycodo requires at least one Admin user for the login system to be enabled. If there isn't an Admin user, the web server will redirect to an Admin Creation Form. This is the first page you see when starting Mycodo for the first time. After an Admin user has been created, additional users may be created from the User Settings page. Setting Description Username Choose a user name that is between 2 and 64 characters. The user name is case insensitive (all user names are converted to lower-case). Email The email associated with the new account. Password/Repeat Choose a password that is between 6 and 64 characters and only contains letters, numbers, and symbols. Keypad Code Set an optional numeric code that is at least 4 digits for logging in using a keypad. Role Roles are a way of imposing access restrictions on users, to either allow or deny actions. See the table below for explanations of the four default Roles. Theme The web user interface theme to apply, including colors, themes, and other design elements. Roles ~ Roles define the permissions of each user. There are 4 default roles that determine if a user can view or edit particular areas of Mycodo. Four roles are provided by default, but custom roles may be created. Role Admin Editor Monitor Guest Edit Users X Edit Controllers X X Edit Settings X X View Settings X X X View Camera X X X View Stats X X X View Logs X X X The Edit Controllers permission protects the editing of Conditionals, Graphs, LCDs, Methods, PIDs, Outputs, and Inputs. The View Stats permission protects the viewing of usage statistics and the System Information and Energy Usage pages. Raspberry Pi Settings ~ Page: [Gear Icon] -> Configure -> Raspberry Pi Pi settings configure parts of the linux system that Mycodo runs on. pigpiod is required if you wish to use PWM Outputs, as well as PWM, RPM, DHT22, DHT11, HTU21D Inputs. Setting Description Enable/Disable Feature These are system interfaces that can be enabled and disabled from the web UI via the raspi-config command. pigpiod Sample Rate This is the sample rate the pigpiod service will operate at. The lower number enables faster PWM frequencies, but may significantly increase processor load on the Pi Zeros. pigpiod may als be disabled completely if it's not required (see note, above). Alert Settings ~ Page: [Gear Icon] -> Configure -> Alerts Alert settings set up the credentials for sending email notifications. Setting Description SMTP Host The SMTP server to use to send emails from. SMTP Port Port to communicate with the SMTP server (465 for SSL, 587 for TSL). Enable SSL Check to enable SSL, uncheck to enable TSL. SMTP User The user name to send the email from. This can be just a name or the entire email address. SMTP Password The password for the user. From Email What the from email address be set as. This should be the actual email address for this user. Max emails (per hour) Set the maximum number of emails that can be sent per hour. If more notifications are triggered within the hour and this number has been reached, the notifications will be discarded. Send Test Email Test the email configuration by sending a test email. Camera Settings ~ Page: [Gear Icon] -> Configure -> Camera Many cameras can be used simultaneously with Mycodo. Each camera needs to be set up in the camera settings, then may be used throughout the software. Note Not every option (such as Hue or White Balance) may be able to be used with your particular camera, due to manufacturer differences in hardware and software. Setting Description Type Select whether the camera is a Raspberry Pi Camera or a USB camera. Library Select which library to use to communicate with the camera. The Raspberry Pi Camera uses picamera, and USB cameras should be set to fswebcam. Device The device to use to connect to the camera. fswebcam is the only library that uses this option. Output This output will turn on during the capture of any still image (which includes timelapses). Output Duration Turn output on for this duration of time before the image is captured. Rotate Image The number of degrees to rotate the image. ... Image Width, Image Height, Brightness, Contrast, Exposure, Gain, Hue, Saturation, White Balance. These options are self-explanatory. Not all options will work with all cameras. Pre Command A command to execute (as user 'root') before a still image is captured. Post Command A command to execute (as user 'root') after a still image is captured. Flip horizontally Flip, or mirror, the image horizontally. Flip vertically Flip, or mirror, the image vertically. Diagnostic Settings ~ Page: [Gear Icon] -> Configure -> Diagnostics Sometimes issues arise in the system as a result of incompatible configurations, either the result of a misconfigured part of the system (Input, Output, etc.) or an update that didn't properly handle a database upgrade, or other unforeseen issue. Sometimes it is necessary to perform diagnostic actions that can determine the cause of the issue or fix the issue itself. The options below are meant to alleviate issues, such as a misconfigured dashboard element causing an error on the Data -> Dashboard page, which may cause an inability to access the Data -> Dashboard page to correct the issue. Deleting all Dashboard Elements may be the most economical method to enable access to the Data -> Dashboard page again, at the cost of having to readd all the Dashboard Elements that were once there. Setting Description Delete All Dashboards Delete all saved Dashboards on the Data - Dashboard page. Delete All Inputs Delete all Inputs on the Setup -> Input page. Delete all Note and Note Tags Delete all notes and tags from the More -> Note page. Delete all Outputs Delete all Outputs from the Setup -> Output page. Delete Settings Database Delete the mycodo.db settings database (WARNING: This will delete all settings and users). Delete File: .dependency Delete the .dependency file. If you are having an issue accessing the dependency install page, try this. Delete File: .upgrade Delete the .upgrade file. If you are having an issue accessing the upgrade page or running an upgrade, try this. Recreate Influxdb 1.x database Delete the InfluxDB 1.x measurement database, then recreate it. This deletes all measurement data! Recreate Influxdb 2.x database Delete the InfluxDB 2.x measurement database, then recreate it. This deletes all measurement data! Reset Email Counter Reset the email/hour email counter. Install Dependencies Start the dependency install script that will install all needed dependencies for the entire Mycodo system. Set to Upgrade to Master This will change FORCE_UPGRADE_MASTER to True in config.py. This is a way to instruct the upgrade system to upgrade to the master branch on GitHub without having to log in and manually edit the config.py file.","title":"System Configuration"},{"location":"Configuration-Settings/#general-settings","text":"Page: [Gear Icon] -> Configure -> General Setting Description Language Set the language that will be displayed in the web user interface. Force HTTPS Require web browsers to use SSL/HTTPS. Any request to http:// will be redirected to https:// . Hide success alerts Hide all success alert boxes that appear at the top of the page. Hide info alerts Hide all info alert boxes that appear at the top of the page. Hide warning alerts Hide all warning alert boxes that appear at the top of the page. Opt-out of statistics Turn off sending anonymous usage statistics. Please consider that this helps the development to leave on.","title":"General Settings"},{"location":"Configuration-Settings/#time-series-database-settings","text":"Page: [Gear Icon] -> Configure -> General Measurements are stored in a time-series database. There are currently two options that can be used with Mycodo, InfluxDB 1.x and InfluxDB 2.x. InfluxDB 1.x works on both 32-bit and 64-bit operating systems, but 2.x only works on 64-bit operating systems. Therefore, if you are using a 32-bit operating system, you will need to use InfluxDB 1.x. During the Mycodo install, you can select to install influxDB 1.x, 2.x, or neither. If you don't install InfluxDB, you will need to specify the host and credentials to an alternate install for Mycodo to be able to store and query measurements. If you are installing via Docker, you will need to change the hostname to \"mycodo_influxdb\" after the Mycodo install to be able to connect to the InfluxDB Docker container. Setting Description Database Select the influxdb version to use. Retention Policy Select the retention policy. Default is \"autogen\" for v1.x and \"infinite\" for v2.x. Hostname The hostname to connect to the time-series server. Default is \"localhost\". Port The time-series database port. Default is 8086. Database Name The name of the database (v1.x) or bucket (v2.x) for Mycodo to store to and query from. Default is \"mycodo_db\". Username The username to access the database (if credentials are required). Default is \"mycodo\". Password The password to access the database (if credentials are required).","title":"Time Series Database Settings"},{"location":"Configuration-Settings/#dashboard-settings","text":"Page: [Gear Icon] -> Configure -> General Setting Description Grid Cell Height (px) The height of each widget cell, in pixels.","title":"Dashboard Settings"},{"location":"Configuration-Settings/#upgrade-settings","text":"Page: [Gear Icon] -> Configure -> General Setting Description Internet Test IP Address The IP address to use to test for an active internet connection. Internet Test Port The port to use to test for an active internet connection. Internet Test Timeout The timeout period for testing for an active internet connection. Check for Updates Automatically check for updates every 2 days and notify through the web interface. If there is a new update, the Configure (Gear Icon) as well as the Upgrade menu will turn the color red.","title":"Upgrade Settings"},{"location":"Configuration-Settings/#energy-usage-settings","text":"Page: [Gear Icon] -> Configure -> General In order to calculate accurate energy usage statistics, a few characteristics of your electrical system needs to be know. These variables should describe the characteristics of the electrical system being used by the relays to operate electrical devices. Note If not using a current sensor, proper energy usage calculations will rely on the correct current draw to be set for each output (see Output Settings ). Setting Description Max Amps Set the maximum allowed amperage to be switched on at any given time. If a output that's instructed to turn on will cause the sum of active devices to exceed this amount, the output will not be allowed to turn on, to prevent any damage that may result from exceeding current limits. Voltage Alternating current (AC) voltage that is switched by the outputs. This is usually 120 or 240. Cost per kWh This is how much you pay per kWh. Currency Unit This is the unit used for the currency that pays for electricity. Day of Month This is the day of the month (1-30) that the electricity meter is read (which will correspond to the electrical bill). Generate Usage/Cost Report These options define when an Energy Usage Report will be generated. Currently, these Only support the Output Duration calculation method. Time Span to Generate How often to automatically generate a usage/cost report. Day of Week/Month to Generate On which day of the week to generate the report. Daily: 1-7 (Monday = 1), Monthly: 1-28. Hour of Day to Generate On which hour of the day to generate the report (0-23).","title":"Energy Usage Settings"},{"location":"Configuration-Settings/#controller-sample-rate-settings","text":"Page: [Gear Icon] -> Configure -> General Each controller for Inputs, Outputs, and Functions operate periodically. The fastest these controllers can respond is determined by the sample rate of each. The looping function of each controller is paused for the specific duration. For instance, the Output controller can only have a resolution of 1 second if the sample rate is set to 1 second, meaning if you instruct an output to turn on or off, it will take a maximum of 1 second to respond to that request. Setting Description Max Amps Set the maximum allowed amperage to be switched on at any given time. If a output that's instructed to turn on will cause the sum of active devices to exceed this amount, the output will not be allowed to turn on, to prevent any damage that may result from exceeding current limits. Voltage Alternating current (AC) voltage that is switched by the outputs. This is usually 120 or 240. Cost per kWh This is how much you pay per kWh. Currency Unit This is the unit used for the currency that pays for electricity. Day of Month This is the day of the month (1-30) that the electricity meter is read (which will correspond to the electrical bill). Generate Usage/Cost Report These options define when an Energy Usage Report will be generated. Currently, these Only support the Output Duration calculation method.","title":"Controller Sample Rate Settings"},{"location":"Configuration-Settings/#input-settings","text":"Page: [Gear Icon] -> Configure -> Custom Inputs Input modules may be imported and used within Mycodo. These modules must follow a specific format. See Custom Inputs for more details. Setting Description Import Input Module Select your input module file, then click this button to begin the import.","title":"Input Settings"},{"location":"Configuration-Settings/#output-settings","text":"Page: [Gear Icon] -> Configure -> Custom Outputs Output modules may be imported and used within Mycodo. These modules must follow a specific format. See Custom Outputs for more details. Setting Description Import Output Module Select your output module file, then click this button to begin the import.","title":"Output Settings"},{"location":"Configuration-Settings/#function-settings","text":"Page: [Gear Icon] -> Configure -> Custom Functions Function modules may be imported and used within Mycodo. These modules must follow a specific format. See Custom Functions for more details. Setting Description Import Function Module Select your function module file, then click this button to begin the import.","title":"Function Settings"},{"location":"Configuration-Settings/#action-settings","text":"Page: [Gear Icon] -> Configure -> Custom Actions Action modules may be imported and used within Mycodo. These modules must follow a specific format. See Custom Actions for more details. Setting Description Import Action Module Select your action module file, then click this button to begin the import.","title":"Action Settings"},{"location":"Configuration-Settings/#widget-settings","text":"Page: [Gear Icon] -> Configure -> Custom Widgets Widget modules may be imported and used within Mycodo. These modules must follow a specific format. See Custom Widgets for more details. Setting Description Import Widget Module Select your widget module file, then click this button to begin the import.","title":"Widget Settings"},{"location":"Configuration-Settings/#measurement-settings","text":"Page: [Gear Icon] -> Configure -> Measurements New measurements, units, and conversions can be created that can extend functionality of Mycodo beyond the built-in types and equations. Be sure to create units before measurements, as units need to be selected when creating a measurement. A measurement can be created that already exists, allowing additional units to be added to a pre-existing measurement. For example, the measurement 'altitude' already exists, however if you wanted to add the unit 'fathom', first create the unit 'fathom', then create the measurement 'altitude' with the 'fathom' unit selected. It is okay to create a custom measurement for a measurement that already exist (this is how new units for a currently-installed measurement is added). Setting Description Measurement ID ID for the measurement to use in the measurements_dict of input modules (e.g. \"length\", \"width\", \"speed\"). Measurement Name Common name for the measurement (e.g. \"Length\", \"Weight\", \"Speed\"). Measurement Units Select all the units that are associated with the measurement. Unit ID ID for the unit to use in the measurements_dict of input modules (e.g. \"K\", \"g\", \"m\"). Unit Name Common name for the unit (e.g. \"Kilogram\", \"Meter\"). Unit Abbreviation Abbreviation for the unit (e.g. \"kg\", \"m\"). Convert From Unit The unit that will be converted from. Convert To Unit The unit that will be converted to. Equation The equation used to convert one unit to another. The lowercase letter \"x\" must be included in the equation (e.g. \"x/1000+20\", \"250*(x/3)\"). This \"x\" will be replaced with the actual measurement being converted.","title":"Measurement Settings"},{"location":"Configuration-Settings/#user-settings","text":"Page: [Gear Icon] -> Configure -> Users Mycodo requires at least one Admin user for the login system to be enabled. If there isn't an Admin user, the web server will redirect to an Admin Creation Form. This is the first page you see when starting Mycodo for the first time. After an Admin user has been created, additional users may be created from the User Settings page. Setting Description Username Choose a user name that is between 2 and 64 characters. The user name is case insensitive (all user names are converted to lower-case). Email The email associated with the new account. Password/Repeat Choose a password that is between 6 and 64 characters and only contains letters, numbers, and symbols. Keypad Code Set an optional numeric code that is at least 4 digits for logging in using a keypad. Role Roles are a way of imposing access restrictions on users, to either allow or deny actions. See the table below for explanations of the four default Roles. Theme The web user interface theme to apply, including colors, themes, and other design elements.","title":"User Settings"},{"location":"Configuration-Settings/#roles","text":"Roles define the permissions of each user. There are 4 default roles that determine if a user can view or edit particular areas of Mycodo. Four roles are provided by default, but custom roles may be created. Role Admin Editor Monitor Guest Edit Users X Edit Controllers X X Edit Settings X X View Settings X X X View Camera X X X View Stats X X X View Logs X X X The Edit Controllers permission protects the editing of Conditionals, Graphs, LCDs, Methods, PIDs, Outputs, and Inputs. The View Stats permission protects the viewing of usage statistics and the System Information and Energy Usage pages.","title":"Roles"},{"location":"Configuration-Settings/#raspberry-pi-settings","text":"Page: [Gear Icon] -> Configure -> Raspberry Pi Pi settings configure parts of the linux system that Mycodo runs on. pigpiod is required if you wish to use PWM Outputs, as well as PWM, RPM, DHT22, DHT11, HTU21D Inputs. Setting Description Enable/Disable Feature These are system interfaces that can be enabled and disabled from the web UI via the raspi-config command. pigpiod Sample Rate This is the sample rate the pigpiod service will operate at. The lower number enables faster PWM frequencies, but may significantly increase processor load on the Pi Zeros. pigpiod may als be disabled completely if it's not required (see note, above).","title":"Raspberry Pi Settings"},{"location":"Configuration-Settings/#alert-settings","text":"Page: [Gear Icon] -> Configure -> Alerts Alert settings set up the credentials for sending email notifications. Setting Description SMTP Host The SMTP server to use to send emails from. SMTP Port Port to communicate with the SMTP server (465 for SSL, 587 for TSL). Enable SSL Check to enable SSL, uncheck to enable TSL. SMTP User The user name to send the email from. This can be just a name or the entire email address. SMTP Password The password for the user. From Email What the from email address be set as. This should be the actual email address for this user. Max emails (per hour) Set the maximum number of emails that can be sent per hour. If more notifications are triggered within the hour and this number has been reached, the notifications will be discarded. Send Test Email Test the email configuration by sending a test email.","title":"Alert Settings"},{"location":"Configuration-Settings/#camera-settings","text":"Page: [Gear Icon] -> Configure -> Camera Many cameras can be used simultaneously with Mycodo. Each camera needs to be set up in the camera settings, then may be used throughout the software. Note Not every option (such as Hue or White Balance) may be able to be used with your particular camera, due to manufacturer differences in hardware and software. Setting Description Type Select whether the camera is a Raspberry Pi Camera or a USB camera. Library Select which library to use to communicate with the camera. The Raspberry Pi Camera uses picamera, and USB cameras should be set to fswebcam. Device The device to use to connect to the camera. fswebcam is the only library that uses this option. Output This output will turn on during the capture of any still image (which includes timelapses). Output Duration Turn output on for this duration of time before the image is captured. Rotate Image The number of degrees to rotate the image. ... Image Width, Image Height, Brightness, Contrast, Exposure, Gain, Hue, Saturation, White Balance. These options are self-explanatory. Not all options will work with all cameras. Pre Command A command to execute (as user 'root') before a still image is captured. Post Command A command to execute (as user 'root') after a still image is captured. Flip horizontally Flip, or mirror, the image horizontally. Flip vertically Flip, or mirror, the image vertically.","title":"Camera Settings"},{"location":"Configuration-Settings/#diagnostic-settings","text":"Page: [Gear Icon] -> Configure -> Diagnostics Sometimes issues arise in the system as a result of incompatible configurations, either the result of a misconfigured part of the system (Input, Output, etc.) or an update that didn't properly handle a database upgrade, or other unforeseen issue. Sometimes it is necessary to perform diagnostic actions that can determine the cause of the issue or fix the issue itself. The options below are meant to alleviate issues, such as a misconfigured dashboard element causing an error on the Data -> Dashboard page, which may cause an inability to access the Data -> Dashboard page to correct the issue. Deleting all Dashboard Elements may be the most economical method to enable access to the Data -> Dashboard page again, at the cost of having to readd all the Dashboard Elements that were once there. Setting Description Delete All Dashboards Delete all saved Dashboards on the Data - Dashboard page. Delete All Inputs Delete all Inputs on the Setup -> Input page. Delete all Note and Note Tags Delete all notes and tags from the More -> Note page. Delete all Outputs Delete all Outputs from the Setup -> Output page. Delete Settings Database Delete the mycodo.db settings database (WARNING: This will delete all settings and users). Delete File: .dependency Delete the .dependency file. If you are having an issue accessing the dependency install page, try this. Delete File: .upgrade Delete the .upgrade file. If you are having an issue accessing the upgrade page or running an upgrade, try this. Recreate Influxdb 1.x database Delete the InfluxDB 1.x measurement database, then recreate it. This deletes all measurement data! Recreate Influxdb 2.x database Delete the InfluxDB 2.x measurement database, then recreate it. This deletes all measurement data! Reset Email Counter Reset the email/hour email counter. Install Dependencies Start the dependency install script that will install all needed dependencies for the entire Mycodo system. Set to Upgrade to Master This will change FORCE_UPGRADE_MASTER to True in config.py. This is a way to instruct the upgrade system to upgrade to the master branch on GitHub without having to log in and manually edit the config.py file.","title":"Diagnostic Settings"},{"location":"Data-Viewing.de/","text":"English Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Live Messungen ~ Page: Data -> Live Measurements Die Seite \"Live-Messungen\" ist die erste Seite, die ein Benutzer nach dem Einloggen in Mycodo sieht. Sie zeigt die aktuellen Messungen an, die von Eingangs- und Funktionscontrollern erfasst werden. Wenn auf der Seite \"Live\" nichts angezeigt wird, vergewissern Sie sich, dass ein Eingangs- oder Funktionsregler korrekt konfiguriert und aktiviert ist. Die Daten werden auf der Seite automatisch aus der Messdatenbank aktualisiert. Asynchrone Diagramme ~ Seite: Daten -> Asynchrone Diagramme Eine grafische Datenanzeige, die f\u00fcr die Anzeige von Datens\u00e4tzen \u00fcber relativ lange Zeitr\u00e4ume (Wochen/Monate/Jahre) n\u00fctzlich ist, deren Anzeige als Synchrondiagramm sehr daten- und prozessorintensiv sein k\u00f6nnte. W\u00e4hlen Sie einen Zeitraum aus, und die Daten werden aus dieser Zeitspanne geladen, sofern sie vorhanden sind. In der ersten Ansicht wird der gesamte ausgew\u00e4hlte Datensatz angezeigt. F\u00fcr jede Ansicht/Zoom werden 700 Datenpunkte geladen. Wenn mehr als 700 Datenpunkte f\u00fcr die ausgew\u00e4hlte Zeitspanne aufgezeichnet wurden, werden 700 Punkte aus einer Mittelung der Punkte in dieser Zeitspanne erstellt. Auf diese Weise k\u00f6nnen viel weniger Daten verwendet werden, um durch einen gro\u00dfen Datensatz zu navigieren. So k\u00f6nnen beispielsweise 4 Monate an Daten 10 Megabyte umfassen, wenn sie vollst\u00e4ndig heruntergeladen werden. Bei der Betrachtung einer 4-monatigen Zeitspanne ist es jedoch nicht m\u00f6glich, jeden Datenpunkt dieser 10 Megabyte zu sehen, und eine Aggregation der Punkte ist unvermeidlich. Beim asynchronen Laden von Daten laden Sie nur das herunter, was Sie sehen. Anstatt also bei jedem Laden des Diagramms 10 Megabyte herunterzuladen, werden nur ~50kb heruntergeladen, bis eine neue Vergr\u00f6\u00dferungsstufe ausgew\u00e4hlt wird, woraufhin nur weitere ~50kb heruntergeladen werden. Note Diagramme erfordern Messungen, daher muss mindestens ein Eingang/Ausgang/Funktion/etc. hinzugef\u00fcgt und aktiviert werden, um Daten anzuzeigen. Dashboard ~ Seite: Daten -> Dashboard Dank der zahlreichen Dashboard-Widgets kann das Dashboard sowohl zur Anzeige von Daten als auch zur Manipulation des Systems verwendet werden. Es k\u00f6nnen mehrere Dashboards erstellt und gesperrt werden, um eine \u00c4nderung der Anordnung zu verhindern. Widgets ~ Widgets sind Elemente auf dem Dashboard, die f\u00fcr verschiedene Zwecke verwendet werden k\u00f6nnen, z. B. zur Anzeige von Daten (Diagramme, Indikatoren, Messger\u00e4te usw.) oder zur Interaktion mit dem System (Manipulation von Ausg\u00e4ngen, \u00c4nderung des PWM-Tastverh\u00e4ltnisses, Abfrage oder \u00c4nderung einer Datenbank usw.). Widgets lassen sich durch Ziehen und Ablegen leicht neu anordnen und in der Gr\u00f6\u00dfe ver\u00e4ndern. Eine vollst\u00e4ndige Liste der unterst\u00fctzten Widgets finden Sie unter Unterst\u00fctzte Widgets . Benutzerdefinierte Widgets ~ In Mycodo gibt es ein System f\u00fcr den Import benutzerdefinierter Widgets, mit dem vom Benutzer erstellte Widgets im Mycodo-System verwendet werden k\u00f6nnen. Benutzerdefinierte Widgets k\u00f6nnen auf der Seite [Zahnradsymbol] -> Konfigurieren -> Benutzerdefinierte Widgets hochgeladen werden. Nach dem Import k\u00f6nnen sie auf der Seite \"Einstellungen -> Widgets\" verwendet werden. Wenn Sie ein funktionierendes Modul entwickeln, ziehen Sie bitte in Erw\u00e4gung, ein neues GitHub-Problem zu erstellen oder einen Pull-Request zu stellen, damit es in das integrierte Set aufgenommen werden kann. \u00d6ffnen Sie eines der integrierten Widget-Module im Verzeichnis Mycodo/mycodo/widgets , um Beispiele f\u00fcr die richtige Formatierung zu sehen. Es gibt auch Beispiele f\u00fcr benutzerdefinierte Widgets im Verzeichnis Mycodo/mycodo/widgets/examples . Die Erstellung eines benutzerdefinierten Widget-Moduls erfordert oft eine spezielle Platzierung und Ausf\u00fchrung von Javascript. Um dies zu ber\u00fccksichtigen, wurden in jedem Modul mehrere Variablen erstellt, die der folgenden kurzen Struktur der Dashboard-Seite folgen, die mit mehreren angezeigten Widgets erstellt w\u00fcrde. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.de/#live-messungen","text":"Page: Data -> Live Measurements Die Seite \"Live-Messungen\" ist die erste Seite, die ein Benutzer nach dem Einloggen in Mycodo sieht. Sie zeigt die aktuellen Messungen an, die von Eingangs- und Funktionscontrollern erfasst werden. Wenn auf der Seite \"Live\" nichts angezeigt wird, vergewissern Sie sich, dass ein Eingangs- oder Funktionsregler korrekt konfiguriert und aktiviert ist. Die Daten werden auf der Seite automatisch aus der Messdatenbank aktualisiert.","title":"Live Messungen"},{"location":"Data-Viewing.de/#asynchrone-diagramme","text":"Seite: Daten -> Asynchrone Diagramme Eine grafische Datenanzeige, die f\u00fcr die Anzeige von Datens\u00e4tzen \u00fcber relativ lange Zeitr\u00e4ume (Wochen/Monate/Jahre) n\u00fctzlich ist, deren Anzeige als Synchrondiagramm sehr daten- und prozessorintensiv sein k\u00f6nnte. W\u00e4hlen Sie einen Zeitraum aus, und die Daten werden aus dieser Zeitspanne geladen, sofern sie vorhanden sind. In der ersten Ansicht wird der gesamte ausgew\u00e4hlte Datensatz angezeigt. F\u00fcr jede Ansicht/Zoom werden 700 Datenpunkte geladen. Wenn mehr als 700 Datenpunkte f\u00fcr die ausgew\u00e4hlte Zeitspanne aufgezeichnet wurden, werden 700 Punkte aus einer Mittelung der Punkte in dieser Zeitspanne erstellt. Auf diese Weise k\u00f6nnen viel weniger Daten verwendet werden, um durch einen gro\u00dfen Datensatz zu navigieren. So k\u00f6nnen beispielsweise 4 Monate an Daten 10 Megabyte umfassen, wenn sie vollst\u00e4ndig heruntergeladen werden. Bei der Betrachtung einer 4-monatigen Zeitspanne ist es jedoch nicht m\u00f6glich, jeden Datenpunkt dieser 10 Megabyte zu sehen, und eine Aggregation der Punkte ist unvermeidlich. Beim asynchronen Laden von Daten laden Sie nur das herunter, was Sie sehen. Anstatt also bei jedem Laden des Diagramms 10 Megabyte herunterzuladen, werden nur ~50kb heruntergeladen, bis eine neue Vergr\u00f6\u00dferungsstufe ausgew\u00e4hlt wird, woraufhin nur weitere ~50kb heruntergeladen werden. Note Diagramme erfordern Messungen, daher muss mindestens ein Eingang/Ausgang/Funktion/etc. hinzugef\u00fcgt und aktiviert werden, um Daten anzuzeigen.","title":"Asynchrone Diagramme"},{"location":"Data-Viewing.de/#dashboard","text":"Seite: Daten -> Dashboard Dank der zahlreichen Dashboard-Widgets kann das Dashboard sowohl zur Anzeige von Daten als auch zur Manipulation des Systems verwendet werden. Es k\u00f6nnen mehrere Dashboards erstellt und gesperrt werden, um eine \u00c4nderung der Anordnung zu verhindern.","title":"Dashboard"},{"location":"Data-Viewing.de/#widgets","text":"Widgets sind Elemente auf dem Dashboard, die f\u00fcr verschiedene Zwecke verwendet werden k\u00f6nnen, z. B. zur Anzeige von Daten (Diagramme, Indikatoren, Messger\u00e4te usw.) oder zur Interaktion mit dem System (Manipulation von Ausg\u00e4ngen, \u00c4nderung des PWM-Tastverh\u00e4ltnisses, Abfrage oder \u00c4nderung einer Datenbank usw.). Widgets lassen sich durch Ziehen und Ablegen leicht neu anordnen und in der Gr\u00f6\u00dfe ver\u00e4ndern. Eine vollst\u00e4ndige Liste der unterst\u00fctzten Widgets finden Sie unter Unterst\u00fctzte Widgets .","title":"Widgets"},{"location":"Data-Viewing.de/#benutzerdefinierte-widgets","text":"In Mycodo gibt es ein System f\u00fcr den Import benutzerdefinierter Widgets, mit dem vom Benutzer erstellte Widgets im Mycodo-System verwendet werden k\u00f6nnen. Benutzerdefinierte Widgets k\u00f6nnen auf der Seite [Zahnradsymbol] -> Konfigurieren -> Benutzerdefinierte Widgets hochgeladen werden. Nach dem Import k\u00f6nnen sie auf der Seite \"Einstellungen -> Widgets\" verwendet werden. Wenn Sie ein funktionierendes Modul entwickeln, ziehen Sie bitte in Erw\u00e4gung, ein neues GitHub-Problem zu erstellen oder einen Pull-Request zu stellen, damit es in das integrierte Set aufgenommen werden kann. \u00d6ffnen Sie eines der integrierten Widget-Module im Verzeichnis Mycodo/mycodo/widgets , um Beispiele f\u00fcr die richtige Formatierung zu sehen. Es gibt auch Beispiele f\u00fcr benutzerdefinierte Widgets im Verzeichnis Mycodo/mycodo/widgets/examples . Die Erstellung eines benutzerdefinierten Widget-Moduls erfordert oft eine spezielle Platzierung und Ausf\u00fchrung von Javascript. Um dies zu ber\u00fccksichtigen, wurden in jedem Modul mehrere Variablen erstellt, die der folgenden kurzen Struktur der Dashboard-Seite folgen, die mit mehreren angezeigten Widgets erstellt w\u00fcrde. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Benutzerdefinierte Widgets"},{"location":"Data-Viewing.es/","text":"English Deutsche Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Valores en Vivo ~ Page: Data -> Live Measurements La p\u00e1gina Mediciones en vivo es la primera p\u00e1gina que ve un usuario despu\u00e9s de iniciar sesi\u00f3n en Mycodo. En ella se muestran las mediciones actuales que se est\u00e1n adquiriendo de los controladores de Entrada y Funci\u00f3n. Si no se muestra nada en la p\u00e1gina Live , aseg\u00farese de que un controlador de Entrada o Funci\u00f3n est\u00e1 configurado correctamente y activado. Los datos se actualizar\u00e1n autom\u00e1ticamente en la p\u00e1gina desde la base de datos de mediciones. As\u00edncrono ~ P\u00e1gina: Datos -> As\u00edncrono Una visualizaci\u00f3n gr\u00e1fica de datos que resulta \u00fatil para ver conjuntos de datos que abarcan periodos de tiempo relativamente largos (semanas/meses/a\u00f1os), cuya visualizaci\u00f3n en forma de gr\u00e1fico sincr\u00f3nico podr\u00eda requerir muchos datos y un gran n\u00famero de procesadores. Seleccione un periodo de tiempo y se cargar\u00e1n los datos de ese periodo, si existen. La primera vista ser\u00e1 de todo el conjunto de datos seleccionado. Para cada vista/zoom, se cargar\u00e1n 700 puntos de datos. Si hay m\u00e1s de 700 puntos de datos registrados para el lapso de tiempo seleccionado, se crear\u00e1n 700 puntos a partir de un promedio de los puntos de ese lapso de tiempo. Esto permite utilizar muchos menos datos para navegar por un conjunto de datos grande. Por ejemplo, 4 meses de datos pueden ser 10 megabytes si se descargan todos. Sin embargo, al visualizar un lapso de 4 meses, no es posible ver todos los puntos de datos de esos 10 megabytes, y la agregaci\u00f3n de puntos es inevitable. Con la carga as\u00edncrona de datos, s\u00f3lo se descarga lo que se ve. As\u00ed, en lugar de descargar 10 megabytes cada vez que se carga el gr\u00e1fico, s\u00f3lo se descargar\u00e1n ~50kb hasta que se seleccione un nuevo nivel de zoom, momento en el que s\u00f3lo se descargar\u00e1n otros ~50kb. Note Los gr\u00e1ficos requieren mediciones, por lo que es necesario a\u00f1adir y activar al menos una Entrada/Salida/Funci\u00f3n/etc. para poder mostrar los datos. Tablero ~ P\u00e1gina: Datos -> Tablero El cuadro de mandos puede utilizarse tanto para ver los datos como para manipular el sistema, gracias a los numerosos widgets del cuadro de mandos disponibles. Se pueden crear m\u00faltiples cuadros de mando, as\u00ed como bloquearlos para evitar que se modifique su disposici\u00f3n. Widgets ~ Los widgets son elementos del cuadro de mandos que tienen una serie de usos, como la visualizaci\u00f3n de datos (gr\u00e1ficos, indicadores, medidores, etc.) o la interacci\u00f3n con el sistema (manipular salidas, cambiar el ciclo de trabajo PWM, consultar o modificar una base de datos, etc.). Los widgets se pueden reorganizar y cambiar de tama\u00f1o f\u00e1cilmente arrastrando y soltando. Para obtener una lista completa de los widgets admitidos, consulte Widgets admitidos . Widgets personalizados ~ Existe un sistema de importaci\u00f3n de Widgets personalizados en Mycodo que permite utilizar Widgets creados por el usuario en el sistema Mycodo. Los widgets personalizados pueden cargarse en la p\u00e1gina [Icono del engranaje] -> Configurar -> Widgets personalizados . Una vez importados, estar\u00e1n disponibles para su uso en la p\u00e1gina Configuraci\u00f3n -> Widget . Si desarrollas un m\u00f3dulo que funcione, considera la posibilidad de crear una nueva incidencia en GitHub o una solicitud de extracci\u00f3n, y puede que se incluya en el conjunto incorporado. Abra cualquiera de los m\u00f3dulos de widgets incorporados ubicados en el directorio Mycodo/mycodo/widgets para ver ejemplos del formato adecuado. Tambi\u00e9n hay ejemplos de Widgets personalizados en el directorio Mycodo/mycodo/widgets/examples . La creaci\u00f3n de un m\u00f3dulo de widgets personalizados suele requerir una colocaci\u00f3n y ejecuci\u00f3n espec\u00edfica de Javascript. Se crearon varias variables en cada m\u00f3dulo para abordar esto, y siguen la siguiente estructura breve de la p\u00e1gina del tablero de instrumentos que se generar\u00eda con m\u00faltiples widgets que se muestran. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.es/#valores-en-vivo","text":"Page: Data -> Live Measurements La p\u00e1gina Mediciones en vivo es la primera p\u00e1gina que ve un usuario despu\u00e9s de iniciar sesi\u00f3n en Mycodo. En ella se muestran las mediciones actuales que se est\u00e1n adquiriendo de los controladores de Entrada y Funci\u00f3n. Si no se muestra nada en la p\u00e1gina Live , aseg\u00farese de que un controlador de Entrada o Funci\u00f3n est\u00e1 configurado correctamente y activado. Los datos se actualizar\u00e1n autom\u00e1ticamente en la p\u00e1gina desde la base de datos de mediciones.","title":"Valores en Vivo"},{"location":"Data-Viewing.es/#asincrono","text":"P\u00e1gina: Datos -> As\u00edncrono Una visualizaci\u00f3n gr\u00e1fica de datos que resulta \u00fatil para ver conjuntos de datos que abarcan periodos de tiempo relativamente largos (semanas/meses/a\u00f1os), cuya visualizaci\u00f3n en forma de gr\u00e1fico sincr\u00f3nico podr\u00eda requerir muchos datos y un gran n\u00famero de procesadores. Seleccione un periodo de tiempo y se cargar\u00e1n los datos de ese periodo, si existen. La primera vista ser\u00e1 de todo el conjunto de datos seleccionado. Para cada vista/zoom, se cargar\u00e1n 700 puntos de datos. Si hay m\u00e1s de 700 puntos de datos registrados para el lapso de tiempo seleccionado, se crear\u00e1n 700 puntos a partir de un promedio de los puntos de ese lapso de tiempo. Esto permite utilizar muchos menos datos para navegar por un conjunto de datos grande. Por ejemplo, 4 meses de datos pueden ser 10 megabytes si se descargan todos. Sin embargo, al visualizar un lapso de 4 meses, no es posible ver todos los puntos de datos de esos 10 megabytes, y la agregaci\u00f3n de puntos es inevitable. Con la carga as\u00edncrona de datos, s\u00f3lo se descarga lo que se ve. As\u00ed, en lugar de descargar 10 megabytes cada vez que se carga el gr\u00e1fico, s\u00f3lo se descargar\u00e1n ~50kb hasta que se seleccione un nuevo nivel de zoom, momento en el que s\u00f3lo se descargar\u00e1n otros ~50kb. Note Los gr\u00e1ficos requieren mediciones, por lo que es necesario a\u00f1adir y activar al menos una Entrada/Salida/Funci\u00f3n/etc. para poder mostrar los datos.","title":"As\u00edncrono"},{"location":"Data-Viewing.es/#tablero","text":"P\u00e1gina: Datos -> Tablero El cuadro de mandos puede utilizarse tanto para ver los datos como para manipular el sistema, gracias a los numerosos widgets del cuadro de mandos disponibles. Se pueden crear m\u00faltiples cuadros de mando, as\u00ed como bloquearlos para evitar que se modifique su disposici\u00f3n.","title":"Tablero"},{"location":"Data-Viewing.es/#widgets","text":"Los widgets son elementos del cuadro de mandos que tienen una serie de usos, como la visualizaci\u00f3n de datos (gr\u00e1ficos, indicadores, medidores, etc.) o la interacci\u00f3n con el sistema (manipular salidas, cambiar el ciclo de trabajo PWM, consultar o modificar una base de datos, etc.). Los widgets se pueden reorganizar y cambiar de tama\u00f1o f\u00e1cilmente arrastrando y soltando. Para obtener una lista completa de los widgets admitidos, consulte Widgets admitidos .","title":"Widgets"},{"location":"Data-Viewing.es/#widgets-personalizados","text":"Existe un sistema de importaci\u00f3n de Widgets personalizados en Mycodo que permite utilizar Widgets creados por el usuario en el sistema Mycodo. Los widgets personalizados pueden cargarse en la p\u00e1gina [Icono del engranaje] -> Configurar -> Widgets personalizados . Una vez importados, estar\u00e1n disponibles para su uso en la p\u00e1gina Configuraci\u00f3n -> Widget . Si desarrollas un m\u00f3dulo que funcione, considera la posibilidad de crear una nueva incidencia en GitHub o una solicitud de extracci\u00f3n, y puede que se incluya en el conjunto incorporado. Abra cualquiera de los m\u00f3dulos de widgets incorporados ubicados en el directorio Mycodo/mycodo/widgets para ver ejemplos del formato adecuado. Tambi\u00e9n hay ejemplos de Widgets personalizados en el directorio Mycodo/mycodo/widgets/examples . La creaci\u00f3n de un m\u00f3dulo de widgets personalizados suele requerir una colocaci\u00f3n y ejecuci\u00f3n espec\u00edfica de Javascript. Se crearon varias variables en cada m\u00f3dulo para abordar esto, y siguen la siguiente estructura breve de la p\u00e1gina del tablero de instrumentos que se generar\u00eda con m\u00faltiples widgets que se muestran. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Widgets personalizados"},{"location":"Data-Viewing.fr/","text":"English Deutsche Espa\u00f1ol Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mesures en direct ~ Page: Data -> Live Measurements La page Live Measurements est la premi\u00e8re page qu'un utilisateur voit apr\u00e8s s'\u00eatre connect\u00e9 \u00e0 Mycodo. Elle affiche les mesures actuelles acquises par les contr\u00f4leurs d'entr\u00e9e et de fonction. Si rien n'est affich\u00e9 sur la page Live , assurez-vous qu'un contr\u00f4leur d'entr\u00e9e ou de fonction est correctement configur\u00e9 et activ\u00e9. Les donn\u00e9es seront automatiquement mises \u00e0 jour sur la page \u00e0 partir de la base de donn\u00e9es des mesures. Graphique Asynchrone ~ Page: Les donn\u00e9es -> Graphique Asynchrone Un affichage graphique des donn\u00e9es qui est utile pour visualiser des ensembles de donn\u00e9es couvrant des p\u00e9riodes relativement longues (semaines/mois/ann\u00e9es), qui pourraient \u00eatre tr\u00e8s gourmands en donn\u00e9es et en processeur pour \u00eatre affich\u00e9s sous forme de graphique synchrone. S\u00e9lectionnez une p\u00e9riode de temps et les donn\u00e9es seront charg\u00e9es \u00e0 partir de cette p\u00e9riode, si elle existe. La premi\u00e8re vue sera celle de l'ensemble des donn\u00e9es s\u00e9lectionn\u00e9es. Pour chaque vue/zoom, 700 points de donn\u00e9es seront charg\u00e9s. S'il y a plus de 700 points de donn\u00e9es enregistr\u00e9s pour l'intervalle de temps s\u00e9lectionn\u00e9, 700 points seront cr\u00e9\u00e9s \u00e0 partir d'une moyenne des points de cet intervalle de temps. Cela permet d'utiliser beaucoup moins de donn\u00e9es pour naviguer dans un grand ensemble de donn\u00e9es. Par exemple, 4 mois de donn\u00e9es peuvent repr\u00e9senter 10 m\u00e9gaoctets si elles sont toutes t\u00e9l\u00e9charg\u00e9es. Cependant, lorsqu'on visualise une p\u00e9riode de 4 mois, il n'est pas possible de voir chaque point de donn\u00e9es de ces 10 m\u00e9gaoctets, et l'agr\u00e9gation des points est in\u00e9vitable. Avec le chargement asynchrone des donn\u00e9es, vous ne t\u00e9l\u00e9chargez que ce que vous voyez. Ainsi, au lieu de t\u00e9l\u00e9charger 10 m\u00e9gaoctets \u00e0 chaque chargement de graphique, seuls ~50kb seront t\u00e9l\u00e9charg\u00e9s jusqu'\u00e0 ce qu'un nouveau niveau de zoom soit s\u00e9lectionn\u00e9, auquel moment seulement ~50kb suppl\u00e9mentaires seront t\u00e9l\u00e9charg\u00e9s. Note Les graphiques n\u00e9cessitent des mesures, donc au moins une entr\u00e9e/sortie/fonction/etc. doit \u00eatre ajout\u00e9e et activ\u00e9e afin d'afficher les donn\u00e9es. Tableau de bord ~ Page: Les donn\u00e9es -> Tableau de bord Le tableau de bord peut \u00eatre utilis\u00e9 \u00e0 la fois pour visualiser les donn\u00e9es et pour manipuler le syst\u00e8me, gr\u00e2ce aux nombreux widgets de tableau de bord disponibles. Il est possible de cr\u00e9er plusieurs tableaux de bord et de les verrouiller pour emp\u00eacher toute modification de leur agencement. Widgets ~ Les widgets sont des \u00e9l\u00e9ments du tableau de bord qui ont un certain nombre d'utilisations, telles que l'affichage de donn\u00e9es (graphiques, indicateurs, jauges, etc.) ou l'interaction avec le syst\u00e8me (manipulation des sorties, modification du cycle de fonctionnement du PWM, interrogation ou modification d'une base de donn\u00e9es, etc.) Les widgets peuvent \u00eatre facilement r\u00e9organis\u00e9s et redimensionn\u00e9s par glisser-d\u00e9poser. Pour une liste compl\u00e8te des widgets pris en charge, voir Widgets pris en charge . Widgets personnalis\u00e9s ~ Il existe un syst\u00e8me d'importation de Widgets personnalis\u00e9s dans Mycodo qui permet aux Widgets cr\u00e9\u00e9s par les utilisateurs d'\u00eatre utilis\u00e9s dans le syst\u00e8me Mycodo. Les widgets personnalis\u00e9s peuvent \u00eatre t\u00e9l\u00e9charg\u00e9s sur la page [Ic\u00f4ne Gear] -> Configurer -> Widgets personnalis\u00e9s . Apr\u00e8s importation, ils seront disponibles pour \u00eatre utilis\u00e9s sur la page Setup -> Widget . Si vous d\u00e9veloppez un module fonctionnel, veuillez envisager de cr\u00e9er un nouveau probl\u00e8me GitHub ou une demande de retrait, et il pourra \u00eatre inclus dans l'ensemble int\u00e9gr\u00e9. Ouvrez l'un des modules Widget int\u00e9gr\u00e9s situ\u00e9s dans le r\u00e9pertoire Mycodo/mycodo/widgets pour voir des exemples de formatage appropri\u00e9. Il existe \u00e9galement des exemples de Widgets personnalis\u00e9s dans le r\u00e9pertoire Mycodo/mycodo/widgets/examples . La cr\u00e9ation d'un module de widgets personnalis\u00e9s n\u00e9cessite souvent un placement et une ex\u00e9cution sp\u00e9cifiques de Javascript. Plusieurs variables ont \u00e9t\u00e9 cr\u00e9\u00e9es dans chaque module pour y rem\u00e9dier, et suivent la br\u00e8ve structure suivante de la page du tableau de bord qui serait g\u00e9n\u00e9r\u00e9e avec l'affichage de plusieurs widgets. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.fr/#mesures-en-direct","text":"Page: Data -> Live Measurements La page Live Measurements est la premi\u00e8re page qu'un utilisateur voit apr\u00e8s s'\u00eatre connect\u00e9 \u00e0 Mycodo. Elle affiche les mesures actuelles acquises par les contr\u00f4leurs d'entr\u00e9e et de fonction. Si rien n'est affich\u00e9 sur la page Live , assurez-vous qu'un contr\u00f4leur d'entr\u00e9e ou de fonction est correctement configur\u00e9 et activ\u00e9. Les donn\u00e9es seront automatiquement mises \u00e0 jour sur la page \u00e0 partir de la base de donn\u00e9es des mesures.","title":"Mesures en direct"},{"location":"Data-Viewing.fr/#graphique-asynchrone","text":"Page: Les donn\u00e9es -> Graphique Asynchrone Un affichage graphique des donn\u00e9es qui est utile pour visualiser des ensembles de donn\u00e9es couvrant des p\u00e9riodes relativement longues (semaines/mois/ann\u00e9es), qui pourraient \u00eatre tr\u00e8s gourmands en donn\u00e9es et en processeur pour \u00eatre affich\u00e9s sous forme de graphique synchrone. S\u00e9lectionnez une p\u00e9riode de temps et les donn\u00e9es seront charg\u00e9es \u00e0 partir de cette p\u00e9riode, si elle existe. La premi\u00e8re vue sera celle de l'ensemble des donn\u00e9es s\u00e9lectionn\u00e9es. Pour chaque vue/zoom, 700 points de donn\u00e9es seront charg\u00e9s. S'il y a plus de 700 points de donn\u00e9es enregistr\u00e9s pour l'intervalle de temps s\u00e9lectionn\u00e9, 700 points seront cr\u00e9\u00e9s \u00e0 partir d'une moyenne des points de cet intervalle de temps. Cela permet d'utiliser beaucoup moins de donn\u00e9es pour naviguer dans un grand ensemble de donn\u00e9es. Par exemple, 4 mois de donn\u00e9es peuvent repr\u00e9senter 10 m\u00e9gaoctets si elles sont toutes t\u00e9l\u00e9charg\u00e9es. Cependant, lorsqu'on visualise une p\u00e9riode de 4 mois, il n'est pas possible de voir chaque point de donn\u00e9es de ces 10 m\u00e9gaoctets, et l'agr\u00e9gation des points est in\u00e9vitable. Avec le chargement asynchrone des donn\u00e9es, vous ne t\u00e9l\u00e9chargez que ce que vous voyez. Ainsi, au lieu de t\u00e9l\u00e9charger 10 m\u00e9gaoctets \u00e0 chaque chargement de graphique, seuls ~50kb seront t\u00e9l\u00e9charg\u00e9s jusqu'\u00e0 ce qu'un nouveau niveau de zoom soit s\u00e9lectionn\u00e9, auquel moment seulement ~50kb suppl\u00e9mentaires seront t\u00e9l\u00e9charg\u00e9s. Note Les graphiques n\u00e9cessitent des mesures, donc au moins une entr\u00e9e/sortie/fonction/etc. doit \u00eatre ajout\u00e9e et activ\u00e9e afin d'afficher les donn\u00e9es.","title":"Graphique Asynchrone"},{"location":"Data-Viewing.fr/#tableau-de-bord","text":"Page: Les donn\u00e9es -> Tableau de bord Le tableau de bord peut \u00eatre utilis\u00e9 \u00e0 la fois pour visualiser les donn\u00e9es et pour manipuler le syst\u00e8me, gr\u00e2ce aux nombreux widgets de tableau de bord disponibles. Il est possible de cr\u00e9er plusieurs tableaux de bord et de les verrouiller pour emp\u00eacher toute modification de leur agencement.","title":"Tableau de bord"},{"location":"Data-Viewing.fr/#widgets","text":"Les widgets sont des \u00e9l\u00e9ments du tableau de bord qui ont un certain nombre d'utilisations, telles que l'affichage de donn\u00e9es (graphiques, indicateurs, jauges, etc.) ou l'interaction avec le syst\u00e8me (manipulation des sorties, modification du cycle de fonctionnement du PWM, interrogation ou modification d'une base de donn\u00e9es, etc.) Les widgets peuvent \u00eatre facilement r\u00e9organis\u00e9s et redimensionn\u00e9s par glisser-d\u00e9poser. Pour une liste compl\u00e8te des widgets pris en charge, voir Widgets pris en charge .","title":"Widgets"},{"location":"Data-Viewing.fr/#widgets-personnalises","text":"Il existe un syst\u00e8me d'importation de Widgets personnalis\u00e9s dans Mycodo qui permet aux Widgets cr\u00e9\u00e9s par les utilisateurs d'\u00eatre utilis\u00e9s dans le syst\u00e8me Mycodo. Les widgets personnalis\u00e9s peuvent \u00eatre t\u00e9l\u00e9charg\u00e9s sur la page [Ic\u00f4ne Gear] -> Configurer -> Widgets personnalis\u00e9s . Apr\u00e8s importation, ils seront disponibles pour \u00eatre utilis\u00e9s sur la page Setup -> Widget . Si vous d\u00e9veloppez un module fonctionnel, veuillez envisager de cr\u00e9er un nouveau probl\u00e8me GitHub ou une demande de retrait, et il pourra \u00eatre inclus dans l'ensemble int\u00e9gr\u00e9. Ouvrez l'un des modules Widget int\u00e9gr\u00e9s situ\u00e9s dans le r\u00e9pertoire Mycodo/mycodo/widgets pour voir des exemples de formatage appropri\u00e9. Il existe \u00e9galement des exemples de Widgets personnalis\u00e9s dans le r\u00e9pertoire Mycodo/mycodo/widgets/examples . La cr\u00e9ation d'un module de widgets personnalis\u00e9s n\u00e9cessite souvent un placement et une ex\u00e9cution sp\u00e9cifiques de Javascript. Plusieurs variables ont \u00e9t\u00e9 cr\u00e9\u00e9es dans chaque module pour y rem\u00e9dier, et suivent la br\u00e8ve structure suivante de la page du tableau de bord qui serait g\u00e9n\u00e9r\u00e9e avec l'affichage de plusieurs widgets. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Widgets personnalis\u00e9s"},{"location":"Data-Viewing.id/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Live Measurements ~ Page: Data -> Live Measurements Halaman Pengukuran Langsung adalah halaman pertama yang dilihat pengguna setelah masuk ke Mycodo. Ini akan menampilkan pengukuran saat ini yang diperoleh dari pengontrol Input dan Fungsi. Jika tidak ada yang ditampilkan pada halaman Live , pastikan pengontrol Input atau Fungsi dikonfigurasi dengan benar dan diaktifkan. Data akan secara otomatis diperbarui pada halaman dari database pengukuran. Asynchronous Graphs ~ Page: data -> Asynchronous Graphs Tampilan data grafis yang berguna untuk melihat kumpulan data yang mencakup periode waktu yang relatif lama (minggu/bulan/tahun), yang bisa jadi sangat intensif data dan prosesor untuk dilihat sebagai Grafik Sinkron. Pilih kerangka waktu dan data akan dimuat dari rentang waktu tersebut, jika ada. Tampilan pertama adalah seluruh kumpulan data yang dipilih. Untuk setiap tampilan/zoom, 700 titik data akan dimuat. Jika terdapat lebih dari 700 titik data yang direkam untuk rentang waktu yang dipilih, 700 titik akan dibuat dari rata-rata titik dalam rentang waktu tersebut. Hal ini memungkinkan data yang jauh lebih sedikit digunakan untuk menavigasi kumpulan data yang besar. Misalnya, data 4 bulan mungkin 10 megabyte jika semuanya diunduh. Namun, ketika melihat rentang waktu 4 bulan, tidak mungkin untuk melihat setiap titik data dari 10 megabyte itu, dan pengumpulan titik-titik tidak dapat dihindari. Dengan pemuatan data secara asinkron, Anda hanya mengunduh apa yang Anda lihat. Jadi, alih-alih mengunduh 10 megabyte setiap pemuatan grafik, hanya ~50kb yang akan diunduh hingga tingkat zoom baru dipilih, dan pada saat itu hanya ~50kb lagi yang diunduh. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data. Dasbor ~ Page: data -> Dasbor Dasbor dapat digunakan untuk melihat data dan memanipulasi sistem, berkat banyaknya widget dasbor yang tersedia. Beberapa dasbor dapat dibuat serta dikunci untuk mencegah perubahan pengaturan. Widgets ~ Widget adalah elemen pada Dasbor yang memiliki sejumlah kegunaan, seperti melihat data (grafik, indikator, pengukur, dll.) atau berinteraksi dengan sistem (memanipulasi output, mengubah siklus tugas PWM, menanyakan atau memodifikasi database, dll.). Widget dapat dengan mudah diatur ulang dan diubah ukurannya dengan menyeret dan menjatuhkan. Untuk daftar lengkap Widget yang didukung, lihat Supported Widgets . Custom Widgets ~ There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.id/#live-measurements","text":"Page: Data -> Live Measurements Halaman Pengukuran Langsung adalah halaman pertama yang dilihat pengguna setelah masuk ke Mycodo. Ini akan menampilkan pengukuran saat ini yang diperoleh dari pengontrol Input dan Fungsi. Jika tidak ada yang ditampilkan pada halaman Live , pastikan pengontrol Input atau Fungsi dikonfigurasi dengan benar dan diaktifkan. Data akan secara otomatis diperbarui pada halaman dari database pengukuran.","title":"Live Measurements"},{"location":"Data-Viewing.id/#asynchronous-graphs","text":"Page: data -> Asynchronous Graphs Tampilan data grafis yang berguna untuk melihat kumpulan data yang mencakup periode waktu yang relatif lama (minggu/bulan/tahun), yang bisa jadi sangat intensif data dan prosesor untuk dilihat sebagai Grafik Sinkron. Pilih kerangka waktu dan data akan dimuat dari rentang waktu tersebut, jika ada. Tampilan pertama adalah seluruh kumpulan data yang dipilih. Untuk setiap tampilan/zoom, 700 titik data akan dimuat. Jika terdapat lebih dari 700 titik data yang direkam untuk rentang waktu yang dipilih, 700 titik akan dibuat dari rata-rata titik dalam rentang waktu tersebut. Hal ini memungkinkan data yang jauh lebih sedikit digunakan untuk menavigasi kumpulan data yang besar. Misalnya, data 4 bulan mungkin 10 megabyte jika semuanya diunduh. Namun, ketika melihat rentang waktu 4 bulan, tidak mungkin untuk melihat setiap titik data dari 10 megabyte itu, dan pengumpulan titik-titik tidak dapat dihindari. Dengan pemuatan data secara asinkron, Anda hanya mengunduh apa yang Anda lihat. Jadi, alih-alih mengunduh 10 megabyte setiap pemuatan grafik, hanya ~50kb yang akan diunduh hingga tingkat zoom baru dipilih, dan pada saat itu hanya ~50kb lagi yang diunduh. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data.","title":"Asynchronous Graphs"},{"location":"Data-Viewing.id/#dasbor","text":"Page: data -> Dasbor Dasbor dapat digunakan untuk melihat data dan memanipulasi sistem, berkat banyaknya widget dasbor yang tersedia. Beberapa dasbor dapat dibuat serta dikunci untuk mencegah perubahan pengaturan.","title":"Dasbor"},{"location":"Data-Viewing.id/#widgets","text":"Widget adalah elemen pada Dasbor yang memiliki sejumlah kegunaan, seperti melihat data (grafik, indikator, pengukur, dll.) atau berinteraksi dengan sistem (memanipulasi output, mengubah siklus tugas PWM, menanyakan atau memodifikasi database, dll.). Widget dapat dengan mudah diatur ulang dan diubah ukurannya dengan menyeret dan menjatuhkan. Untuk daftar lengkap Widget yang didukung, lihat Supported Widgets .","title":"Widgets"},{"location":"Data-Viewing.id/#custom-widgets","text":"There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Custom Widgets"},{"location":"Data-Viewing.it/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Misure dal vivo ~ Page: Data -> Live Measurements La pagina Misure in tempo reale \u00e8 la prima pagina che l'utente vede dopo aver effettuato l'accesso a Mycodo. Mostra le misure correnti acquisite dai controllori di ingresso e di funzione. Se non viene visualizzato nulla nella pagina Live , accertarsi che un controllore di ingresso o di funzione sia configurato correttamente e attivato. I dati saranno aggiornati automaticamente sulla pagina dal database delle misure. Grafici asincroni ~ Pagina: Dati -> Grafici asincroni Una visualizzazione grafica dei dati utile per visualizzare insiemi di dati che coprono periodi di tempo relativamente lunghi (settimane/mesi/anni), che potrebbero essere molto impegnativi in termini di dati e di processore se visualizzati come grafico sincrono. Selezionando un intervallo di tempo, i dati verranno caricati da quell'intervallo, se esistente. La prima visualizzazione sar\u00e0 quella dell'intero set di dati selezionato. Per ogni vista/zoom, verranno caricati 700 punti di dati. Se sono stati registrati pi\u00f9 di 700 punti di dati per l'intervallo di tempo selezionato, verranno creati 700 punti da una media dei punti di quell'intervallo di tempo. In questo modo \u00e8 possibile utilizzare una quantit\u00e0 di dati molto inferiore per navigare in un set di dati di grandi dimensioni. Ad esempio, 4 mesi di dati potrebbero essere 10 megabyte se venissero scaricati tutti. Tuttavia, quando si visualizza un arco di tempo di 4 mesi, non \u00e8 possibile vedere tutti i punti dati di quei 10 megabyte e l'aggregazione dei punti \u00e8 inevitabile. Con il caricamento asincrono dei dati, si scarica solo ci\u00f2 che si vede. Quindi, invece di scaricare 10 megabyte a ogni caricamento del grafico, verranno scaricati solo ~50kb fino a quando non viene selezionato un nuovo livello di zoom, a quel punto verranno scaricati solo altri ~50kb. Note I grafici richiedono misurazioni, pertanto \u00e8 necessario aggiungere e attivare almeno un ingresso/uscita/funzione/ecc. per poter visualizzare i dati. Cruscotto ~ Pagina: Dati -> Cruscotto Il cruscotto pu\u00f2 essere utilizzato sia per visualizzare i dati che per manipolare il sistema, grazie ai numerosi widget disponibili. \u00c8 possibile creare pi\u00f9 cruscotti e bloccarli per evitare di modificarne la disposizione. Widget ~ I widget sono elementi della Dashboard che possono essere utilizzati in vari modi, ad esempio per visualizzare i dati (grafici, indicatori, ecc.) o per interagire con il sistema (manipolare le uscite, modificare il ciclo di lavoro PWM, interrogare o modificare un database, ecc.) I widget possono essere facilmente riorganizzati e ridimensionati trascinandoli. Per un elenco completo dei widget supportati, vedere Widget supportati . Widget personalizzati ~ In Mycodo esiste un sistema di importazione di Widget personalizzati che consente di utilizzare nel sistema Mycodo i Widget creati dagli utenti. I widget personalizzati possono essere caricati nella pagina [Icona ingranaggio] -> Configura -> Widget personalizzati . Dopo l'importazione, saranno disponibili per l'uso nella pagina Impostazione -> Widget . Se sviluppate un modulo funzionante, prendete in considerazione la possibilit\u00e0 di creare un nuovo problema su GitHub o una richiesta di pull, in modo da includerlo nel set integrato. Aprire uno qualsiasi dei moduli Widget incorporati che si trovano nella directory Mycodo/mycodo/widgets per avere esempi di formattazione corretta. Ci sono anche esempi di widget personalizzati nella directory Mycodo/mycodo/widgets/examples . La creazione di un modulo di widget personalizzato richiede spesso un posizionamento e un'esecuzione specifici di Javascript. Per questo motivo, in ogni modulo sono state create diverse variabili, che seguono la seguente breve struttura della pagina del dashboard che verrebbe generata con la visualizzazione di pi\u00f9 widget. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.it/#misure-dal-vivo","text":"Page: Data -> Live Measurements La pagina Misure in tempo reale \u00e8 la prima pagina che l'utente vede dopo aver effettuato l'accesso a Mycodo. Mostra le misure correnti acquisite dai controllori di ingresso e di funzione. Se non viene visualizzato nulla nella pagina Live , accertarsi che un controllore di ingresso o di funzione sia configurato correttamente e attivato. I dati saranno aggiornati automaticamente sulla pagina dal database delle misure.","title":"Misure dal vivo"},{"location":"Data-Viewing.it/#grafici-asincroni","text":"Pagina: Dati -> Grafici asincroni Una visualizzazione grafica dei dati utile per visualizzare insiemi di dati che coprono periodi di tempo relativamente lunghi (settimane/mesi/anni), che potrebbero essere molto impegnativi in termini di dati e di processore se visualizzati come grafico sincrono. Selezionando un intervallo di tempo, i dati verranno caricati da quell'intervallo, se esistente. La prima visualizzazione sar\u00e0 quella dell'intero set di dati selezionato. Per ogni vista/zoom, verranno caricati 700 punti di dati. Se sono stati registrati pi\u00f9 di 700 punti di dati per l'intervallo di tempo selezionato, verranno creati 700 punti da una media dei punti di quell'intervallo di tempo. In questo modo \u00e8 possibile utilizzare una quantit\u00e0 di dati molto inferiore per navigare in un set di dati di grandi dimensioni. Ad esempio, 4 mesi di dati potrebbero essere 10 megabyte se venissero scaricati tutti. Tuttavia, quando si visualizza un arco di tempo di 4 mesi, non \u00e8 possibile vedere tutti i punti dati di quei 10 megabyte e l'aggregazione dei punti \u00e8 inevitabile. Con il caricamento asincrono dei dati, si scarica solo ci\u00f2 che si vede. Quindi, invece di scaricare 10 megabyte a ogni caricamento del grafico, verranno scaricati solo ~50kb fino a quando non viene selezionato un nuovo livello di zoom, a quel punto verranno scaricati solo altri ~50kb. Note I grafici richiedono misurazioni, pertanto \u00e8 necessario aggiungere e attivare almeno un ingresso/uscita/funzione/ecc. per poter visualizzare i dati.","title":"Grafici asincroni"},{"location":"Data-Viewing.it/#cruscotto","text":"Pagina: Dati -> Cruscotto Il cruscotto pu\u00f2 essere utilizzato sia per visualizzare i dati che per manipolare il sistema, grazie ai numerosi widget disponibili. \u00c8 possibile creare pi\u00f9 cruscotti e bloccarli per evitare di modificarne la disposizione.","title":"Cruscotto"},{"location":"Data-Viewing.it/#widget","text":"I widget sono elementi della Dashboard che possono essere utilizzati in vari modi, ad esempio per visualizzare i dati (grafici, indicatori, ecc.) o per interagire con il sistema (manipolare le uscite, modificare il ciclo di lavoro PWM, interrogare o modificare un database, ecc.) I widget possono essere facilmente riorganizzati e ridimensionati trascinandoli. Per un elenco completo dei widget supportati, vedere Widget supportati .","title":"Widget"},{"location":"Data-Viewing.it/#widget-personalizzati","text":"In Mycodo esiste un sistema di importazione di Widget personalizzati che consente di utilizzare nel sistema Mycodo i Widget creati dagli utenti. I widget personalizzati possono essere caricati nella pagina [Icona ingranaggio] -> Configura -> Widget personalizzati . Dopo l'importazione, saranno disponibili per l'uso nella pagina Impostazione -> Widget . Se sviluppate un modulo funzionante, prendete in considerazione la possibilit\u00e0 di creare un nuovo problema su GitHub o una richiesta di pull, in modo da includerlo nel set integrato. Aprire uno qualsiasi dei moduli Widget incorporati che si trovano nella directory Mycodo/mycodo/widgets per avere esempi di formattazione corretta. Ci sono anche esempi di widget personalizzati nella directory Mycodo/mycodo/widgets/examples . La creazione di un modulo di widget personalizzato richiede spesso un posizionamento e un'esecuzione specifici di Javascript. Per questo motivo, in ogni modulo sono state create diverse variabili, che seguono la seguente breve struttura della pagina del dashboard che verrebbe generata con la visualizzazione di pi\u00f9 widget. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Widget personalizzati"},{"location":"Data-Viewing/","text":"Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Live Measurements ~ Page: Data -> Live Measurements The Live Measurements page is the first page a user sees after logging in to Mycodo. It will display the current measurements being acquired from Input and Function controllers. If there is nothing displayed on the Live page, ensure an Input or Function controller is both configured correctly and activated. Data will be automatically updated on the page from the measurement database. Asynchronous Graphs ~ Page: Data -> Asynchronous Graphs A graphical data display that is useful for viewing data sets spanning relatively long periods of time (weeks/months/years), which could be very data- and processor-intensive to view as a Synchronous Graph. Select a time frame and data will be loaded from that time span, if it exists. The first view will be of the entire selected data set. For every view/zoom, 700 data points will be loaded. If there are more than 700 data points recorded for the time span selected, 700 points will be created from an averaging of the points in that time span. This enables much less data to be used to navigate a large data set. For instance, 4 months of data may be 10 megabytes if all of it were downloaded. However, when viewing a 4 month span, it's not possible to see every data point of that 10 megabytes, and aggregating of points is inevitable. With asynchronous loading of data, you only download what you see. So, instead of downloading 10 megabytes every graph load, only ~50kb will be downloaded until a new zoom level is selected, at which time only another ~50kb is downloaded. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data. Dashboard ~ Page: Data -> Dashboard The dashboard can be used for both viewing data and manipulating the system, thanks to the numerous dashboard widgets available. Multiple dashboards can be created as well as locked to prevent changing the arrangement. Widgets ~ Widgets are elements on the Dashboard that have a number of uses, such as viewing data (charts, indicators, gauges, etc.) or interacting with the system (manipulate outputs, change PWM duty cycle, querying or modifying a database, etc.). Widgets can be easily rearranged and resized by dragging and dropping. For a full list of supported Widgets, see Supported Widgets . Custom Widgets ~ There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing/#live-measurements","text":"Page: Data -> Live Measurements The Live Measurements page is the first page a user sees after logging in to Mycodo. It will display the current measurements being acquired from Input and Function controllers. If there is nothing displayed on the Live page, ensure an Input or Function controller is both configured correctly and activated. Data will be automatically updated on the page from the measurement database.","title":"Live Measurements"},{"location":"Data-Viewing/#asynchronous-graphs","text":"Page: Data -> Asynchronous Graphs A graphical data display that is useful for viewing data sets spanning relatively long periods of time (weeks/months/years), which could be very data- and processor-intensive to view as a Synchronous Graph. Select a time frame and data will be loaded from that time span, if it exists. The first view will be of the entire selected data set. For every view/zoom, 700 data points will be loaded. If there are more than 700 data points recorded for the time span selected, 700 points will be created from an averaging of the points in that time span. This enables much less data to be used to navigate a large data set. For instance, 4 months of data may be 10 megabytes if all of it were downloaded. However, when viewing a 4 month span, it's not possible to see every data point of that 10 megabytes, and aggregating of points is inevitable. With asynchronous loading of data, you only download what you see. So, instead of downloading 10 megabytes every graph load, only ~50kb will be downloaded until a new zoom level is selected, at which time only another ~50kb is downloaded. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data.","title":"Asynchronous Graphs"},{"location":"Data-Viewing/#dashboard","text":"Page: Data -> Dashboard The dashboard can be used for both viewing data and manipulating the system, thanks to the numerous dashboard widgets available. Multiple dashboards can be created as well as locked to prevent changing the arrangement.","title":"Dashboard"},{"location":"Data-Viewing/#widgets","text":"Widgets are elements on the Dashboard that have a number of uses, such as viewing data (charts, indicators, gauges, etc.) or interacting with the system (manipulate outputs, change PWM duty cycle, querying or modifying a database, etc.). Widgets can be easily rearranged and resized by dragging and dropping. For a full list of supported Widgets, see Supported Widgets .","title":"Widgets"},{"location":"Data-Viewing/#custom-widgets","text":"There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Custom Widgets"},{"location":"Data-Viewing.nl/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Live metingen ~ Page: Data -> Live Measurements De Live Measurements pagina is de eerste pagina die een gebruiker ziet na het inloggen op Mycodo. Het toont de huidige metingen die worden verkregen van ingangs- en functiecontrollers. Als er niets wordt weergegeven op de Live -pagina, zorg er dan voor dat een ingangs- of functiecontroller correct is geconfigureerd en geactiveerd. Gegevens worden automatisch bijgewerkt op de pagina vanuit de meetdatabase. Asynchroon ~ Pagina: Gegevens -> Asynchroon Een grafische weergave van gegevens die nuttig is voor het bekijken van gegevensreeksen over relatief lange perioden (weken/maanden/jaren), die zeer gegevens- en processorintensief zouden kunnen zijn om te bekijken als een synchrone grafiek. Selecteer een tijdspanne en de gegevens worden geladen van die tijdspanne, als die bestaat. De eerste weergave betreft de gehele geselecteerde gegevensreeks. Voor elke weergave/zoom worden 700 datapunten geladen. Als er meer dan 700 datapunten zijn opgenomen voor de geselecteerde tijdspanne, worden 700 punten gecre\u00eberd uit een gemiddelde van de punten in die tijdspanne. Hierdoor kunnen veel minder gegevens worden gebruikt om door een grote dataset te navigeren. Bijvoorbeeld, 4 maanden gegevens kunnen 10 megabytes zijn als ze allemaal werden gedownload. Bij het bekijken van een periode van 4 maanden is het echter niet mogelijk elk gegevenspunt van die 10 megabyte te zien, en is het samenvoegen van punten onvermijdelijk. Met asynchroon laden van gegevens downloadt u alleen wat u ziet. Dus in plaats van 10 megabyte te downloaden bij elke grafieklading, wordt slechts ~50kb gedownload tot een nieuw zoomniveau wordt geselecteerd, waarna nog eens ~50kb wordt gedownload. Note Grafieken vereisen metingen, daarom moet ten minste \u00e9\u00e9n ingang/uitgang/functie/etc. worden toegevoegd en geactiveerd om gegevens weer te geven. Dashboard ~ Pagina: Gegevens -> Dashboard Het dashboard kan zowel worden gebruikt om gegevens te bekijken als om het systeem te manipuleren, dankzij de talrijke beschikbare dashboardwidgets. Er kunnen meerdere dashboards worden aangemaakt en vergrendeld om de indeling niet te wijzigen. Widgets ~ Widgets zijn elementen op het Dashboard die een aantal toepassingen hebben, zoals het bekijken van gegevens (grafieken, indicatoren, meters, enz.) of interactie met het systeem (uitgangen manipuleren, PWM duty cycle wijzigen, een database opvragen of wijzigen, enz.) Widgets kunnen gemakkelijk worden herschikt en van grootte veranderd door ze te verslepen. Voor een volledige lijst van ondersteunde Widgets, zie Ondersteunde Widgets . Aangepaste Widgets ~ Er is een systeem voor het importeren van aangepaste Widgets in Mycodo waarmee door gebruikers gemaakte Widgets in het Mycodo-systeem kunnen worden gebruikt. Aangepaste Widgets kunnen worden ge\u00fcpload op de pagina [Versnellingspictogram] -> Configuratie -> Aangepaste Widgets . Na het importeren zijn ze beschikbaar voor gebruik op de pagina Instellen -> Widget . Als je een werkende module ontwikkelt, overweeg dan een nieuw GitHub issue aanmaken of een pull request, en het kan worden opgenomen in de ingebouwde set. Open een van de ingebouwde Widget-modules in de directory Mycodo/mycodo/widgets voor voorbeelden van de juiste opmaak. Er zijn ook voorbeelden van aangepaste Widgets in de map Mycodo/mycodo/widgets/voorbeelden . Het maken van een aangepaste widgetmodule vereist vaak specifieke plaatsing en uitvoering van Javascript. In elke module werden verschillende variabelen gemaakt om dit aan te pakken, en de volgende korte structuur te volgen van de dashboardpagina die zou worden gegenereerd met meerdere widgets die worden weergegeven. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.nl/#live-metingen","text":"Page: Data -> Live Measurements De Live Measurements pagina is de eerste pagina die een gebruiker ziet na het inloggen op Mycodo. Het toont de huidige metingen die worden verkregen van ingangs- en functiecontrollers. Als er niets wordt weergegeven op de Live -pagina, zorg er dan voor dat een ingangs- of functiecontroller correct is geconfigureerd en geactiveerd. Gegevens worden automatisch bijgewerkt op de pagina vanuit de meetdatabase.","title":"Live metingen"},{"location":"Data-Viewing.nl/#asynchroon","text":"Pagina: Gegevens -> Asynchroon Een grafische weergave van gegevens die nuttig is voor het bekijken van gegevensreeksen over relatief lange perioden (weken/maanden/jaren), die zeer gegevens- en processorintensief zouden kunnen zijn om te bekijken als een synchrone grafiek. Selecteer een tijdspanne en de gegevens worden geladen van die tijdspanne, als die bestaat. De eerste weergave betreft de gehele geselecteerde gegevensreeks. Voor elke weergave/zoom worden 700 datapunten geladen. Als er meer dan 700 datapunten zijn opgenomen voor de geselecteerde tijdspanne, worden 700 punten gecre\u00eberd uit een gemiddelde van de punten in die tijdspanne. Hierdoor kunnen veel minder gegevens worden gebruikt om door een grote dataset te navigeren. Bijvoorbeeld, 4 maanden gegevens kunnen 10 megabytes zijn als ze allemaal werden gedownload. Bij het bekijken van een periode van 4 maanden is het echter niet mogelijk elk gegevenspunt van die 10 megabyte te zien, en is het samenvoegen van punten onvermijdelijk. Met asynchroon laden van gegevens downloadt u alleen wat u ziet. Dus in plaats van 10 megabyte te downloaden bij elke grafieklading, wordt slechts ~50kb gedownload tot een nieuw zoomniveau wordt geselecteerd, waarna nog eens ~50kb wordt gedownload. Note Grafieken vereisen metingen, daarom moet ten minste \u00e9\u00e9n ingang/uitgang/functie/etc. worden toegevoegd en geactiveerd om gegevens weer te geven.","title":"Asynchroon"},{"location":"Data-Viewing.nl/#dashboard","text":"Pagina: Gegevens -> Dashboard Het dashboard kan zowel worden gebruikt om gegevens te bekijken als om het systeem te manipuleren, dankzij de talrijke beschikbare dashboardwidgets. Er kunnen meerdere dashboards worden aangemaakt en vergrendeld om de indeling niet te wijzigen.","title":"Dashboard"},{"location":"Data-Viewing.nl/#widgets","text":"Widgets zijn elementen op het Dashboard die een aantal toepassingen hebben, zoals het bekijken van gegevens (grafieken, indicatoren, meters, enz.) of interactie met het systeem (uitgangen manipuleren, PWM duty cycle wijzigen, een database opvragen of wijzigen, enz.) Widgets kunnen gemakkelijk worden herschikt en van grootte veranderd door ze te verslepen. Voor een volledige lijst van ondersteunde Widgets, zie Ondersteunde Widgets .","title":"Widgets"},{"location":"Data-Viewing.nl/#aangepaste-widgets","text":"Er is een systeem voor het importeren van aangepaste Widgets in Mycodo waarmee door gebruikers gemaakte Widgets in het Mycodo-systeem kunnen worden gebruikt. Aangepaste Widgets kunnen worden ge\u00fcpload op de pagina [Versnellingspictogram] -> Configuratie -> Aangepaste Widgets . Na het importeren zijn ze beschikbaar voor gebruik op de pagina Instellen -> Widget . Als je een werkende module ontwikkelt, overweeg dan een nieuw GitHub issue aanmaken of een pull request, en het kan worden opgenomen in de ingebouwde set. Open een van de ingebouwde Widget-modules in de directory Mycodo/mycodo/widgets voor voorbeelden van de juiste opmaak. Er zijn ook voorbeelden van aangepaste Widgets in de map Mycodo/mycodo/widgets/voorbeelden . Het maken van een aangepaste widgetmodule vereist vaak specifieke plaatsing en uitvoering van Javascript. In elke module werden verschillende variabelen gemaakt om dit aan te pakken, en de volgende korte structuur te volgen van de dashboardpagina die zou worden gegenereerd met meerdere widgets die worden weergegeven. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Aangepaste Widgets"},{"location":"Data-Viewing.nn/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Live m\u00e5linger ~ Page: Data -> Live Measurements The Live Measurements page is the first page a user sees after logging in to Mycodo. It will display the current measurements being acquired from Input and Function controllers. If there is nothing displayed on the Live page, ensure an Input or Function controller is both configured correctly and activated. Data will be automatically updated on the page from the measurement database. Asynchronous Graphs ~ Page: Data -> Asynchronous Graphs A graphical data display that is useful for viewing data sets spanning relatively long periods of time (weeks/months/years), which could be very data- and processor-intensive to view as a Synchronous Graph. Select a time frame and data will be loaded from that time span, if it exists. The first view will be of the entire selected data set. For every view/zoom, 700 data points will be loaded. If there are more than 700 data points recorded for the time span selected, 700 points will be created from an averaging of the points in that time span. This enables much less data to be used to navigate a large data set. For instance, 4 months of data may be 10 megabytes if all of it were downloaded. However, when viewing a 4 month span, it's not possible to see every data point of that 10 megabytes, and aggregating of points is inevitable. With asynchronous loading of data, you only download what you see. So, instead of downloading 10 megabytes every graph load, only ~50kb will be downloaded until a new zoom level is selected, at which time only another ~50kb is downloaded. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data. dashbord ~ Page: Data -> dashbord The dashboard can be used for both viewing data and manipulating the system, thanks to the numerous dashboard widgets available. Multiple dashboards can be created as well as locked to prevent changing the arrangement. Widgets ~ Widgets are elements on the Dashboard that have a number of uses, such as viewing data (charts, indicators, gauges, etc.) or interacting with the system (manipulate outputs, change PWM duty cycle, querying or modifying a database, etc.). Widgets can be easily rearranged and resized by dragging and dropping. For a full list of supported Widgets, see Supported Widgets . Custom Widgets ~ There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.nn/#live-malinger","text":"Page: Data -> Live Measurements The Live Measurements page is the first page a user sees after logging in to Mycodo. It will display the current measurements being acquired from Input and Function controllers. If there is nothing displayed on the Live page, ensure an Input or Function controller is both configured correctly and activated. Data will be automatically updated on the page from the measurement database.","title":"Live m\u00e5linger"},{"location":"Data-Viewing.nn/#asynchronous-graphs","text":"Page: Data -> Asynchronous Graphs A graphical data display that is useful for viewing data sets spanning relatively long periods of time (weeks/months/years), which could be very data- and processor-intensive to view as a Synchronous Graph. Select a time frame and data will be loaded from that time span, if it exists. The first view will be of the entire selected data set. For every view/zoom, 700 data points will be loaded. If there are more than 700 data points recorded for the time span selected, 700 points will be created from an averaging of the points in that time span. This enables much less data to be used to navigate a large data set. For instance, 4 months of data may be 10 megabytes if all of it were downloaded. However, when viewing a 4 month span, it's not possible to see every data point of that 10 megabytes, and aggregating of points is inevitable. With asynchronous loading of data, you only download what you see. So, instead of downloading 10 megabytes every graph load, only ~50kb will be downloaded until a new zoom level is selected, at which time only another ~50kb is downloaded. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data.","title":"Asynchronous Graphs"},{"location":"Data-Viewing.nn/#dashbord","text":"Page: Data -> dashbord The dashboard can be used for both viewing data and manipulating the system, thanks to the numerous dashboard widgets available. Multiple dashboards can be created as well as locked to prevent changing the arrangement.","title":"dashbord"},{"location":"Data-Viewing.nn/#widgets","text":"Widgets are elements on the Dashboard that have a number of uses, such as viewing data (charts, indicators, gauges, etc.) or interacting with the system (manipulate outputs, change PWM duty cycle, querying or modifying a database, etc.). Widgets can be easily rearranged and resized by dragging and dropping. For a full list of supported Widgets, see Supported Widgets .","title":"Widgets"},{"location":"Data-Viewing.nn/#custom-widgets","text":"There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Custom Widgets"},{"location":"Data-Viewing.pl/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Pomiary \u017cywo ~ Page: Data -> Live Measurements Strona Pomiary na \u017cywo jest pierwsz\u0105 stron\u0105, kt\u00f3r\u0105 widzi u\u017cytkownik po zalogowaniu si\u0119 do Mycodo. Wy\u015bwietla ona aktualne pomiary uzyskane z kontroler\u00f3w wej\u015bcia i funkcji. Je\u015bli nic nie jest wy\u015bwietlane na stronie Live , upewnij si\u0119, \u017ce kontroler wej\u015bcia lub funkcji jest poprawnie skonfigurowany i aktywowany. Dane b\u0119d\u0105 automatycznie aktualizowane na stronie z bazy danych pomiar\u00f3w. Wykresy asynchroniczne ~ Strona: Dane -> Wykresy asynchroniczne Graficzne wy\u015bwietlanie danych przydatne do przegl\u0105dania zestaw\u00f3w danych obejmuj\u0105cych stosunkowo d\u0142ugie okresy czasu (tygodnie/miesi\u0105ce/roki), kt\u00f3rych wy\u015bwietlanie w postaci wykresu synchronicznego mog\u0142oby wymaga\u0107 du\u017cej ilo\u015bci danych i procesora. Po wybraniu przedzia\u0142u czasowego zostan\u0105 wczytane dane z tego przedzia\u0142u, je\u015bli istnieje. Pierwszy widok b\u0119dzie dotyczy\u0142 ca\u0142ego wybranego zestawu danych. Dla ka\u017cdego widoku/powi\u0119kszenia zostanie za\u0142adowanych 700 punkt\u00f3w danych. Je\u015bli dla wybranego przedzia\u0142u czasowego zarejestrowano wi\u0119cej ni\u017c 700 punkt\u00f3w danych, 700 punkt\u00f3w zostanie utworzonych z u\u015brednienia punkt\u00f3w w tym przedziale czasowym. Umo\u017cliwia to wykorzystanie znacznie mniejszej ilo\u015bci danych do nawigacji po du\u017cym zbiorze danych. Na przyk\u0142ad, 4 miesi\u0105ce danych mog\u0105 mie\u0107 rozmiar 10 megabajt\u00f3w, je\u015bli wszystkie zostan\u0105 pobrane. Jednak podczas przegl\u0105dania 4-miesi\u0119cznego okresu nie jest mo\u017cliwe zobaczenie ka\u017cdego punktu danych z tych 10 megabajt\u00f3w, a agregacja punkt\u00f3w jest nieunikniona. Przy asynchronicznym \u0142adowaniu danych, pobierasz tylko to, co widzisz. Tak wi\u0119c, zamiast pobiera\u0107 10 megabajt\u00f3w przy ka\u017cdym \u0142adowaniu wykresu, tylko ~50kb zostanie pobrane do momentu wybrania nowego poziomu powi\u0119kszenia, w kt\u00f3rym to momencie pobierane jest tylko kolejne ~50kb. Note Wykresy wymagaj\u0105 pomiar\u00f3w, dlatego aby wy\u015bwietli\u0107 dane nale\u017cy doda\u0107 i aktywowa\u0107 przynajmniej jedno Wej\u015bcie/Wyj\u015bcie/Funkcj\u0119/etc. Pulpit ~ Strona: Dane -> Pulpit Dashboard mo\u017ce s\u0142u\u017cy\u0107 zar\u00f3wno do przegl\u0105dania danych, jak i do manipulowania systemem, dzi\u0119ki licznym dost\u0119pnym wid\u017cetom dashboardowym. Mo\u017cna tworzy\u0107 wiele dashboard\u00f3w, jak r\u00f3wnie\u017c zablokowa\u0107 je, aby uniemo\u017cliwi\u0107 zmian\u0119 uk\u0142adu. widgety ~ Wid\u017cety to elementy na pulpicie nawigacyjnym, kt\u00f3re maj\u0105 wiele zastosowa\u0144, takich jak wy\u015bwietlanie danych (wykresy, wska\u017aniki, mierniki itp.) lub interakcja z systemem (manipulowanie wyj\u015bciami, zmiana cyklu pracy PWM, odpytywanie lub modyfikowanie bazy danych itp.) Wid\u017cety mo\u017cna \u0142atwo zmienia\u0107 uk\u0142ad i rozmiar poprzez przeci\u0105ganie i upuszczanie. Pe\u0142na lista obs\u0142ugiwanych Wid\u017cet\u00f3w znajduje si\u0119 w Obs\u0142ugiwane Wid\u017cety . W\u0142asne wid\u017cety ~ W Mycodo istnieje system importu Custom Widget, kt\u00f3ry umo\u017cliwia wykorzystanie w systemie Mycodo widget\u00f3w stworzonych przez u\u017cytkownika. Custom Widgety mo\u017cna wgra\u0107 na stronie [Gear Icon] -> Configure -> Custom Widgets . Po zaimportowaniu b\u0119d\u0105 one dost\u0119pne do u\u017cycia na stronie Setup -> Widget . Je\u015bli opracujesz dzia\u0142aj\u0105cy modu\u0142, rozwa\u017c utworzenie nowego wydania GitHub lub pull request, a mo\u017ce on zosta\u0107 w\u0142\u0105czony do wbudowanego zestawu. Otw\u00f3rz dowolny z wbudowanych modu\u0142\u00f3w Widget znajduj\u0105cych si\u0119 w katalogu Mycodo/mycodo/widgets , aby uzyska\u0107 przyk\u0142ady prawid\u0142owego formatowania. Istniej\u0105 r\u00f3wnie\u017c przyk\u0142adowe Wid\u017cety niestandardowe w katalogu Mycodo/mycodo/widgets/examples . Tworzenie niestandardowego modu\u0142u wid\u017cet\u00f3w cz\u0119sto wymaga specyficznego umieszczenia i wykonania skrypt\u00f3w Javascript. W ka\u017cdym module utworzono kilka zmiennych, aby rozwi\u0105za\u0107 ten problem, i pod\u0105\u017ca\u0107 za nast\u0119puj\u0105c\u0105 kr\u00f3tk\u0105 struktur\u0105 strony pulpitu nawigacyjnego, kt\u00f3ra zosta\u0142aby wygenerowana przy wy\u015bwietlaniu wielu wid\u017cet\u00f3w. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.pl/#pomiary-zywo","text":"Page: Data -> Live Measurements Strona Pomiary na \u017cywo jest pierwsz\u0105 stron\u0105, kt\u00f3r\u0105 widzi u\u017cytkownik po zalogowaniu si\u0119 do Mycodo. Wy\u015bwietla ona aktualne pomiary uzyskane z kontroler\u00f3w wej\u015bcia i funkcji. Je\u015bli nic nie jest wy\u015bwietlane na stronie Live , upewnij si\u0119, \u017ce kontroler wej\u015bcia lub funkcji jest poprawnie skonfigurowany i aktywowany. Dane b\u0119d\u0105 automatycznie aktualizowane na stronie z bazy danych pomiar\u00f3w.","title":"Pomiary \u017cywo"},{"location":"Data-Viewing.pl/#wykresy-asynchroniczne","text":"Strona: Dane -> Wykresy asynchroniczne Graficzne wy\u015bwietlanie danych przydatne do przegl\u0105dania zestaw\u00f3w danych obejmuj\u0105cych stosunkowo d\u0142ugie okresy czasu (tygodnie/miesi\u0105ce/roki), kt\u00f3rych wy\u015bwietlanie w postaci wykresu synchronicznego mog\u0142oby wymaga\u0107 du\u017cej ilo\u015bci danych i procesora. Po wybraniu przedzia\u0142u czasowego zostan\u0105 wczytane dane z tego przedzia\u0142u, je\u015bli istnieje. Pierwszy widok b\u0119dzie dotyczy\u0142 ca\u0142ego wybranego zestawu danych. Dla ka\u017cdego widoku/powi\u0119kszenia zostanie za\u0142adowanych 700 punkt\u00f3w danych. Je\u015bli dla wybranego przedzia\u0142u czasowego zarejestrowano wi\u0119cej ni\u017c 700 punkt\u00f3w danych, 700 punkt\u00f3w zostanie utworzonych z u\u015brednienia punkt\u00f3w w tym przedziale czasowym. Umo\u017cliwia to wykorzystanie znacznie mniejszej ilo\u015bci danych do nawigacji po du\u017cym zbiorze danych. Na przyk\u0142ad, 4 miesi\u0105ce danych mog\u0105 mie\u0107 rozmiar 10 megabajt\u00f3w, je\u015bli wszystkie zostan\u0105 pobrane. Jednak podczas przegl\u0105dania 4-miesi\u0119cznego okresu nie jest mo\u017cliwe zobaczenie ka\u017cdego punktu danych z tych 10 megabajt\u00f3w, a agregacja punkt\u00f3w jest nieunikniona. Przy asynchronicznym \u0142adowaniu danych, pobierasz tylko to, co widzisz. Tak wi\u0119c, zamiast pobiera\u0107 10 megabajt\u00f3w przy ka\u017cdym \u0142adowaniu wykresu, tylko ~50kb zostanie pobrane do momentu wybrania nowego poziomu powi\u0119kszenia, w kt\u00f3rym to momencie pobierane jest tylko kolejne ~50kb. Note Wykresy wymagaj\u0105 pomiar\u00f3w, dlatego aby wy\u015bwietli\u0107 dane nale\u017cy doda\u0107 i aktywowa\u0107 przynajmniej jedno Wej\u015bcie/Wyj\u015bcie/Funkcj\u0119/etc.","title":"Wykresy asynchroniczne"},{"location":"Data-Viewing.pl/#pulpit","text":"Strona: Dane -> Pulpit Dashboard mo\u017ce s\u0142u\u017cy\u0107 zar\u00f3wno do przegl\u0105dania danych, jak i do manipulowania systemem, dzi\u0119ki licznym dost\u0119pnym wid\u017cetom dashboardowym. Mo\u017cna tworzy\u0107 wiele dashboard\u00f3w, jak r\u00f3wnie\u017c zablokowa\u0107 je, aby uniemo\u017cliwi\u0107 zmian\u0119 uk\u0142adu.","title":"Pulpit"},{"location":"Data-Viewing.pl/#widgety","text":"Wid\u017cety to elementy na pulpicie nawigacyjnym, kt\u00f3re maj\u0105 wiele zastosowa\u0144, takich jak wy\u015bwietlanie danych (wykresy, wska\u017aniki, mierniki itp.) lub interakcja z systemem (manipulowanie wyj\u015bciami, zmiana cyklu pracy PWM, odpytywanie lub modyfikowanie bazy danych itp.) Wid\u017cety mo\u017cna \u0142atwo zmienia\u0107 uk\u0142ad i rozmiar poprzez przeci\u0105ganie i upuszczanie. Pe\u0142na lista obs\u0142ugiwanych Wid\u017cet\u00f3w znajduje si\u0119 w Obs\u0142ugiwane Wid\u017cety .","title":"widgety"},{"location":"Data-Viewing.pl/#wasne-widzety","text":"W Mycodo istnieje system importu Custom Widget, kt\u00f3ry umo\u017cliwia wykorzystanie w systemie Mycodo widget\u00f3w stworzonych przez u\u017cytkownika. Custom Widgety mo\u017cna wgra\u0107 na stronie [Gear Icon] -> Configure -> Custom Widgets . Po zaimportowaniu b\u0119d\u0105 one dost\u0119pne do u\u017cycia na stronie Setup -> Widget . Je\u015bli opracujesz dzia\u0142aj\u0105cy modu\u0142, rozwa\u017c utworzenie nowego wydania GitHub lub pull request, a mo\u017ce on zosta\u0107 w\u0142\u0105czony do wbudowanego zestawu. Otw\u00f3rz dowolny z wbudowanych modu\u0142\u00f3w Widget znajduj\u0105cych si\u0119 w katalogu Mycodo/mycodo/widgets , aby uzyska\u0107 przyk\u0142ady prawid\u0142owego formatowania. Istniej\u0105 r\u00f3wnie\u017c przyk\u0142adowe Wid\u017cety niestandardowe w katalogu Mycodo/mycodo/widgets/examples . Tworzenie niestandardowego modu\u0142u wid\u017cet\u00f3w cz\u0119sto wymaga specyficznego umieszczenia i wykonania skrypt\u00f3w Javascript. W ka\u017cdym module utworzono kilka zmiennych, aby rozwi\u0105za\u0107 ten problem, i pod\u0105\u017ca\u0107 za nast\u0119puj\u0105c\u0105 kr\u00f3tk\u0105 struktur\u0105 strony pulpitu nawigacyjnego, kt\u00f3ra zosta\u0142aby wygenerowana przy wy\u015bwietlaniu wielu wid\u017cet\u00f3w. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"W\u0142asne wid\u017cety"},{"location":"Data-Viewing.pt/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Medi\u00e7\u00f5es ao vivo ~ Page: Data -> Live Measurements A p\u00e1gina \"Medi\u00e7\u00f5es em directo\" \u00e9 a primeira p\u00e1gina que um utilizador v\u00ea depois de entrar no Mycodo. Ir\u00e1 mostrar as medidas actuais que est\u00e3o a ser adquiridas dos controladores de Entrada e Fun\u00e7\u00e3o. Se n\u00e3o houver nada exibido na p\u00e1gina Vivo , certifique-se de que um controlador de Entrada ou de Fun\u00e7\u00e3o est\u00e1 configurado correctamente e activado. Os dados ser\u00e3o automaticamente actualizados na p\u00e1gina a partir da base de dados de medi\u00e7\u00f5es. Ass\u00edncrono ~ P\u00e1gina: Dados -> Ass\u00edncrono Uma visualiza\u00e7\u00e3o gr\u00e1fica de dados que \u00e9 \u00fatil para visualizar conjuntos de dados que abrangem per\u00edodos de tempo relativamente longos (semanas/meses/anos), que podem ser muito exigentes em termos de dados e de processador para serem visualizados como um Gr\u00e1fico S\u00edncrono. Seleccione um per\u00edodo de tempo e os dados ser\u00e3o carregados a partir desse per\u00edodo de tempo, se este existir. A primeira vista ser\u00e1 de todo o conjunto de dados seleccionado. Para cada vista/zoom, 700 pontos de dados ser\u00e3o carregados. Se houver mais de 700 pontos de dados registados para o intervalo de tempo seleccionado, ser\u00e3o criados 700 pontos a partir de uma m\u00e9dia dos pontos nesse intervalo de tempo. Isto permite que muito menos dados sejam utilizados para navegar num grande conjunto de dados. Por exemplo, 4 meses de dados podem ser de 10 megabytes se todos os dados forem descarregados. Contudo, ao visualizar um per\u00edodo de 4 meses, n\u00e3o \u00e9 poss\u00edvel ver todos os pontos de dados desses 10 megabytes, e a agrega\u00e7\u00e3o de pontos \u00e9 inevit\u00e1vel. Com o carregamento ass\u00edncrono de dados, s\u00f3 \u00e9 poss\u00edvel descarregar o que se v\u00ea. Assim, em vez de descarregar 10 megabytes por cada carga gr\u00e1fica, apenas ~50kb ser\u00e3o descarregados at\u00e9 ser seleccionado um novo n\u00edvel de zoom, altura em que apenas outros ~50kb ser\u00e3o descarregados. Note Os gr\u00e1ficos requerem medi\u00e7\u00f5es, pelo que pelo menos uma Entrada/Sa\u00edda/Fun\u00e7\u00e3o/etc. precisa de ser adicionada e activada para exibir os dados. painel de controle ~ P\u00e1gina: Dados -> painel de controle O tablier pode ser utilizado tanto para visualizar dados como para manipular o sistema, gra\u00e7as aos numerosos widgets de tablier dispon\u00edveis. Podem ser criados v\u00e1rios pain\u00e9is de instrumentos, bem como bloqueados para impedir a altera\u00e7\u00e3o da disposi\u00e7\u00e3o. Widgets ~ Os Widgets s\u00e3o elementos do Painel que t\u00eam v\u00e1rias utiliza\u00e7\u00f5es, tais como visualizar dados (gr\u00e1ficos, indicadores, medidores, etc.) ou interagir com o sistema (manipular sa\u00eddas, alterar o ciclo de funcionamento do PWM, consultar ou modificar uma base de dados, etc.). Os widgets podem ser facilmente rearranjados e redimensionados por arrastar e largar. Para uma lista completa de Widgets suportados, ver Supported Widgets . Widgets personalizados ~ Existe um sistema personalizado de importa\u00e7\u00e3o de Widgets em Mycodo que permite a utiliza\u00e7\u00e3o de Widgets criados pelo utilizador no sistema Mycodo. Os Widgets Personalizados podem ser carregados na p\u00e1gina [\u00cdcone do Equipamento] -> Configurar -> Widgets Personalizados'. Ap\u00f3s a importa\u00e7\u00e3o, estar\u00e3o dispon\u00edveis para utiliza\u00e7\u00e3o na p\u00e1gina Setup -> Widget`. Se desenvolver um m\u00f3dulo de trabalho, considere criar uma nova edi\u00e7\u00e3o do GitHub ou fa\u00e7a um pedido, e este pode ser inclu\u00eddo no conjunto integrado. Abrir qualquer um dos m\u00f3dulos Widget integrados localizados no direct\u00f3rio Mycodo/mycodo/widgets para exemplos da formata\u00e7\u00e3o adequada. H\u00e1 tamb\u00e9m exemplos de Widgets personalizados no direct\u00f3rio Mycodo/mycodo/widgets/examples . A cria\u00e7\u00e3o de um m\u00f3dulo widget personalizado requer frequentemente a coloca\u00e7\u00e3o e execu\u00e7\u00e3o espec\u00edficas de Javascript. V\u00e1rias vari\u00e1veis foram criadas em cada m\u00f3dulo para tratar disto, e seguir a seguinte breve estrutura da p\u00e1gina do painel que seria gerada com m\u00faltiplos widgets a serem exibidos. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.pt/#medicoes-ao-vivo","text":"Page: Data -> Live Measurements A p\u00e1gina \"Medi\u00e7\u00f5es em directo\" \u00e9 a primeira p\u00e1gina que um utilizador v\u00ea depois de entrar no Mycodo. Ir\u00e1 mostrar as medidas actuais que est\u00e3o a ser adquiridas dos controladores de Entrada e Fun\u00e7\u00e3o. Se n\u00e3o houver nada exibido na p\u00e1gina Vivo , certifique-se de que um controlador de Entrada ou de Fun\u00e7\u00e3o est\u00e1 configurado correctamente e activado. Os dados ser\u00e3o automaticamente actualizados na p\u00e1gina a partir da base de dados de medi\u00e7\u00f5es.","title":"Medi\u00e7\u00f5es ao vivo"},{"location":"Data-Viewing.pt/#assincrono","text":"P\u00e1gina: Dados -> Ass\u00edncrono Uma visualiza\u00e7\u00e3o gr\u00e1fica de dados que \u00e9 \u00fatil para visualizar conjuntos de dados que abrangem per\u00edodos de tempo relativamente longos (semanas/meses/anos), que podem ser muito exigentes em termos de dados e de processador para serem visualizados como um Gr\u00e1fico S\u00edncrono. Seleccione um per\u00edodo de tempo e os dados ser\u00e3o carregados a partir desse per\u00edodo de tempo, se este existir. A primeira vista ser\u00e1 de todo o conjunto de dados seleccionado. Para cada vista/zoom, 700 pontos de dados ser\u00e3o carregados. Se houver mais de 700 pontos de dados registados para o intervalo de tempo seleccionado, ser\u00e3o criados 700 pontos a partir de uma m\u00e9dia dos pontos nesse intervalo de tempo. Isto permite que muito menos dados sejam utilizados para navegar num grande conjunto de dados. Por exemplo, 4 meses de dados podem ser de 10 megabytes se todos os dados forem descarregados. Contudo, ao visualizar um per\u00edodo de 4 meses, n\u00e3o \u00e9 poss\u00edvel ver todos os pontos de dados desses 10 megabytes, e a agrega\u00e7\u00e3o de pontos \u00e9 inevit\u00e1vel. Com o carregamento ass\u00edncrono de dados, s\u00f3 \u00e9 poss\u00edvel descarregar o que se v\u00ea. Assim, em vez de descarregar 10 megabytes por cada carga gr\u00e1fica, apenas ~50kb ser\u00e3o descarregados at\u00e9 ser seleccionado um novo n\u00edvel de zoom, altura em que apenas outros ~50kb ser\u00e3o descarregados. Note Os gr\u00e1ficos requerem medi\u00e7\u00f5es, pelo que pelo menos uma Entrada/Sa\u00edda/Fun\u00e7\u00e3o/etc. precisa de ser adicionada e activada para exibir os dados.","title":"Ass\u00edncrono"},{"location":"Data-Viewing.pt/#painel-de-controle","text":"P\u00e1gina: Dados -> painel de controle O tablier pode ser utilizado tanto para visualizar dados como para manipular o sistema, gra\u00e7as aos numerosos widgets de tablier dispon\u00edveis. Podem ser criados v\u00e1rios pain\u00e9is de instrumentos, bem como bloqueados para impedir a altera\u00e7\u00e3o da disposi\u00e7\u00e3o.","title":"painel de controle"},{"location":"Data-Viewing.pt/#widgets","text":"Os Widgets s\u00e3o elementos do Painel que t\u00eam v\u00e1rias utiliza\u00e7\u00f5es, tais como visualizar dados (gr\u00e1ficos, indicadores, medidores, etc.) ou interagir com o sistema (manipular sa\u00eddas, alterar o ciclo de funcionamento do PWM, consultar ou modificar uma base de dados, etc.). Os widgets podem ser facilmente rearranjados e redimensionados por arrastar e largar. Para uma lista completa de Widgets suportados, ver Supported Widgets .","title":"Widgets"},{"location":"Data-Viewing.pt/#widgets-personalizados","text":"Existe um sistema personalizado de importa\u00e7\u00e3o de Widgets em Mycodo que permite a utiliza\u00e7\u00e3o de Widgets criados pelo utilizador no sistema Mycodo. Os Widgets Personalizados podem ser carregados na p\u00e1gina [\u00cdcone do Equipamento] -> Configurar -> Widgets Personalizados'. Ap\u00f3s a importa\u00e7\u00e3o, estar\u00e3o dispon\u00edveis para utiliza\u00e7\u00e3o na p\u00e1gina Setup -> Widget`. Se desenvolver um m\u00f3dulo de trabalho, considere criar uma nova edi\u00e7\u00e3o do GitHub ou fa\u00e7a um pedido, e este pode ser inclu\u00eddo no conjunto integrado. Abrir qualquer um dos m\u00f3dulos Widget integrados localizados no direct\u00f3rio Mycodo/mycodo/widgets para exemplos da formata\u00e7\u00e3o adequada. H\u00e1 tamb\u00e9m exemplos de Widgets personalizados no direct\u00f3rio Mycodo/mycodo/widgets/examples . A cria\u00e7\u00e3o de um m\u00f3dulo widget personalizado requer frequentemente a coloca\u00e7\u00e3o e execu\u00e7\u00e3o espec\u00edficas de Javascript. V\u00e1rias vari\u00e1veis foram criadas em cada m\u00f3dulo para tratar disto, e seguir a seguinte breve estrutura da p\u00e1gina do painel que seria gerada com m\u00faltiplos widgets a serem exibidos. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Widgets personalizados"},{"location":"Data-Viewing.ru/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 \u0416\u0438\u0432\u044b\u0435 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f ~ Page: Data -> Live Measurements \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 Live Measurements - \u044d\u0442\u043e \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u0438\u0434\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0441\u043b\u0435 \u0432\u0445\u043e\u0434\u0430 \u0432 Mycodo. \u041d\u0430 \u043d\u0435\u0439 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0435 \u043e\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432. \u0415\u0441\u043b\u0438 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 Live \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d. \u0414\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u043d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439. \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 ~ Page: \u0414\u0430\u043d\u043d\u044b\u0435 -> \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0413\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0438\u043e\u0434\u044b \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u043d\u0435\u0434\u0435\u043b\u0438/\u043c\u0435\u0441\u044f\u0446\u044b/\u0433\u043e\u0434\u044b), \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b, \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442. \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u0432\u0441\u0435\u0433\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0438\u0434\u0430/\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043e 700 \u0442\u043e\u0447\u0435\u043a \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u0441\u043b\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u043e\u043b\u0435\u0435 700 \u0442\u043e\u0447\u0435\u043a \u0434\u0430\u043d\u043d\u044b\u0445, 700 \u0442\u043e\u0447\u0435\u043a \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0443\u0441\u0440\u0435\u0434\u043d\u0435\u043d\u0438\u044f \u0442\u043e\u0447\u0435\u043a \u044d\u0442\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 \u043f\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u043c\u0443 \u043d\u0430\u0431\u043e\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430 4 \u043c\u0435\u0441\u044f\u0446\u0430 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c 10 \u043c\u0435\u0433\u0430\u0431\u0430\u0439\u0442, \u0435\u0441\u043b\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0445 \u0432\u0441\u0435. \u041e\u0434\u043d\u0430\u043a\u043e \u043f\u0440\u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430 4 \u043c\u0435\u0441\u044f\u0446\u0430 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043a\u0430\u0436\u0434\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u044d\u0442\u0438\u0445 10 \u043c\u0435\u0433\u0430\u0431\u0430\u0439\u0442, \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u0435\u043a \u043d\u0435\u0438\u0437\u0431\u0435\u0436\u043d\u043e. \u041f\u0440\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e, \u0447\u0442\u043e \u0432\u0438\u0434\u0438\u0442\u0435. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u043c\u0435\u0441\u0442\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 10 \u043c\u0435\u0433\u0430\u0431\u0430\u0439\u0442 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430, \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e ~50 \u043a\u0431, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0438 \u0442\u043e\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043e \u0435\u0449\u0435 ~50 \u043a\u0431. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data. \u041f\u0430\u043d\u0435\u043b\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f ~ Page: \u0414\u0430\u043d\u043d\u044b\u0435 -> \u041f\u0430\u043d\u0435\u043b\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u041f\u0440\u0438\u0431\u043e\u0440\u043d\u0430\u044f \u043f\u0430\u043d\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043c\u043d\u043e\u0433\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u043c \u0432\u0438\u0434\u0436\u0435\u0442\u0430\u043c \u043f\u0440\u0438\u0431\u043e\u0440\u043d\u043e\u0439 \u043f\u0430\u043d\u0435\u043b\u0438. \u041c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0431\u043e\u0440\u043d\u044b\u0445 \u043f\u0430\u043d\u0435\u043b\u0435\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f. Widgets ~ \u0412\u0438\u0434\u0436\u0435\u0442\u044b - \u044d\u0442\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u0440\u0438\u0431\u043e\u0440\u043d\u043e\u0439 \u043f\u0430\u043d\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0433\u0440\u0430\u0444\u0438\u043a\u0438, \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u044b, \u0434\u0430\u0442\u0447\u0438\u043a\u0438 \u0438 \u0442.\u0434.) \u0438\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 (\u043c\u0430\u043d\u0438\u043f\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u0430\u043c\u0438, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u0428\u0418\u041c, \u0437\u0430\u043f\u0440\u043e\u0441 \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0442.\u0434.). \u0412\u0438\u0434\u0436\u0435\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u043b\u0435\u0433\u043a\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0438 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u0443\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0442\u0430\u0441\u043a\u0438\u0432\u0430\u043d\u0438\u044f. \u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432 \u0441\u043c. \u0432 Supported Widgets . Custom Widgets ~ There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.ru/#_1","text":"Page: Data -> Live Measurements \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 Live Measurements - \u044d\u0442\u043e \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u0438\u0434\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0441\u043b\u0435 \u0432\u0445\u043e\u0434\u0430 \u0432 Mycodo. \u041d\u0430 \u043d\u0435\u0439 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0435 \u043e\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432. \u0415\u0441\u043b\u0438 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 Live \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d. \u0414\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u043d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439.","title":"\u0416\u0438\u0432\u044b\u0435 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f"},{"location":"Data-Viewing.ru/#_2","text":"Page: \u0414\u0430\u043d\u043d\u044b\u0435 -> \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0413\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0438\u043e\u0434\u044b \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u043d\u0435\u0434\u0435\u043b\u0438/\u043c\u0435\u0441\u044f\u0446\u044b/\u0433\u043e\u0434\u044b), \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b, \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442. \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0431\u0443\u0434\u0435\u0442 \u0432\u0441\u0435\u0433\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0438\u0434\u0430/\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043e 700 \u0442\u043e\u0447\u0435\u043a \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u0441\u043b\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0431\u043e\u043b\u0435\u0435 700 \u0442\u043e\u0447\u0435\u043a \u0434\u0430\u043d\u043d\u044b\u0445, 700 \u0442\u043e\u0447\u0435\u043a \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0443\u0441\u0440\u0435\u0434\u043d\u0435\u043d\u0438\u044f \u0442\u043e\u0447\u0435\u043a \u044d\u0442\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 \u043f\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u043c\u0443 \u043d\u0430\u0431\u043e\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430 4 \u043c\u0435\u0441\u044f\u0446\u0430 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c 10 \u043c\u0435\u0433\u0430\u0431\u0430\u0439\u0442, \u0435\u0441\u043b\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0445 \u0432\u0441\u0435. \u041e\u0434\u043d\u0430\u043a\u043e \u043f\u0440\u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430 4 \u043c\u0435\u0441\u044f\u0446\u0430 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043a\u0430\u0436\u0434\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u044d\u0442\u0438\u0445 10 \u043c\u0435\u0433\u0430\u0431\u0430\u0439\u0442, \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u0435\u043a \u043d\u0435\u0438\u0437\u0431\u0435\u0436\u043d\u043e. \u041f\u0440\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e, \u0447\u0442\u043e \u0432\u0438\u0434\u0438\u0442\u0435. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u043c\u0435\u0441\u0442\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 10 \u043c\u0435\u0433\u0430\u0431\u0430\u0439\u0442 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430, \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e ~50 \u043a\u0431, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0438 \u0442\u043e\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043e \u0435\u0449\u0435 ~50 \u043a\u0431. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data.","title":"\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439"},{"location":"Data-Viewing.ru/#_3","text":"Page: \u0414\u0430\u043d\u043d\u044b\u0435 -> \u041f\u0430\u043d\u0435\u043b\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u041f\u0440\u0438\u0431\u043e\u0440\u043d\u0430\u044f \u043f\u0430\u043d\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043c\u043d\u043e\u0433\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u043c \u0432\u0438\u0434\u0436\u0435\u0442\u0430\u043c \u043f\u0440\u0438\u0431\u043e\u0440\u043d\u043e\u0439 \u043f\u0430\u043d\u0435\u043b\u0438. \u041c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0431\u043e\u0440\u043d\u044b\u0445 \u043f\u0430\u043d\u0435\u043b\u0435\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041f\u0430\u043d\u0435\u043b\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"Data-Viewing.ru/#widgets","text":"\u0412\u0438\u0434\u0436\u0435\u0442\u044b - \u044d\u0442\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u0440\u0438\u0431\u043e\u0440\u043d\u043e\u0439 \u043f\u0430\u043d\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0433\u0440\u0430\u0444\u0438\u043a\u0438, \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u044b, \u0434\u0430\u0442\u0447\u0438\u043a\u0438 \u0438 \u0442.\u0434.) \u0438\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 (\u043c\u0430\u043d\u0438\u043f\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u0430\u043c\u0438, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u0428\u0418\u041c, \u0437\u0430\u043f\u0440\u043e\u0441 \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0442.\u0434.). \u0412\u0438\u0434\u0436\u0435\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u043b\u0435\u0433\u043a\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0438 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u0443\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0442\u0430\u0441\u043a\u0438\u0432\u0430\u043d\u0438\u044f. \u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u0432 \u0441\u043c. \u0432 Supported Widgets .","title":"Widgets"},{"location":"Data-Viewing.ru/#custom-widgets","text":"There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Custom Widgets"},{"location":"Data-Viewing.sr/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a Svenska T\u00fcrk\u00e7e \u4e2d\u6587 \u041b\u0438\u0432\u0435 \u041c\u0435\u0430\u0441\u0443\u0440\u0435\u043c\u0435\u043d\u0442\u0441 ~ Page: Data -> Live Measurements The Live Measurements page is the first page a user sees after logging in to Mycodo. It will display the current measurements being acquired from Input and Function controllers. If there is nothing displayed on the Live page, ensure an Input or Function controller is both configured correctly and activated. Data will be automatically updated on the page from the measurement database. \u0410\u0441\u0438\u043d\u0446 ~ Page: \u0414\u0430\u0442\u0430 -> \u0410\u0441\u0438\u043d\u0446 A graphical data display that is useful for viewing data sets spanning relatively long periods of time (weeks/months/years), which could be very data- and processor-intensive to view as a Synchronous Graph. Select a time frame and data will be loaded from that time span, if it exists. The first view will be of the entire selected data set. For every view/zoom, 700 data points will be loaded. If there are more than 700 data points recorded for the time span selected, 700 points will be created from an averaging of the points in that time span. This enables much less data to be used to navigate a large data set. For instance, 4 months of data may be 10 megabytes if all of it were downloaded. However, when viewing a 4 month span, it's not possible to see every data point of that 10 megabytes, and aggregating of points is inevitable. With asynchronous loading of data, you only download what you see. So, instead of downloading 10 megabytes every graph load, only ~50kb will be downloaded until a new zoom level is selected, at which time only another ~50kb is downloaded. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data. \u041a\u043e\u043c\u0430\u043d\u0434\u043d\u0430 \u0442\u0430\u0431\u043b\u0430 ~ Page: \u0414\u0430\u0442\u0430 -> \u041a\u043e\u043c\u0430\u043d\u0434\u043d\u0430 \u0442\u0430\u0431\u043b\u0430 The dashboard can be used for both viewing data and manipulating the system, thanks to the numerous dashboard widgets available. Multiple dashboards can be created as well as locked to prevent changing the arrangement. Widgets ~ Widgets are elements on the Dashboard that have a number of uses, such as viewing data (charts, indicators, gauges, etc.) or interacting with the system (manipulate outputs, change PWM duty cycle, querying or modifying a database, etc.). Widgets can be easily rearranged and resized by dragging and dropping. For a full list of supported Widgets, see Supported Widgets . Custom Widgets ~ There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.sr/#_1","text":"Page: Data -> Live Measurements The Live Measurements page is the first page a user sees after logging in to Mycodo. It will display the current measurements being acquired from Input and Function controllers. If there is nothing displayed on the Live page, ensure an Input or Function controller is both configured correctly and activated. Data will be automatically updated on the page from the measurement database.","title":"\u041b\u0438\u0432\u0435 \u041c\u0435\u0430\u0441\u0443\u0440\u0435\u043c\u0435\u043d\u0442\u0441"},{"location":"Data-Viewing.sr/#_2","text":"Page: \u0414\u0430\u0442\u0430 -> \u0410\u0441\u0438\u043d\u0446 A graphical data display that is useful for viewing data sets spanning relatively long periods of time (weeks/months/years), which could be very data- and processor-intensive to view as a Synchronous Graph. Select a time frame and data will be loaded from that time span, if it exists. The first view will be of the entire selected data set. For every view/zoom, 700 data points will be loaded. If there are more than 700 data points recorded for the time span selected, 700 points will be created from an averaging of the points in that time span. This enables much less data to be used to navigate a large data set. For instance, 4 months of data may be 10 megabytes if all of it were downloaded. However, when viewing a 4 month span, it's not possible to see every data point of that 10 megabytes, and aggregating of points is inevitable. With asynchronous loading of data, you only download what you see. So, instead of downloading 10 megabytes every graph load, only ~50kb will be downloaded until a new zoom level is selected, at which time only another ~50kb is downloaded. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data.","title":"\u0410\u0441\u0438\u043d\u0446"},{"location":"Data-Viewing.sr/#_3","text":"Page: \u0414\u0430\u0442\u0430 -> \u041a\u043e\u043c\u0430\u043d\u0434\u043d\u0430 \u0442\u0430\u0431\u043b\u0430 The dashboard can be used for both viewing data and manipulating the system, thanks to the numerous dashboard widgets available. Multiple dashboards can be created as well as locked to prevent changing the arrangement.","title":"\u041a\u043e\u043c\u0430\u043d\u0434\u043d\u0430 \u0442\u0430\u0431\u043b\u0430"},{"location":"Data-Viewing.sr/#widgets","text":"Widgets are elements on the Dashboard that have a number of uses, such as viewing data (charts, indicators, gauges, etc.) or interacting with the system (manipulate outputs, change PWM duty cycle, querying or modifying a database, etc.). Widgets can be easily rearranged and resized by dragging and dropping. For a full list of supported Widgets, see Supported Widgets .","title":"Widgets"},{"location":"Data-Viewing.sr/#custom-widgets","text":"There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Custom Widgets"},{"location":"Data-Viewing.sv/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 T\u00fcrk\u00e7e \u4e2d\u6587 Live m\u00e4tningar ~ Page: Data -> Live Measurements Sidan Live Measurements \u00e4r den f\u00f6rsta sidan som en anv\u00e4ndare ser efter att ha loggat in p\u00e5 Mycodo. Den visar de aktuella m\u00e4tningar som erh\u00e5lls fr\u00e5n styrenheter f\u00f6r ing\u00e5ng och funktion. Om det inte visas n\u00e5got p\u00e5 sidan Live ska du se till att en ing\u00e5ngs- eller funktionsregulator \u00e4r b\u00e5de korrekt konfigurerad och aktiverad. Data kommer automatiskt att uppdateras p\u00e5 sidan fr\u00e5n m\u00e4tningsdatabasen. Asynchronous Graphs ~ Sidan: Data -> Asynchronous Graphs En grafisk datavisning som \u00e4r anv\u00e4ndbar f\u00f6r att visa datam\u00e4ngder som str\u00e4cker sig \u00f6ver relativt l\u00e5nga tidsperioder (veckor/m\u00e5nader/\u00e5r), vilket kan vara mycket data- och processorkr\u00e4vande att visa som en synkron graf. V\u00e4lj en tidsram och data kommer att laddas fr\u00e5n den tidsperioden, om den finns. Den f\u00f6rsta visningen kommer att vara av hela den valda datam\u00e4ngden. F\u00f6r varje vy/zoom kommer 700 datapunkter att laddas. Om det finns fler \u00e4n 700 datapunkter registrerade f\u00f6r det valda tidsspannet kommer 700 punkter att skapas genom en genomsnittlig ber\u00e4kning av punkterna i det tidsspannet. P\u00e5 s\u00e5 s\u00e4tt kan mycket mindre data anv\u00e4ndas f\u00f6r att navigera i en stor datam\u00e4ngd. Exempelvis kan 4 m\u00e5naders data vara 10 megabyte om alla data laddas ner. N\u00e4r man tittar p\u00e5 en 4-m\u00e5nadersperiod \u00e4r det dock inte m\u00f6jligt att se varje datapunkt i de 10 megabyte, och aggregering av punkter \u00e4r oundviklig. Med asynkron laddning av data h\u00e4mtar du bara det du ser. S\u00e5 i st\u00e4llet f\u00f6r att ladda ner 10 megabyte varje g\u00e5ng grafen laddas, laddas endast ~50 kb ner tills en ny zoomniv\u00e5 v\u00e4ljs, varvid endast ytterligare ~50 kb laddas ner. Note Grafer kr\u00e4ver m\u00e4tningar, d\u00e4rf\u00f6r m\u00e5ste minst en ing\u00e5ng/utg\u00e5ng/funktion/etc. l\u00e4ggas till och aktiveras f\u00f6r att data ska kunna visas. instrumentbr\u00e4da ~ Sidan: Data -> instrumentbr\u00e4da Instrumentpanelen kan anv\u00e4ndas b\u00e5de f\u00f6r att visa data och f\u00f6r att manipulera systemet, tack vare de m\u00e5nga widgetar som finns tillg\u00e4ngliga. Flera instrumentpaneler kan skapas och l\u00e5sas f\u00f6r att f\u00f6rhindra att arrangemanget \u00e4ndras. Widgets ~ Widgets \u00e4r element p\u00e5 instrumentpanelen som kan anv\u00e4ndas p\u00e5 olika s\u00e4tt, t.ex. f\u00f6r att visa data (diagram, indikatorer, m\u00e4tare osv.) eller f\u00f6r att interagera med systemet (manipulera utg\u00e5ngar, \u00e4ndra PWM-tj\u00e4nstg\u00f6ringscykel, fr\u00e5ga eller \u00e4ndra en databas osv.). Widgetar kan enkelt omorganiseras och \u00e4ndras i storlek genom att dra och sl\u00e4ppa dem. F\u00f6r en fullst\u00e4ndig lista \u00f6ver widgets som st\u00f6ds, se Supported Widgets . Anpassade widgetar ~ Det finns ett importsystem f\u00f6r anpassade widgetar i Mycodo som g\u00f6r det m\u00f6jligt att anv\u00e4nda anv\u00e4ndarskapade widgetar i Mycodo-systemet. Anpassade widgetar kan laddas upp p\u00e5 sidan [Gear Icon] -> Configure -> Custom Widgets . Efter import kommer de att vara tillg\u00e4ngliga f\u00f6r anv\u00e4ndning p\u00e5 sidan Setup -> Widget . Om du utvecklar en fungerande modul kan du \u00f6verv\u00e4ga att skapa ett nytt GitHub-\u00e4rende eller en pull request, s\u00e5 att den kan inkluderas i den inbyggda upps\u00e4ttningen. \u00d6ppna n\u00e5gon av de inbyggda widgetmoduler som finns i katalogen Mycodo/mycodo/widgets f\u00f6r att f\u00e5 exempel p\u00e5 korrekt formatering. Det finns ocks\u00e5 exempel p\u00e5 anpassade widgets i katalogen Mycodo/mycodo/widgets/examples . F\u00f6r att skapa en anpassad widgetmodul kr\u00e4vs ofta en specifik placering och utf\u00f6rande av Javascript. Flera variabler skapades i varje modul f\u00f6r att l\u00f6sa detta och f\u00f6ljer f\u00f6ljande korta struktur f\u00f6r den instrumentbr\u00e4dsida som skulle genereras n\u00e4r flera widgetar visas. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.sv/#live-matningar","text":"Page: Data -> Live Measurements Sidan Live Measurements \u00e4r den f\u00f6rsta sidan som en anv\u00e4ndare ser efter att ha loggat in p\u00e5 Mycodo. Den visar de aktuella m\u00e4tningar som erh\u00e5lls fr\u00e5n styrenheter f\u00f6r ing\u00e5ng och funktion. Om det inte visas n\u00e5got p\u00e5 sidan Live ska du se till att en ing\u00e5ngs- eller funktionsregulator \u00e4r b\u00e5de korrekt konfigurerad och aktiverad. Data kommer automatiskt att uppdateras p\u00e5 sidan fr\u00e5n m\u00e4tningsdatabasen.","title":"Live m\u00e4tningar"},{"location":"Data-Viewing.sv/#asynchronous-graphs","text":"Sidan: Data -> Asynchronous Graphs En grafisk datavisning som \u00e4r anv\u00e4ndbar f\u00f6r att visa datam\u00e4ngder som str\u00e4cker sig \u00f6ver relativt l\u00e5nga tidsperioder (veckor/m\u00e5nader/\u00e5r), vilket kan vara mycket data- och processorkr\u00e4vande att visa som en synkron graf. V\u00e4lj en tidsram och data kommer att laddas fr\u00e5n den tidsperioden, om den finns. Den f\u00f6rsta visningen kommer att vara av hela den valda datam\u00e4ngden. F\u00f6r varje vy/zoom kommer 700 datapunkter att laddas. Om det finns fler \u00e4n 700 datapunkter registrerade f\u00f6r det valda tidsspannet kommer 700 punkter att skapas genom en genomsnittlig ber\u00e4kning av punkterna i det tidsspannet. P\u00e5 s\u00e5 s\u00e4tt kan mycket mindre data anv\u00e4ndas f\u00f6r att navigera i en stor datam\u00e4ngd. Exempelvis kan 4 m\u00e5naders data vara 10 megabyte om alla data laddas ner. N\u00e4r man tittar p\u00e5 en 4-m\u00e5nadersperiod \u00e4r det dock inte m\u00f6jligt att se varje datapunkt i de 10 megabyte, och aggregering av punkter \u00e4r oundviklig. Med asynkron laddning av data h\u00e4mtar du bara det du ser. S\u00e5 i st\u00e4llet f\u00f6r att ladda ner 10 megabyte varje g\u00e5ng grafen laddas, laddas endast ~50 kb ner tills en ny zoomniv\u00e5 v\u00e4ljs, varvid endast ytterligare ~50 kb laddas ner. Note Grafer kr\u00e4ver m\u00e4tningar, d\u00e4rf\u00f6r m\u00e5ste minst en ing\u00e5ng/utg\u00e5ng/funktion/etc. l\u00e4ggas till och aktiveras f\u00f6r att data ska kunna visas.","title":"Asynchronous Graphs"},{"location":"Data-Viewing.sv/#instrumentbrada","text":"Sidan: Data -> instrumentbr\u00e4da Instrumentpanelen kan anv\u00e4ndas b\u00e5de f\u00f6r att visa data och f\u00f6r att manipulera systemet, tack vare de m\u00e5nga widgetar som finns tillg\u00e4ngliga. Flera instrumentpaneler kan skapas och l\u00e5sas f\u00f6r att f\u00f6rhindra att arrangemanget \u00e4ndras.","title":"instrumentbr\u00e4da"},{"location":"Data-Viewing.sv/#widgets","text":"Widgets \u00e4r element p\u00e5 instrumentpanelen som kan anv\u00e4ndas p\u00e5 olika s\u00e4tt, t.ex. f\u00f6r att visa data (diagram, indikatorer, m\u00e4tare osv.) eller f\u00f6r att interagera med systemet (manipulera utg\u00e5ngar, \u00e4ndra PWM-tj\u00e4nstg\u00f6ringscykel, fr\u00e5ga eller \u00e4ndra en databas osv.). Widgetar kan enkelt omorganiseras och \u00e4ndras i storlek genom att dra och sl\u00e4ppa dem. F\u00f6r en fullst\u00e4ndig lista \u00f6ver widgets som st\u00f6ds, se Supported Widgets .","title":"Widgets"},{"location":"Data-Viewing.sv/#anpassade-widgetar","text":"Det finns ett importsystem f\u00f6r anpassade widgetar i Mycodo som g\u00f6r det m\u00f6jligt att anv\u00e4nda anv\u00e4ndarskapade widgetar i Mycodo-systemet. Anpassade widgetar kan laddas upp p\u00e5 sidan [Gear Icon] -> Configure -> Custom Widgets . Efter import kommer de att vara tillg\u00e4ngliga f\u00f6r anv\u00e4ndning p\u00e5 sidan Setup -> Widget . Om du utvecklar en fungerande modul kan du \u00f6verv\u00e4ga att skapa ett nytt GitHub-\u00e4rende eller en pull request, s\u00e5 att den kan inkluderas i den inbyggda upps\u00e4ttningen. \u00d6ppna n\u00e5gon av de inbyggda widgetmoduler som finns i katalogen Mycodo/mycodo/widgets f\u00f6r att f\u00e5 exempel p\u00e5 korrekt formatering. Det finns ocks\u00e5 exempel p\u00e5 anpassade widgets i katalogen Mycodo/mycodo/widgets/examples . F\u00f6r att skapa en anpassad widgetmodul kr\u00e4vs ofta en specifik placering och utf\u00f6rande av Javascript. Flera variabler skapades i varje modul f\u00f6r att l\u00f6sa detta och f\u00f6ljer f\u00f6ljande korta struktur f\u00f6r den instrumentbr\u00e4dsida som skulle genereras n\u00e4r flera widgetar visas. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Anpassade widgetar"},{"location":"Data-Viewing.tr/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska \u4e2d\u6587 Live Measurements ~ Page: Data -> Live Measurements Canl\u0131 \u00d6l\u00e7\u00fcmler sayfas\u0131, bir kullan\u0131c\u0131n\u0131n Mycodo'ya giri\u015f yapt\u0131ktan sonra g\u00f6rd\u00fc\u011f\u00fc ilk sayfad\u0131r. Giri\u015f ve Fonksiyon kontrol\u00f6rlerinden al\u0131nan mevcut \u00f6l\u00e7\u00fcmleri g\u00f6r\u00fcnt\u00fcler. Canl\u0131` sayfas\u0131nda hi\u00e7bir \u015fey g\u00f6r\u00fcnt\u00fclenmiyorsa, bir Giri\u015f veya Fonksiyon kontrol\u00f6r\u00fcn\u00fcn hem do\u011fru yap\u0131land\u0131r\u0131ld\u0131\u011f\u0131ndan hem de etkinle\u015ftirildi\u011finden emin olun. Veriler \u00f6l\u00e7\u00fcm veritaban\u0131ndan otomatik olarak sayfada g\u00fcncellenecektir. Asynchronous Graphs ~ Page: Veri -> Asynchronous Graphs Senkron Grafik olarak g\u00f6r\u00fcnt\u00fclemek i\u00e7in \u00e7ok veri ve i\u015flemci yo\u011fun olabilecek nispeten uzun zaman dilimlerini (haftalar/aylar/y\u0131llar) kapsayan veri k\u00fcmelerini g\u00f6r\u00fcnt\u00fclemek i\u00e7in yararl\u0131 olan bir grafik veri ekran\u0131. Bir zaman dilimi se\u00e7ti\u011finizde, e\u011fer varsa, o zaman aral\u0131\u011f\u0131ndaki veriler y\u00fcklenecektir. \u0130lk g\u00f6r\u00fcn\u00fcm se\u00e7ilen veri setinin tamam\u0131na ait olacakt\u0131r. Her g\u00f6r\u00fcn\u00fcm/yak\u0131nla\u015ft\u0131rma i\u00e7in 700 veri noktas\u0131 y\u00fcklenecektir. Se\u00e7ilen zaman aral\u0131\u011f\u0131 i\u00e7in 700'den fazla veri noktas\u0131 kaydedilmi\u015fse, 700 nokta o zaman aral\u0131\u011f\u0131ndaki noktalar\u0131n ortalamas\u0131ndan olu\u015fturulacakt\u0131r. Bu, b\u00fcy\u00fck bir veri setinde gezinmek i\u00e7in \u00e7ok daha az verinin kullan\u0131lmas\u0131n\u0131 sa\u011flar. \u00d6rne\u011fin, 4 ayl\u0131k verinin tamam\u0131 indirilirse 10 megabayt olabilir. Ancak, 4 ayl\u0131k bir s\u00fcreyi g\u00f6r\u00fcnt\u00fclerken, bu 10 megabayt\u0131n her veri noktas\u0131n\u0131 g\u00f6rmek m\u00fcmk\u00fcn de\u011fildir ve noktalar\u0131n toplanmas\u0131 ka\u00e7\u0131n\u0131lmazd\u0131r. E\u015fzamans\u0131z veri y\u00fcklemesi ile yaln\u0131zca g\u00f6rd\u00fc\u011f\u00fcn\u00fcz kadar\u0131n\u0131 indirirsiniz. B\u00f6ylece, her grafik y\u00fcklemesinde 10 megabayt indirmek yerine, yeni bir yak\u0131nla\u015ft\u0131rma seviyesi se\u00e7ilene kadar yaln\u0131zca ~50kb indirilir ve bu s\u0131rada yaln\u0131zca ~50kb daha indirilir. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data. G\u00f6sterge Tablosu ~ Page: Veri -> G\u00f6sterge Tablosu G\u00f6sterge paneli, mevcut \u00e7ok say\u0131da g\u00f6sterge paneli widget'\u0131 sayesinde hem verileri g\u00f6r\u00fcnt\u00fclemek hem de sistemi manip\u00fcle etmek i\u00e7in kullan\u0131labilir. Birden fazla g\u00f6sterge tablosu olu\u015fturulabilir ve d\u00fczenlemenin de\u011fi\u015ftirilmesini \u00f6nlemek i\u00e7in kilitlenebilir. Widgets ~ Pencere \u00f6\u011feleri, G\u00f6sterge Tablosunda veri g\u00f6r\u00fcnt\u00fcleme (grafikler, g\u00f6stergeler, g\u00f6stergeler, vb.) veya sistemle etkile\u015fim (\u00e7\u0131k\u0131\u015flar\u0131 manip\u00fcle etme, PWM g\u00f6rev d\u00f6ng\u00fcs\u00fcn\u00fc de\u011fi\u015ftirme, bir veritaban\u0131n\u0131 sorgulama veya de\u011fi\u015ftirme, vb.) Pencere \u00f6\u011feleri s\u00fcr\u00fcklenip b\u0131rak\u0131larak kolayca yeniden d\u00fczenlenebilir ve yeniden boyutland\u0131r\u0131labilir. Desteklenen Pencere Ara\u00e7lar\u0131n\u0131n tam listesi i\u00e7in Desteklenen Pencere Ara\u00e7lar\u0131 b\u00f6l\u00fcm\u00fcne bak\u0131n. Custom Widgets ~ There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.tr/#live-measurements","text":"Page: Data -> Live Measurements Canl\u0131 \u00d6l\u00e7\u00fcmler sayfas\u0131, bir kullan\u0131c\u0131n\u0131n Mycodo'ya giri\u015f yapt\u0131ktan sonra g\u00f6rd\u00fc\u011f\u00fc ilk sayfad\u0131r. Giri\u015f ve Fonksiyon kontrol\u00f6rlerinden al\u0131nan mevcut \u00f6l\u00e7\u00fcmleri g\u00f6r\u00fcnt\u00fcler. Canl\u0131` sayfas\u0131nda hi\u00e7bir \u015fey g\u00f6r\u00fcnt\u00fclenmiyorsa, bir Giri\u015f veya Fonksiyon kontrol\u00f6r\u00fcn\u00fcn hem do\u011fru yap\u0131land\u0131r\u0131ld\u0131\u011f\u0131ndan hem de etkinle\u015ftirildi\u011finden emin olun. Veriler \u00f6l\u00e7\u00fcm veritaban\u0131ndan otomatik olarak sayfada g\u00fcncellenecektir.","title":"Live Measurements"},{"location":"Data-Viewing.tr/#asynchronous-graphs","text":"Page: Veri -> Asynchronous Graphs Senkron Grafik olarak g\u00f6r\u00fcnt\u00fclemek i\u00e7in \u00e7ok veri ve i\u015flemci yo\u011fun olabilecek nispeten uzun zaman dilimlerini (haftalar/aylar/y\u0131llar) kapsayan veri k\u00fcmelerini g\u00f6r\u00fcnt\u00fclemek i\u00e7in yararl\u0131 olan bir grafik veri ekran\u0131. Bir zaman dilimi se\u00e7ti\u011finizde, e\u011fer varsa, o zaman aral\u0131\u011f\u0131ndaki veriler y\u00fcklenecektir. \u0130lk g\u00f6r\u00fcn\u00fcm se\u00e7ilen veri setinin tamam\u0131na ait olacakt\u0131r. Her g\u00f6r\u00fcn\u00fcm/yak\u0131nla\u015ft\u0131rma i\u00e7in 700 veri noktas\u0131 y\u00fcklenecektir. Se\u00e7ilen zaman aral\u0131\u011f\u0131 i\u00e7in 700'den fazla veri noktas\u0131 kaydedilmi\u015fse, 700 nokta o zaman aral\u0131\u011f\u0131ndaki noktalar\u0131n ortalamas\u0131ndan olu\u015fturulacakt\u0131r. Bu, b\u00fcy\u00fck bir veri setinde gezinmek i\u00e7in \u00e7ok daha az verinin kullan\u0131lmas\u0131n\u0131 sa\u011flar. \u00d6rne\u011fin, 4 ayl\u0131k verinin tamam\u0131 indirilirse 10 megabayt olabilir. Ancak, 4 ayl\u0131k bir s\u00fcreyi g\u00f6r\u00fcnt\u00fclerken, bu 10 megabayt\u0131n her veri noktas\u0131n\u0131 g\u00f6rmek m\u00fcmk\u00fcn de\u011fildir ve noktalar\u0131n toplanmas\u0131 ka\u00e7\u0131n\u0131lmazd\u0131r. E\u015fzamans\u0131z veri y\u00fcklemesi ile yaln\u0131zca g\u00f6rd\u00fc\u011f\u00fcn\u00fcz kadar\u0131n\u0131 indirirsiniz. B\u00f6ylece, her grafik y\u00fcklemesinde 10 megabayt indirmek yerine, yeni bir yak\u0131nla\u015ft\u0131rma seviyesi se\u00e7ilene kadar yaln\u0131zca ~50kb indirilir ve bu s\u0131rada yaln\u0131zca ~50kb daha indirilir. Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data.","title":"Asynchronous Graphs"},{"location":"Data-Viewing.tr/#gosterge-tablosu","text":"Page: Veri -> G\u00f6sterge Tablosu G\u00f6sterge paneli, mevcut \u00e7ok say\u0131da g\u00f6sterge paneli widget'\u0131 sayesinde hem verileri g\u00f6r\u00fcnt\u00fclemek hem de sistemi manip\u00fcle etmek i\u00e7in kullan\u0131labilir. Birden fazla g\u00f6sterge tablosu olu\u015fturulabilir ve d\u00fczenlemenin de\u011fi\u015ftirilmesini \u00f6nlemek i\u00e7in kilitlenebilir.","title":"G\u00f6sterge Tablosu"},{"location":"Data-Viewing.tr/#widgets","text":"Pencere \u00f6\u011feleri, G\u00f6sterge Tablosunda veri g\u00f6r\u00fcnt\u00fcleme (grafikler, g\u00f6stergeler, g\u00f6stergeler, vb.) veya sistemle etkile\u015fim (\u00e7\u0131k\u0131\u015flar\u0131 manip\u00fcle etme, PWM g\u00f6rev d\u00f6ng\u00fcs\u00fcn\u00fc de\u011fi\u015ftirme, bir veritaban\u0131n\u0131 sorgulama veya de\u011fi\u015ftirme, vb.) Pencere \u00f6\u011feleri s\u00fcr\u00fcklenip b\u0131rak\u0131larak kolayca yeniden d\u00fczenlenebilir ve yeniden boyutland\u0131r\u0131labilir. Desteklenen Pencere Ara\u00e7lar\u0131n\u0131n tam listesi i\u00e7in Desteklenen Pencere Ara\u00e7lar\u0131 b\u00f6l\u00fcm\u00fcne bak\u0131n.","title":"Widgets"},{"location":"Data-Viewing.tr/#custom-widgets","text":"There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Custom Widgets"},{"location":"Data-Viewing.zh/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u5b9e\u65f6\u6d4b\u91cf ~ Page: Data -> Live Measurements \u5b9e\u65f6\u6d4b\u91cf \"\u9875\u9762\u662f\u7528\u6237\u767b\u5f55Mycodo\u540e\u770b\u5230\u7684\u7b2c\u4e00\u4e2a\u9875\u9762\u3002\u5b83\u5c06\u663e\u793a\u5f53\u524d\u4ece\u8f93\u5165\u548c\u529f\u80fd\u63a7\u5236\u5668\u83b7\u5f97\u7684\u6d4b\u91cf\u7ed3\u679c\u3002\u5982\u679c \"\u5b9e\u65f6 \"\u9875\u9762\u4e0a\u6ca1\u6709\u663e\u793a\uff0c\u8bf7\u786e\u4fdd\u8f93\u5165\u6216\u529f\u80fd\u63a7\u5236\u5668\u914d\u7f6e\u6b63\u786e\u5e76\u88ab\u6fc0\u6d3b\u3002\u6570\u636e\u5c06\u4ece\u6d4b\u91cf\u6570\u636e\u5e93\u4e2d\u81ea\u52a8\u66f4\u65b0\u5230\u8be5\u9875\u9762\u4e0a\u3002 \u5f02\u6b65 ~ Page: \u6570\u636e -> \u5f02\u6b65 \u4e00\u79cd\u56fe\u5f62\u5316\u7684\u6570\u636e\u663e\u793a\uff0c\u5bf9\u4e8e\u67e5\u770b\u8de8\u5ea6\u76f8\u5bf9\u8f83\u957f\u7684\u65f6\u95f4\u6bb5\uff08\u5468/\u6708/\u5e74\uff09\u7684\u6570\u636e\u96c6\u5f88\u6709\u7528\uff0c\u5982\u679c\u4ee5\u540c\u6b65\u56fe\u7684\u5f62\u5f0f\u67e5\u770b\uff0c\u53ef\u80fd\u4f1a\u975e\u5e38\u8017\u8d39\u6570\u636e\u548c\u5904\u7406\u5668\u3002\u9009\u62e9\u4e00\u4e2a\u65f6\u95f4\u6846\u67b6\uff0c\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u6570\u636e\u5c06\u4ece\u8be5\u65f6\u95f4\u6bb5\u52a0\u8f7d\u3002\u7b2c\u4e00\u4e2a\u89c6\u56fe\u5c06\u662f\u6574\u4e2a\u9009\u5b9a\u7684\u6570\u636e\u96c6\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u89c6\u56fe/\u7f29\u653e\uff0c700\u4e2a\u6570\u636e\u70b9\u5c06\u88ab\u52a0\u8f7d\u3002\u5982\u679c\u6240\u9009\u7684\u65f6\u95f4\u8de8\u5ea6\u6709\u8d85\u8fc7700\u4e2a\u6570\u636e\u70b9\uff0c700\u4e2a\u70b9\u5c06\u4ece\u8be5\u65f6\u95f4\u8de8\u5ea6\u7684\u70b9\u7684\u5e73\u5747\u6570\u4e2d\u4ea7\u751f\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u5c11\u5f97\u591a\u7684\u6570\u636e\u6765\u6d4f\u89c8\u4e00\u4e2a\u5927\u7684\u6570\u636e\u96c6\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5168\u90e8\u4e0b\u8f7d\uff0c4\u4e2a\u6708\u7684\u6570\u636e\u53ef\u80fd\u662f10\u5146\u5b57\u8282\u3002\u7136\u800c\uff0c\u5f53\u67e5\u770b4\u4e2a\u6708\u7684\u65f6\u95f4\u8de8\u5ea6\u65f6\uff0c\u4e0d\u53ef\u80fd\u770b\u5230\u8fd910\u5146\u5b57\u8282\u7684\u6bcf\u4e00\u4e2a\u6570\u636e\u70b9\uff0c\u70b9\u7684\u805a\u96c6\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\u901a\u8fc7\u6570\u636e\u7684\u5f02\u6b65\u52a0\u8f7d\uff0c\u4f60\u53ea\u4e0b\u8f7d\u4f60\u6240\u770b\u5230\u7684\u4e1c\u897f\u3002\u56e0\u6b64\uff0c\u6bcf\u6b21\u52a0\u8f7d\u56fe\u8868\u90fd\u8981\u4e0b\u8f7d10\u5146\u5b57\u8282\u7684\u6570\u636e\uff0c\u800c\u5728\u9009\u62e9\u65b0\u7684\u7f29\u653e\u7ea7\u522b\u4e4b\u524d\uff0c\u53ea\u4e0b\u8f7d\u7ea650kb\u7684\u6570\u636e\uff0c\u8fd9\u65f6\u53c8\u53ea\u4e0b\u8f7d\u7ea650kb\u7684\u6570\u636e\u3002 Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data. \u4eea\u8868\u677f ~ Page: \u6570\u636e -> \u4eea\u8868\u677f \u7531\u4e8e\u6709\u8bb8\u591a\u4eea\u8868\u76d8\u90e8\u4ef6\u53ef\u7528\uff0c\u4eea\u8868\u76d8\u65e2\u53ef\u7528\u4e8e\u67e5\u770b\u6570\u636e\uff0c\u4e5f\u53ef\u7528\u4e8e\u64cd\u7eb5\u7cfb\u7edf\u3002\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u4eea\u8868\u76d8\uff0c\u4e5f\u53ef\u4ee5\u9501\u5b9a\u4ee5\u9632\u6b62\u6539\u53d8\u5b89\u6392\u3002 Widgets ~ \u90e8\u4ef6\u662f\u4eea\u8868\u677f\u4e0a\u7684\u5143\u7d20\uff0c\u6709\u591a\u79cd\u7528\u9014\uff0c\u5982\u67e5\u770b\u6570\u636e\uff08\u56fe\u8868\u3001\u6307\u6807\u3001\u4eea\u8868\u7b49\uff09\u6216\u4e0e\u7cfb\u7edf\u4e92\u52a8\uff08\u64cd\u7eb5\u8f93\u51fa\u3001\u6539\u53d8PWM\u5360\u7a7a\u6bd4\u3001\u67e5\u8be2\u6216\u4fee\u6539\u6570\u636e\u5e93\u7b49\uff09\u3002\u5c0f\u5de5\u5177\u53ef\u4ee5\u901a\u8fc7\u62d6\u653e\u8f7b\u677e\u5730\u91cd\u65b0\u5b89\u6392\u548c\u8c03\u6574\u5927\u5c0f\u3002\u5173\u4e8e\u652f\u6301\u7684Widgets\u7684\u5b8c\u6574\u5217\u8868\uff0c\u89c1[\u652f\u6301\u7684 Widgets \u3002 Custom Widgets ~ There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Data Viewing"},{"location":"Data-Viewing.zh/#_1","text":"Page: Data -> Live Measurements \u5b9e\u65f6\u6d4b\u91cf \"\u9875\u9762\u662f\u7528\u6237\u767b\u5f55Mycodo\u540e\u770b\u5230\u7684\u7b2c\u4e00\u4e2a\u9875\u9762\u3002\u5b83\u5c06\u663e\u793a\u5f53\u524d\u4ece\u8f93\u5165\u548c\u529f\u80fd\u63a7\u5236\u5668\u83b7\u5f97\u7684\u6d4b\u91cf\u7ed3\u679c\u3002\u5982\u679c \"\u5b9e\u65f6 \"\u9875\u9762\u4e0a\u6ca1\u6709\u663e\u793a\uff0c\u8bf7\u786e\u4fdd\u8f93\u5165\u6216\u529f\u80fd\u63a7\u5236\u5668\u914d\u7f6e\u6b63\u786e\u5e76\u88ab\u6fc0\u6d3b\u3002\u6570\u636e\u5c06\u4ece\u6d4b\u91cf\u6570\u636e\u5e93\u4e2d\u81ea\u52a8\u66f4\u65b0\u5230\u8be5\u9875\u9762\u4e0a\u3002","title":"\u5b9e\u65f6\u6d4b\u91cf"},{"location":"Data-Viewing.zh/#_2","text":"Page: \u6570\u636e -> \u5f02\u6b65 \u4e00\u79cd\u56fe\u5f62\u5316\u7684\u6570\u636e\u663e\u793a\uff0c\u5bf9\u4e8e\u67e5\u770b\u8de8\u5ea6\u76f8\u5bf9\u8f83\u957f\u7684\u65f6\u95f4\u6bb5\uff08\u5468/\u6708/\u5e74\uff09\u7684\u6570\u636e\u96c6\u5f88\u6709\u7528\uff0c\u5982\u679c\u4ee5\u540c\u6b65\u56fe\u7684\u5f62\u5f0f\u67e5\u770b\uff0c\u53ef\u80fd\u4f1a\u975e\u5e38\u8017\u8d39\u6570\u636e\u548c\u5904\u7406\u5668\u3002\u9009\u62e9\u4e00\u4e2a\u65f6\u95f4\u6846\u67b6\uff0c\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u6570\u636e\u5c06\u4ece\u8be5\u65f6\u95f4\u6bb5\u52a0\u8f7d\u3002\u7b2c\u4e00\u4e2a\u89c6\u56fe\u5c06\u662f\u6574\u4e2a\u9009\u5b9a\u7684\u6570\u636e\u96c6\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u89c6\u56fe/\u7f29\u653e\uff0c700\u4e2a\u6570\u636e\u70b9\u5c06\u88ab\u52a0\u8f7d\u3002\u5982\u679c\u6240\u9009\u7684\u65f6\u95f4\u8de8\u5ea6\u6709\u8d85\u8fc7700\u4e2a\u6570\u636e\u70b9\uff0c700\u4e2a\u70b9\u5c06\u4ece\u8be5\u65f6\u95f4\u8de8\u5ea6\u7684\u70b9\u7684\u5e73\u5747\u6570\u4e2d\u4ea7\u751f\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u5c11\u5f97\u591a\u7684\u6570\u636e\u6765\u6d4f\u89c8\u4e00\u4e2a\u5927\u7684\u6570\u636e\u96c6\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5168\u90e8\u4e0b\u8f7d\uff0c4\u4e2a\u6708\u7684\u6570\u636e\u53ef\u80fd\u662f10\u5146\u5b57\u8282\u3002\u7136\u800c\uff0c\u5f53\u67e5\u770b4\u4e2a\u6708\u7684\u65f6\u95f4\u8de8\u5ea6\u65f6\uff0c\u4e0d\u53ef\u80fd\u770b\u5230\u8fd910\u5146\u5b57\u8282\u7684\u6bcf\u4e00\u4e2a\u6570\u636e\u70b9\uff0c\u70b9\u7684\u805a\u96c6\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\u901a\u8fc7\u6570\u636e\u7684\u5f02\u6b65\u52a0\u8f7d\uff0c\u4f60\u53ea\u4e0b\u8f7d\u4f60\u6240\u770b\u5230\u7684\u4e1c\u897f\u3002\u56e0\u6b64\uff0c\u6bcf\u6b21\u52a0\u8f7d\u56fe\u8868\u90fd\u8981\u4e0b\u8f7d10\u5146\u5b57\u8282\u7684\u6570\u636e\uff0c\u800c\u5728\u9009\u62e9\u65b0\u7684\u7f29\u653e\u7ea7\u522b\u4e4b\u524d\uff0c\u53ea\u4e0b\u8f7d\u7ea650kb\u7684\u6570\u636e\uff0c\u8fd9\u65f6\u53c8\u53ea\u4e0b\u8f7d\u7ea650kb\u7684\u6570\u636e\u3002 Note Graphs require measurements, therefore at least one Input/Output/Function/etc. needs to be added and activated in order to display data.","title":"\u5f02\u6b65"},{"location":"Data-Viewing.zh/#_3","text":"Page: \u6570\u636e -> \u4eea\u8868\u677f \u7531\u4e8e\u6709\u8bb8\u591a\u4eea\u8868\u76d8\u90e8\u4ef6\u53ef\u7528\uff0c\u4eea\u8868\u76d8\u65e2\u53ef\u7528\u4e8e\u67e5\u770b\u6570\u636e\uff0c\u4e5f\u53ef\u7528\u4e8e\u64cd\u7eb5\u7cfb\u7edf\u3002\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u4eea\u8868\u76d8\uff0c\u4e5f\u53ef\u4ee5\u9501\u5b9a\u4ee5\u9632\u6b62\u6539\u53d8\u5b89\u6392\u3002","title":"\u4eea\u8868\u677f"},{"location":"Data-Viewing.zh/#widgets","text":"\u90e8\u4ef6\u662f\u4eea\u8868\u677f\u4e0a\u7684\u5143\u7d20\uff0c\u6709\u591a\u79cd\u7528\u9014\uff0c\u5982\u67e5\u770b\u6570\u636e\uff08\u56fe\u8868\u3001\u6307\u6807\u3001\u4eea\u8868\u7b49\uff09\u6216\u4e0e\u7cfb\u7edf\u4e92\u52a8\uff08\u64cd\u7eb5\u8f93\u51fa\u3001\u6539\u53d8PWM\u5360\u7a7a\u6bd4\u3001\u67e5\u8be2\u6216\u4fee\u6539\u6570\u636e\u5e93\u7b49\uff09\u3002\u5c0f\u5de5\u5177\u53ef\u4ee5\u901a\u8fc7\u62d6\u653e\u8f7b\u677e\u5730\u91cd\u65b0\u5b89\u6392\u548c\u8c03\u6574\u5927\u5c0f\u3002\u5173\u4e8e\u652f\u6301\u7684Widgets\u7684\u5b8c\u6574\u5217\u8868\uff0c\u89c1[\u652f\u6301\u7684 Widgets \u3002","title":"Widgets"},{"location":"Data-Viewing.zh/#custom-widgets","text":"There is a Custom Widget import system in Mycodo that allows user-created Widgets to be used in the Mycodo system. Custom Widgets can be uploaded on the [Gear Icon] -> Configure -> Custom Widgets page. After import, they will be available to use on the Setup -> Widget page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in Widget modules located in the directory Mycodo/mycodo/widgets for examples of the proper formatting. There are also example Custom Widgets in the directory Mycodo/mycodo/widgets/examples . Creating a custom widget module often requires specific placement and execution of Javascript. Several variables were created in each module to address this, and follow the following brief structure of the dashboard page that would be generated with multiple widgets being displayed. <html> <head> <title> Title </title> <script> {{ widget_1_dashboard_head }} {{ widget_2_dashboard_head }} </script> </head> <body> <div id= \"widget_1\" > <div id= \"widget_1_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_1_dashboard_body }} <script> $(document).ready(function() { {{ widget_1_dashboard_js_ready_end }} }); </script> </div> <div id= \"widget_2\" > <div id= \"widget_2_titlebar\" > {{ widget_dashboard_title_bar }} </div> {{ widget_2_dashboard_body }} <script> $(document).ready(function() { {{ widget_2_dashboard_js_ready_end }} }); </script> </div> <script> {{ widget_1_dashboard_js }} {{ widget_2_dashboard_js }} $(document).ready(function() { {{ widget_1_dashboard_js_ready }} {{ widget_2_dashboard_js_ready }} }); </script> </body> </html>","title":"Custom Widgets"},{"location":"Dependencies/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Page: [Gear Icon] -> Dependencies The dependency page allows viewing of dependency information and the ability to initiate their installation. This is not something you will need to normally do, as dependencies are installed on an as-needed basis. If an Input, Output, Function, or other device you're adding has unmet dependencies, you will be prompted to install them when you attempt to install that device.","title":"Dependencies (English)"},{"location":"Device-Notes/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. This information may not be current, so always reference and follow manufacturer recommendations for operating their devices. Edge Detection ~ The detection of a changing signal, for instance a simple switch completing a circuit, requires the use of edge detection. By detecting a rising edge (LOW to HIGH), a falling edge (HIGH to LOW), or both, actions or events can be triggered. The GPIO chosen to detect the signal should be equipped with an appropriate resistor that either pulls the GPIO up [to 5-volts] or down [to ground]. The option to enable the internal pull-up or pull-down resistors is not available for safety reasons. Use your own resistor to pull the GPIO high or low. Examples of devices that can be used with edge detection: simple switches and buttons, PIR motion sensors, reed switches, hall effect sensors, float switches, and more. Displays ~ There are only a few number fo displays that are supported. 16x2 and 20x4 character LCD displays with I2C backpacks and the 128x32 / 128x64 OLED displays are supported. The below image is the type of device with the I2C backpack that should be compatible. See Supported Functions for more information. Raspberry Pi ~ The Raspberry Pi has an integrated temperature sensor on the BCM2835 SoC that measure the temperature of the CPU/GPU. This is the easiest sensor to set up in Mycodo, as it is immediately available to be used. AM2315 ~ From @Theoi-Meteoroi on GitHub: I figured out why this [AM2315] sensor is unreliable with Rpi3 hardware I2C. It is among a number of I2C devices that really hates the BCM2835 clock stretching blunder (hardware bug: raspberrypi/linux#254 ). The wakeup attempts fail, consistently. I checked the bitstream with a sniffer, and see that the sensor may respond once out of 20 or so tries (or not at all) but only with a single byte returned. The solution is to use a software implementation of the I2C bus. You need to add pull-up resistors (4.7k is dandy) to 3.3v and install the i2c_gpio device overlay. Seems to work fine now, will run for a few days, but the CRC failures are gone and I get good readings, every time. And no twiddling the power for the sensor is required. To enable software I2C, add the following line to your /boot/config.txt dtoverlay=i2c-gpio,i2c_gpio_sda=23,i2c_gpio_scl=24,i2c_gpio_delay_us=4 After rebooting, a new I2C bus at /dev/i2c-3 should exist with SDA on pin 23 (BCM) and SCL on pin 24 (BCM). Make sure you add the appropriate pull-up resistors before connecting any devices. K-30 ~ Be very careful when connecting the K-30, as there is no reverse-voltage protection and improper connections could destroy your sensor. Wiring instructions for the Raspberry Pi can be found here . USB Device Persistence Across Reboots ~ From (#547) Theoi-Meteoroi on Github : Using USB devices, such as USB-to-serial interfaces (CP210x) to connect a sensor, while convenient, poses an issue if there are multiple devices when the system reboots. After a reboot, there is no guarantee the device will persist with the same name. For instance, if Sensor A is /dev/ttyUSB0 and Sensor B is /dev/ttyUSB1, after a reboot Sensor A may be /dev/ttyUSB1 and Sensor B may be /dev/ttyUSB0. This will cause Mycodo to query the wrong device for a measurement, potentially causing a mis-measurement, or worse, an incorrect measurement because the response is not from the correct sensor (I've seen my temperature sensor read 700+ degrees celsius because of this!). Follow the instructions below to alleviate this issue. I use udev to create a persistent device name ('/dev/dust-sensor') that will be linked to the /dev/ttyUSBn that is chosen at device arrival in the kernel. The only requirement is some attribute returned from the USB device that is unique. The common circumstance is that none of the attributes are unique and you get stuck with just VID and PID, which is ok as long as you don't have any other adapters that report the same VID and PID. If you have multiple adapters with the same VID and PID, then hopefully they have some unique attribute. This command will walk the attributes. Run on each USB device and then compare differences to possibly find some attribute to use. udevadm info --name=/dev/ttyUSB0 --attribute-walk I ended up using the serial number on the ZH03B to program the USB adapter serial field. This way guarantees unique serial numbers rather than me trying to remember what was the last serial number I used to increment by 1. When you plug a USB device in it can be enumerated to different device names by the operating system. To fix this problem for this sensor on linux, I changed attributes that make the connection unique. First - find the VID and PID for the USB device: pi @raspberry : ~ $ lsusb Bus 001 Device 008 : ID 10 c4 : ea60 Cygnal Integrated Products , Inc . CP210x UART Bridge / myAVR mySmartUSB light Bus 001 Device 003 : ID 0424 : ec00 Standard Microsystems Corp . SMSC9512 / 9514 Fast Ethernet Adapter Bus 001 Device 002 : ID 0424 : 9514 Standard Microsystems Corp . SMC9514 Hub Bus 001 Device 001 : ID 1 d6b : 0002 Linux Foundation 2.0 root hub In this case the Vendor ID is 10c4 The Product ID is ea60 Note If you have multiple devices and you find your IDs to be the same, you can change IDs with the Simplicity Studio Xpress Configurator tool (discussed starting on page 6 of the AN721: USBXpress Device Configuration and Programming Guide ). Since I changed the serial number field - this will be unique. pi @raspberry : ~ $ udevadm info -- name =/ dev / ttyUSB0 -- attribute - walk | grep serial SUBSYSTEMS == \"usb-serial\" ATTRS { serial } == \"ZH03B180904\" ATTRS { serial } == \"3f980000.usb\" Now I have an attribute to tell udev what to do. I create a file in /etc/udev/rules.d with a name like \"99-dustsensor.rules\". In that file I tell udev what device name to create when it sees this device plugged in: SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"10c4\", ATTRS{idProduct}==\"ea60\", ATTRS{serial}==\"ZH03B180904\" SYMLINK+=\"dust-sensor\" To test the new rule: pi @raspberry : / dev $ sudo udevadm trigger pi @raspberry : / dev $ ls - al dust - sensor lrwxrwxrwx 1 root root 7 Oct 6 21 : 04 dust - sensor -> ttyUSB0 Now, every time the dust sensor is plugged in, it shows up at /dev/dust-sensor Diagrams ~ DHT11 Diagrams ~ DS18B20 Diagrams ~ Raspberry Pi and Relay Diagrams ~ Raspberry Pi, 4 relays, 4 outlets, 1 DS18B20 sensor ~ Raspberry Pi, 8 relays, 8 outlets ~","title":"Device Notes"},{"location":"Device-Notes/#edge-detection","text":"The detection of a changing signal, for instance a simple switch completing a circuit, requires the use of edge detection. By detecting a rising edge (LOW to HIGH), a falling edge (HIGH to LOW), or both, actions or events can be triggered. The GPIO chosen to detect the signal should be equipped with an appropriate resistor that either pulls the GPIO up [to 5-volts] or down [to ground]. The option to enable the internal pull-up or pull-down resistors is not available for safety reasons. Use your own resistor to pull the GPIO high or low. Examples of devices that can be used with edge detection: simple switches and buttons, PIR motion sensors, reed switches, hall effect sensors, float switches, and more.","title":"Edge Detection"},{"location":"Device-Notes/#displays","text":"There are only a few number fo displays that are supported. 16x2 and 20x4 character LCD displays with I2C backpacks and the 128x32 / 128x64 OLED displays are supported. The below image is the type of device with the I2C backpack that should be compatible. See Supported Functions for more information.","title":"Displays"},{"location":"Device-Notes/#raspberry-pi","text":"The Raspberry Pi has an integrated temperature sensor on the BCM2835 SoC that measure the temperature of the CPU/GPU. This is the easiest sensor to set up in Mycodo, as it is immediately available to be used.","title":"Raspberry Pi"},{"location":"Device-Notes/#am2315","text":"From @Theoi-Meteoroi on GitHub: I figured out why this [AM2315] sensor is unreliable with Rpi3 hardware I2C. It is among a number of I2C devices that really hates the BCM2835 clock stretching blunder (hardware bug: raspberrypi/linux#254 ). The wakeup attempts fail, consistently. I checked the bitstream with a sniffer, and see that the sensor may respond once out of 20 or so tries (or not at all) but only with a single byte returned. The solution is to use a software implementation of the I2C bus. You need to add pull-up resistors (4.7k is dandy) to 3.3v and install the i2c_gpio device overlay. Seems to work fine now, will run for a few days, but the CRC failures are gone and I get good readings, every time. And no twiddling the power for the sensor is required. To enable software I2C, add the following line to your /boot/config.txt dtoverlay=i2c-gpio,i2c_gpio_sda=23,i2c_gpio_scl=24,i2c_gpio_delay_us=4 After rebooting, a new I2C bus at /dev/i2c-3 should exist with SDA on pin 23 (BCM) and SCL on pin 24 (BCM). Make sure you add the appropriate pull-up resistors before connecting any devices.","title":"AM2315"},{"location":"Device-Notes/#k-30","text":"Be very careful when connecting the K-30, as there is no reverse-voltage protection and improper connections could destroy your sensor. Wiring instructions for the Raspberry Pi can be found here .","title":"K-30"},{"location":"Device-Notes/#usb-device-persistence-across-reboots","text":"From (#547) Theoi-Meteoroi on Github : Using USB devices, such as USB-to-serial interfaces (CP210x) to connect a sensor, while convenient, poses an issue if there are multiple devices when the system reboots. After a reboot, there is no guarantee the device will persist with the same name. For instance, if Sensor A is /dev/ttyUSB0 and Sensor B is /dev/ttyUSB1, after a reboot Sensor A may be /dev/ttyUSB1 and Sensor B may be /dev/ttyUSB0. This will cause Mycodo to query the wrong device for a measurement, potentially causing a mis-measurement, or worse, an incorrect measurement because the response is not from the correct sensor (I've seen my temperature sensor read 700+ degrees celsius because of this!). Follow the instructions below to alleviate this issue. I use udev to create a persistent device name ('/dev/dust-sensor') that will be linked to the /dev/ttyUSBn that is chosen at device arrival in the kernel. The only requirement is some attribute returned from the USB device that is unique. The common circumstance is that none of the attributes are unique and you get stuck with just VID and PID, which is ok as long as you don't have any other adapters that report the same VID and PID. If you have multiple adapters with the same VID and PID, then hopefully they have some unique attribute. This command will walk the attributes. Run on each USB device and then compare differences to possibly find some attribute to use. udevadm info --name=/dev/ttyUSB0 --attribute-walk I ended up using the serial number on the ZH03B to program the USB adapter serial field. This way guarantees unique serial numbers rather than me trying to remember what was the last serial number I used to increment by 1. When you plug a USB device in it can be enumerated to different device names by the operating system. To fix this problem for this sensor on linux, I changed attributes that make the connection unique. First - find the VID and PID for the USB device: pi @raspberry : ~ $ lsusb Bus 001 Device 008 : ID 10 c4 : ea60 Cygnal Integrated Products , Inc . CP210x UART Bridge / myAVR mySmartUSB light Bus 001 Device 003 : ID 0424 : ec00 Standard Microsystems Corp . SMSC9512 / 9514 Fast Ethernet Adapter Bus 001 Device 002 : ID 0424 : 9514 Standard Microsystems Corp . SMC9514 Hub Bus 001 Device 001 : ID 1 d6b : 0002 Linux Foundation 2.0 root hub In this case the Vendor ID is 10c4 The Product ID is ea60 Note If you have multiple devices and you find your IDs to be the same, you can change IDs with the Simplicity Studio Xpress Configurator tool (discussed starting on page 6 of the AN721: USBXpress Device Configuration and Programming Guide ). Since I changed the serial number field - this will be unique. pi @raspberry : ~ $ udevadm info -- name =/ dev / ttyUSB0 -- attribute - walk | grep serial SUBSYSTEMS == \"usb-serial\" ATTRS { serial } == \"ZH03B180904\" ATTRS { serial } == \"3f980000.usb\" Now I have an attribute to tell udev what to do. I create a file in /etc/udev/rules.d with a name like \"99-dustsensor.rules\". In that file I tell udev what device name to create when it sees this device plugged in: SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"10c4\", ATTRS{idProduct}==\"ea60\", ATTRS{serial}==\"ZH03B180904\" SYMLINK+=\"dust-sensor\" To test the new rule: pi @raspberry : / dev $ sudo udevadm trigger pi @raspberry : / dev $ ls - al dust - sensor lrwxrwxrwx 1 root root 7 Oct 6 21 : 04 dust - sensor -> ttyUSB0 Now, every time the dust sensor is plugged in, it shows up at /dev/dust-sensor","title":"USB Device Persistence Across Reboots"},{"location":"Device-Notes/#diagrams","text":"","title":"Diagrams"},{"location":"Device-Notes/#dht11-diagrams","text":"","title":"DHT11 Diagrams"},{"location":"Device-Notes/#ds18b20-diagrams","text":"","title":"DS18B20 Diagrams"},{"location":"Device-Notes/#raspberry-pi-and-relay-diagrams","text":"","title":"Raspberry Pi and Relay Diagrams"},{"location":"Device-Notes/#raspberry-pi-4-relays-4-outlets-1-ds18b20-sensor","text":"","title":"Raspberry Pi, 4 relays, 4 outlets, 1 DS18B20 sensor"},{"location":"Device-Notes/#raspberry-pi-8-relays-8-outlets","text":"","title":"Raspberry Pi, 8 relays, 8 outlets"},{"location":"Energy-Usage/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Page: More -> Energy Usage There are two methods for calculating energy usage. The first relies on determining how long Outputs have been on. Based on this, if the number of Amps the output draws has been set in the output Settings, then the kWh and cost can be calculated. Discovering the number of amps the device draws can be accomplished by calculating this from the output typically given as watts on the device label, or with the use of a current clamp while the device is operating. The limitation of this method is PWM Outputs are not currently used to calculate these figures due to the difficulty determining the current consumption of devices driven by PWM signals. The second method for calculating energy consumption is more accurate and is the recommended method if you desire the most accurate estimation of energy consumption and cost. This method relies on an Input or Function measuring Amps. One way to do this is with the used of an analog-to-digital converter (ADC) that converts the voltage output from a transformer into current (Amps). One wire from the AC line that powers your device(s) passes thorough the transformer and the device converts the current that passes through that wire into a voltage that corresponds to the amperage. For instance, the below sensor converts 0 -50 amps input to 0 - 5 volts output. An ADC receives this output as its input. One would set this conversion range in Mycodo and the calculated amperage will be stored. On the Energy Usage page, add this ADC Input measurement and a report summary will be generated. Keep in mind that for a particular period (for example, the past week) to be accurate, there needs to be a constant measurement of amps at a periodic rate. The faster the rate the more accurate the calculation will be. This is due to the amperage measurements being averaged for this period prior to calculating kWh and cost. If there is any time turing this period where amp measurements aren't being acquired when in fact there are devices consuming current, the calculation is likely to not be accurate. Greystone CS-650-50 AC Solid Core Current Sensor (Transformer) The following settings are for calculating energy usage from an amp measurement. For calculating based on Output duration, see Energy Usage Settings . Setting Description Select Amp Measurement This is a measurement with the amp (A) units that will be used to calculate energy usage.","title":"Energy Usage"},{"location":"Error-Codes/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Error Codes ~ Mycodo can return a number of different errors. Below are a few of the numbered errors that you may receive and information about how to diagnose the issue. Error 100 ~ Cannot set a value of ' X ' of type Y . Must be a float or string representing a float. Examples: Cannot set a value of ' 1.33.4 ' of type str . Cannot set a value of ' Output: 1.2 ' of type str . Cannot set a value of ' [1.3, 2.4] ' of type list . Cannot set a value of ' {\"output\": 1.99} ' of type dict . Cannot set a value of ' None ' of type Nonetype . This error occurs because the value provided to be stored in the influxdb time-series database is not a numerical value (integer or decimal/float) or it is not a string that represents a float (e.g. \"5\", \"3.14\"). There are a number of reasons why this error occurs, but the most common reason is the sensor being ready by an Input did not return a measurement when queried, or it returned something other than something that represents a numerical value, indicating the sensor is not working. This could be from a number of reasons, including but not limited to, faulty wiring, faulty/insufficient power supply, defective sensor, I2C bus hasn't been enabled, misconfigured settings, etc. Often, a sensor can fail or not get set up correctly during Input initialization when the daemon starts, leading to this error every measurement period. You will need to review the Daemon Log ( [Gear Icon] -> Mycodo Logs ) all the way back to when the daemon started (since this is when the Input started and potentially failed with an initial error that may be more informative). Enabling Log Level: Debug in the Controller setting can also be useful by providing debugging log lines (when available) in addition to the info and error log lines. Error 101 ~ X not set up properly Examples Device not set up Output channel Y not set up This error occurs when the Controller (Input/Output/Function/etc.) could not properly initialize the device or channel when it started and is now trying to access an uninitialized device or channel. For Inputs, this could be loading the 3rd party library used to communicate with the sensor. If there was an error loading the library, then the library cannot be used to communicate with the sensor. You will often need to review the Daemon Log ( [Gear Icon] -> Mycodo Logs ) for any relevant errors that occurred when the Controller was initially activated to determine the issue setting up the device. Try deactivating, then activating the device, to see the initialization error again. Enabling Log Level: Debug in the Controller setting can also be useful by providing debugging log lines (when available) in addition to the info and error log lines.","title":"Error Codes"},{"location":"Error-Codes/#error-codes","text":"Mycodo can return a number of different errors. Below are a few of the numbered errors that you may receive and information about how to diagnose the issue.","title":"Error Codes"},{"location":"Error-Codes/#error-100","text":"Cannot set a value of ' X ' of type Y . Must be a float or string representing a float. Examples: Cannot set a value of ' 1.33.4 ' of type str . Cannot set a value of ' Output: 1.2 ' of type str . Cannot set a value of ' [1.3, 2.4] ' of type list . Cannot set a value of ' {\"output\": 1.99} ' of type dict . Cannot set a value of ' None ' of type Nonetype . This error occurs because the value provided to be stored in the influxdb time-series database is not a numerical value (integer or decimal/float) or it is not a string that represents a float (e.g. \"5\", \"3.14\"). There are a number of reasons why this error occurs, but the most common reason is the sensor being ready by an Input did not return a measurement when queried, or it returned something other than something that represents a numerical value, indicating the sensor is not working. This could be from a number of reasons, including but not limited to, faulty wiring, faulty/insufficient power supply, defective sensor, I2C bus hasn't been enabled, misconfigured settings, etc. Often, a sensor can fail or not get set up correctly during Input initialization when the daemon starts, leading to this error every measurement period. You will need to review the Daemon Log ( [Gear Icon] -> Mycodo Logs ) all the way back to when the daemon started (since this is when the Input started and potentially failed with an initial error that may be more informative). Enabling Log Level: Debug in the Controller setting can also be useful by providing debugging log lines (when available) in addition to the info and error log lines.","title":"Error 100"},{"location":"Error-Codes/#error-101","text":"X not set up properly Examples Device not set up Output channel Y not set up This error occurs when the Controller (Input/Output/Function/etc.) could not properly initialize the device or channel when it started and is now trying to access an uninitialized device or channel. For Inputs, this could be loading the 3rd party library used to communicate with the sensor. If there was an error loading the library, then the library cannot be used to communicate with the sensor. You will often need to review the Daemon Log ( [Gear Icon] -> Mycodo Logs ) for any relevant errors that occurred when the Controller was initially activated to determine the issue setting up the device. Try deactivating, then activating the device, to see the initialization error again. Enabling Log Level: Debug in the Controller setting can also be useful by providing debugging log lines (when available) in addition to the info and error log lines.","title":"Error 101"},{"location":"Export-Import/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Page: More -> Export Import Measurements that fall within the selected date/time frame may be exported as CSV with their corresponding timestamps. Additionally, the entire measurement database (influxdb) may be exported as a ZIP archive backup. This ZIP may be imported back in any Mycodo system to restore these measurements. Note Measurements are associated with specific IDs that correspond to the Inputs/Outputs/etc. of your specific system. If you import measurements without also importing the associated Inputs/Outputs/etc., you will not see these measurements (e.g. on Dashboard Graphs). Therefore, it is recommended to export both Measurements and Settings at the same time so when you import them at a later time, you will have the devices associated with the measurements available on the system you're importing to. Note Importing measurement data will not destroy old data and will be added to the current measurement data. Mycodo settings may be exported as a ZIP file containing the Mycodo settings database (sqlite) and any custom Inputs, Outputs, Functions, and Widgets. This ZIP file may be used to restore these to another Mycodo install, as long as the Mycodo and database versions being imported are equal or less than the system you are installing them to. Additionally, you can only import to a system with the same major version number (the first number in the version format x.x.x). For instance, you can export settings from Mycodo 8.5.0 and import them into Mycodo 8.8.0, however you can not import them into Mycodo 8.2.0 (earlier version with same major version number), 7.0.0 (not the same major version number), or 9.0.0 (not the same major version number). Warning An import will override the current settings and custom controller data (i.e. destroying it). It is advised to make a Mycodo backup prior to attempting an import.","title":"Export/Import"},{"location":"Functions/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Page: Setup -> Function For a full list of supported Functions, see Supported Functions . Function controllers perform tasks that often involve the use of Inputs and Outputs. Note \"Last\" means the Function will only acquire the last (latest) measurement in the database. \"Past\" means the Function will acquire all measurements from the present until the \"Max Age (seconds)\" that's been set (e.g. if measurements are acquired every 10 seconds, and a Max Age is set to 60 seconds, there will on average be 6 measurements returned to the Function to operate with). Custom Functions ~ There is a Custom Function import system in Mycodo that allows user-created Functions to be used in the Mycodo system. Custom Functions can be uploaded on the [Gear Icon] -> Configure -> Custom Functions page. After import, they will be available to use on the Setup -> Function page. If you develop a working Function module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in modules located in the directory Mycodo/mycodo/functions for examples of the proper formatting. There are also example Custom Functions in the directory Mycodo/mycodo/functions/examples Additionally, I have another github repository devoted to Custom Modules that are not included in the built-in set, at kizniche/Mycodo-custom . For Functions that require new measurements/units, they can be added on the [Gear Icon] -> Configure -> Measurements page. PID Controller ~ A proportional-derivative-integral (PID) controller is a control loop feedback mechanism used throughout industry for controlling systems. It efficiently brings a measurable condition, such as the temperature, to a desired state and maintains it there with little overshoot and oscillation. A well-tuned PID controller will raise to the setpoint quickly, have minimal overshoot, and maintain the setpoint with little oscillation. PID settings may be changed while the PID is activated and the new settings will take effect immediately. If settings are changed while the controller is paused, the values will be used once the controller resumes operation. PID Controller Options ~ Setting Description Activate/Deactivate Turn a particular PID controller on or off. Pause When paused, the control variable will not be updated and the PID will not turn on the associated outputs. Settings can be changed without losing current PID output values. Hold When held, the control variable will not be updated but the PID will turn on the associated outputs, Settings can be changed without losing current PID output values. Resume Resume a PID controller from being held or paused. Direction This is the direction that you wish to regulate. For example, if you only require the temperature to be raised, set this to \"Up,\" but if you require regulation up and down, set this to \"Both.\" Period This is the duration between when the PID acquires a measurement, the PID is updated, and the output is modulated. Start Offset (seconds) Wait this duration before attempting the first calculation/measurement. Max Age The time (in seconds) that the sensor measurement age is required to be less than. If the measurement is not younger than this age, the measurement is thrown out and the PID will not actuate the output. This is a safety measure to ensure the PID is only using recent measurements. Setpoint This is the specific point you would like the environment to be regulated at. For example, if you would like the humidity regulated to 60%, enter 60. Band (+/- Setpoint) Hysteresis option. If set to a non-0 value, the setpoint will become a band, which will be between the band_max=setpoint+band and band_min=setpoint-band. If Raising, the PID will raise above band_max, then wait until the condition falls below band_min to resume regulation. If Lowering, the PID will lower below band_min, then wait until the condition rises above band_max to resume regulating. If set to Both, regulation will only occur to the outside min and max of the band, and cease when within the band. Set to 0 to disable Hysteresis. Store Lower as Negative Checking this will store all output variables (PID and output duration/duty cycle) as a negative values in the measurement database. This is useful for displaying graphs that indicate whether the PID is currently lowering or raising. Disable this if you desire all positive values to be stored in the measurement database. K P Gain Proportional coefficient (non-negative). Accounts for present values of the error. For example, if the error is large and positive, the control output will also be large and positive. K I Gain Integral coefficient (non-negative). Accounts for past values of the error. For example, if the current output is not sufficiently strong, the integral of the error will accumulate over time, and the controller will respond by applying a stronger action. K D Gain Derivative coefficient (non-negative). Accounts for predicted future values of the error, based on its current rate of change. Integrator Min The minimum allowed integrator value, for calculating Ki_total: (Ki_total = Ki * integrator; and PID output = Kp_total + Ki_total + Kd_total) Integrator Max The maximum allowed integrator value, for calculating Ki_total: (Ki_total = Ki * integrator; and PID output = Kp_total + Ki_total + Kd_total) Output (Raise/Lower) This is the output that will cause the particular environmental condition to rise or lower. In the case of raising the temperature, this may be a heating pad or coil. Min On Duration, Duty Cycle, or Amount (Raise/Lower) This is the minimum value that the PID output must be before Output (Lower) turns on. If the PID output is less than this value, Duration Outputs will not turn on, and PWM Outputs will be turned off unless Always Min is enabled. Max On Duration, Duty Cycle, or Amount (Raise/Lower) This is the maximum duration, volume, or duty cycle the Output (Raise) can be set to. If the PID output is greater than this value, the Max value set here will be used. Min Off Duration (Raise/Lower) For On/Off (Duration) Outputs, this is the minimum amount of time the Output must have been off for before it is allowed to turn back on. Ths is useful for devices that can be damaged by rapid power cycling (e.g. fridges). Always Min (Raise/Lower) For PWM Outputs only. If enabled, the duty cycle will never be set below the Min value. Setpoint Tracking Method Set a method to change the setpoint over time. PID Output Calculation ~ PID Controllers can control a number of different output types (e.g. duration, volume, or PWM duty cycle). For most output types, the PID output (Control Variable) will be proportional (i.e. Output Duration = PID Control Variable ). However, when outputting a duty cycle, it will be calculated as Duty Cycle = (Control Variable / Period) * 100 . Note Control Variable = P Output + I Output + D Output. Duty cycle is limited within the 0 - 100 % range and the set Min Duty Cycle and Max Duty Cycle. An output duration is limited by the set Min On Duration and Max On Duration, and output volume similarly. PID Tuning ~ PID tuning can be a complex process, depending on the output device(s) used and the environment or system under control. A system with large perturbations will be more difficult to control than one that is stable. Similarly, output devices that are unsuitable may make PID tuning difficult or impossible. Learning how PID controllers operate and the theory behind their tuning will not only better prepare you to operate a PID controller, but also in the development of your system and selection and implementation of the output devices used to regulate your system. PID Tuning Resources ~ Sous Vide PID Tuning and the Unexpected Electrical Fire PID Control Theory ~ The PID controller is the most common regulatory controller found in industrial settings, for it\"s ability to handle both simple and complex regulation. The PID controller has three paths, the proportional, integral, and derivative. The P roportional takes the error and multiplies it by the constant K P , to yield an output value. When the error is large, there will be a large proportional output. The I ntegral takes the error and multiplies it by K I , then integrates it (K I \u00b7 1/s). As the error changes over time, the integral will continually sum it and multiply it by the constant K I . The integral is used to remove perpetual error in the control system. If using K P alone produces an output that produces a perpetual error (i.e. if the sensor measurement never reaches the Set Point), the integral will increase the output until the error decreases and the Set Point is reached. The D erivative multiplies the error by K D , then differentiates it (K D \u00b7 s). When the error rate changes over time, the output signal will change. The faster the change in error, the larger the derivative path becomes, decreasing the output rate of change. This has the effect of dampening overshoot and undershoot (oscillation) of the Set Point. The K P , K I , and K D gains determine how much each of the P, I, and D variables influence the final PID output value. For instance, the greater the value of the gain, the more influence that variable has on the output. The output from the PID controller can be used in a number of ways. A simple use is to use this value as the number of seconds an output is turned on during a periodic interval (Period). For instance, if the Period is set to 30 seconds, the PID equation has the desired measurement and the actual measurement used to calculate the PID output every 30 seconds. The more the output is on during this period, the more it will affect the system. For example, an output on for 15 seconds every 30 seconds is at a 50 % duty cycle, and would affect the system roughly half as much as when the output is on for 30 seconds every 30 seconds, or at at 100 % duty cycle. The PID controller will calculate the output based on the amount of error (how far the actual measurement is from the desired measurement). If the error increases or persists, the output increases, causing the output to turn on for a longer duration within the Period, which usually in term causes the measured condition to change and the error to reduce. When the error reduces, the control variable decreases, meaning the output is turned on for a shorter duration of time. The ultimate goal of a well-tuned PID controller is to bring the actual measurement to the desired measurement quickly, with little overshoot, and maintain the setpoint with minimal oscillation. Using temperature as an example, the Process Variable (PV) is the measured temperature, the Setpoint (SP) is the desired temperature, and the Error (e) is the distance between the measured temperature and the desired temperature (indicating if the actual temperature is too hot or too cold and to what degree). The error is manipulated by each of the three PID components, producing an output, called the Manipulated Variable (MV) or Control Variable (CV). To allow control of how much each path contributes to the output value, each path is multiplied by a gain (represented by K P , K I , and K D ). By adjusting the gains, the sensitivity of the system to each path is affected. When all three paths are summed, the PID output is produced. If a gain is set to 0, that path does not contribute to the output and that path is essentially turned off. The output can be used a number of ways, however this controller was designed to use the output to affect the measured value (PV). This feedback loop, with a properly tuned PID controller, can achieve a set point in a short period of time, maintain regulation with little oscillation, and respond quickly to disturbance. Therefor, if one would be regulating temperature, the sensor would be a temperature sensor and the feedback device(s) would be able to heat and cool. If the temperature is lower than the Set Point, the output value would be positive and a heater would activate. The temperature would rise toward the desired temperature, causing the error to decrease and a lower output to be produced. This feedback loop would continue until the error reaches 0 (at which point the output would be 0). If the temperature continues to rise past the Set Point (this is may be acceptable, depending on the degree), the PID would produce a negative output, which could be used by the cooling device to bring the temperature back down, to reduce the error. If the temperature would normally lower without the aid of a cooling device, then the system can be simplified by omitting a cooler and allowing it to lower on its own. Implementing a controller that effectively utilizes K P , K I , and K D can be challenging. Furthermore, it is often unnecessary. For instance, the K I and K D can be set to 0, effectively turning them off and producing the very popular and simple P controller. Also popular is the PI controller. It is recommended to start with only K P activated, then experiment with K P and K I , before finally using all three. Because systems will vary (e.g. airspace volume, degree of insulation, and the degree of impact from the connected device, etc.), each path will need to be adjusted through experimentation to produce an effective output. Quick Setup Examples ~ These example setups are meant to illustrate how to configure regulation in particular directions, and not to achieve ideal values to configure your K P , K I , and K D gains. There are a number of online resources that discuss techniques and methods that have been developed to determine ideal PID values (such as here , here , here , here , and here ) and since there are no universal values that will work for every system, it is recommended to conduct your own research to understand the variables and essential to conduct your own experiments to effectively implement them. Provided merely as an example of the variance of PID values, one of my setups had temperature PID values (up regulation) of K P = 30, K I = 1.0, and K D = 0.5, and humidity PID values (up regulation) of K P = 1.0, K I = 0.2, and K D = 0.5. Furthermore, these values may not have been optimal but they worked well for the conditions of my environmental chamber. Exact Temperature Regulation ~ This will set up the system to raise and lower the temperature to a certain level with two regulatory devices (one that heats and one that cools). Add a sensor, then save the proper device and pin/address for each sensor and activate the sensor. Add two outputs, then save each GPIO and On Trigger state. Add a PID, then select the newly-created sensor. Change Setpoint to the desired temperature, Regulate Direction to \"Both\". Set Raise Output to the relay attached to the heating device and the Lower Relay to the relay attached to the cooling device. Set K P = 1, K I = 0, and K D = 0, then activate the PID. If the temperature is lower than the Set Point, the heater should activate at some interval determined by the PID controller until the temperature rises to the set point. If the temperature goes higher than the Set Point (or Set Point + Buffer), the cooling device will activate until the temperature returns to the set point. If the temperature is not reaching the Set Point after a reasonable amount of time, increase the K P value and see how that affects the system. Experiment with different configurations involving only Read Interval and K P to achieve a good regulation. Avoid changing the K I and K D from 0 until a working regulation is achieved with K P alone. View graphs in the 6 to 12 hour time span to identify how well the temperature is regulated to the Setpoint. What is meant by well-regulated will vary, depending on your specific application and tolerances. Most applications of a PID controller would like to see the proper temperature attained within a reasonable amount of time and with little oscillation around the Setpoint. Once regulation is achieved, experiment by reducing K P slightly (~25%) and increasing K I by a low amount to start, such as 0.1 (or lower, 0.01), then start the PID and observe how well the controller regulates. Slowly increase K I until regulation becomes both quick and with little oscillation. At this point, you should be fairly familiar with experimenting with the system and the K D value can be experimented with once both K P and K I have been tuned. High Temperature Regulation ~ Often the system can be simplified if two-way regulation is not needed. For instance, if cooling is unnecessary, this can be removed from the system and only up-regulation can be used. Use the same configuration as the Exact Temperature Regulation example, except change Regulate Direction to \"Raise\" and do not touch the \"Down Relay\" section. PID Autotune ~ Warning This is an experimental feature. It is best not used until you are familiar with the theory, operation, and tuning of a PID. The Autotune function is a standalone controller that is useful for determining appropriate Kp, Ki, and Kd gains for use in the a PID controller. The autotuner will manipulate an output and analyze the measured response in a particular environment/system. It will take several cycles of perturbing the system with the chosen output before enough data is available to calculate the PID gains. In order to use this feature, select a Measurement and an Output that can module the specific condition being measured. Then, configure the Noise Band and Outstep and activate the function. Log lines of the autotuner will appear in the daemon log ( [Gear Icon] -> Mycodo Logs -> Daemon Log ). While the autotune is being performed, it is recommended to create a dashboard graph that includes the Measurement and Output in order to see what the PID Autotuner is doing and to notice any potential issues with the autotune settings that have been configured. If the autotune is taking a long time to complete, there may not be enough stability in the system being manipulated to calculate a reliable set of PID gains. This may be because there are too many perturbations to the system, or conditions are changing too rapidly to acquire consistent measurement oscillations. If this is the case, try modifying your system to increase stability and yield consistent measurement oscillations. Once the autotune successfully completes, perturbations may be reintroduced in order to further tune the PID controller to handle them. Setting Description Measurement This is the Input or Function measurement that is measuring the specific condition that the Output will affect. For instance, this could be a temperature measurement and the output could be a heater. Output This is the Output that will affect the measurement when it's activated. The autotune function will periodically turn this output on in order to raise the measurement beyond the setpoint. Period This is the period of time between the Output being turned on. This should be set to the same Period you wish to use for your PID controller. A different Period can significantly affect the PID gains that the autotune produces. Setpoint This is the desired measurement condition value. For instance, if temperature is being measured, this should be set a several degrees higher than the current temperature so the output, when activated, will cause the temperature to rise beyond the setpoint. Noise Band This is the amount above the setpoint the measured condition must reach before the output turns off. This is also how much below the setpoint the measured condition must fall before the output turns back on. Outstep This is how many seconds the output will turn on every PID Period. For instance, to autotune with 50% power, ensure the Outstep is half the value of the PID Period. Direction This is the direction for which the Output will push the Measurement. For instance, a heater will raise temperature, whereas a cooler will lower temperature. Typical graph output will look like this: And typical Daemon Log output will look like this: 2018-08-04 23:32:20,876 - mycodo.pid_3b533dff - INFO - Activated in 187.2 ms 2018-08-04 23:32:20,877 - mycodo.pid_autotune - INFO - PID Autotune started 2018-08-04 23:33:50,823 - mycodo.pid_autotune - INFO - 2018-08-04 23:33:50,830 - mycodo.pid_autotune - INFO - Cycle: 19 2018-08-04 23:33:50,831 - mycodo.pid_autotune - INFO - switched state: relay step down 2018-08-04 23:33:50,832 - mycodo.pid_autotune - INFO - input: 32.52 2018-08-04 23:36:00,854 - mycodo.pid_autotune - INFO - 2018-08-04 23:36:00,860 - mycodo.pid_autotune - INFO - Cycle: 45 2018-08-04 23:36:00,862 - mycodo.pid_autotune - INFO - found peak: 34.03 2018-08-04 23:36:00,863 - mycodo.pid_autotune - INFO - peak count: 1 2018-08-04 23:37:20,802 - mycodo.pid_autotune - INFO - 2018-08-04 23:37:20,809 - mycodo.pid_autotune - INFO - Cycle: 61 2018-08-04 23:37:20,810 - mycodo.pid_autotune - INFO - switched state: relay step up 2018-08-04 23:37:20,811 - mycodo.pid_autotune - INFO - input: 31.28 2018-08-04 23:38:30,867 - mycodo.pid_autotune - INFO - 2018-08-04 23:38:30,874 - mycodo.pid_autotune - INFO - Cycle: 75 2018-08-04 23:38:30,876 - mycodo.pid_autotune - INFO - found peak: 32.17 2018-08-04 23:38:30,878 - mycodo.pid_autotune - INFO - peak count: 2 2018-08-04 23:38:40,852 - mycodo.pid_autotune - INFO - 2018-08-04 23:38:40,858 - mycodo.pid_autotune - INFO - Cycle: 77 2018-08-04 23:38:40,860 - mycodo.pid_autotune - INFO - switched state: relay step down 2018-08-04 23:38:40,861 - mycodo.pid_autotune - INFO - input: 32.85 2018-08-04 23:40:50,834 - mycodo.pid_autotune - INFO - 2018-08-04 23:40:50,835 - mycodo.pid_autotune - INFO - Cycle: 103 2018-08-04 23:40:50,836 - mycodo.pid_autotune - INFO - found peak: 33.93 2018-08-04 23:40:50,836 - mycodo.pid_autotune - INFO - peak count: 3 2018-08-04 23:42:05,799 - mycodo.pid_autotune - INFO - 2018-08-04 23:42:05,805 - mycodo.pid_autotune - INFO - Cycle: 118 2018-08-04 23:42:05,806 - mycodo.pid_autotune - INFO - switched state: relay step up 2018-08-04 23:42:05,807 - mycodo.pid_autotune - INFO - input: 31.27 2018-08-04 23:43:15,816 - mycodo.pid_autotune - INFO - 2018-08-04 23:43:15,822 - mycodo.pid_autotune - INFO - Cycle: 132 2018-08-04 23:43:15,824 - mycodo.pid_autotune - INFO - found peak: 32.09 2018-08-04 23:43:15,825 - mycodo.pid_autotune - INFO - peak count: 4 2018-08-04 23:43:25,790 - mycodo.pid_autotune - INFO - 2018-08-04 23:43:25,796 - mycodo.pid_autotune - INFO - Cycle: 134 2018-08-04 23:43:25,797 - mycodo.pid_autotune - INFO - switched state: relay step down 2018-08-04 23:43:25,798 - mycodo.pid_autotune - INFO - input: 32.76 2018-08-04 23:45:30,802 - mycodo.pid_autotune - INFO - 2018-08-04 23:45:30,808 - mycodo.pid_autotune - INFO - Cycle: 159 2018-08-04 23:45:30,810 - mycodo.pid_autotune - INFO - found peak: 33.98 2018-08-04 23:45:30,811 - mycodo.pid_autotune - INFO - peak count: 5 2018-08-04 23:45:30,812 - mycodo.pid_autotune - INFO - 2018-08-04 23:45:30,814 - mycodo.pid_autotune - INFO - amplitude: 0.9099999999999989 2018-08-04 23:45:30,815 - mycodo.pid_autotune - INFO - amplitude deviation: 0.06593406593406595 2018-08-04 23:46:40,851 - mycodo.pid_autotune - INFO - 2018-08-04 23:46:40,857 - mycodo.pid_autotune - INFO - Cycle: 173 2018-08-04 23:46:40,858 - mycodo.pid_autotune - INFO - switched state: relay step up 2018-08-04 23:46:40,859 - mycodo.pid_autotune - INFO - input: 31.37 2018-08-04 23:47:55,860 - mycodo.pid_autotune - INFO - 2018-08-04 23:47:55,866 - mycodo.pid_autotune - INFO - Cycle: 188 2018-08-04 23:47:55,868 - mycodo.pid_autotune - INFO - found peak: 32.36 2018-08-04 23:47:55,869 - mycodo.pid_autotune - INFO - peak count: 6 2018-08-04 23:47:55,870 - mycodo.pid_autotune - INFO - 2018-08-04 23:47:55,871 - mycodo.pid_autotune - INFO - amplitude: 0.9149999999999979 2018-08-04 23:47:55,872 - mycodo.pid_autotune - INFO - amplitude deviation: 0.032786885245900406 2018-08-04 23:47:55,873 - mycodo.pid_3b533dff - INFO - time: 16 min 2018-08-04 23:47:55,874 - mycodo.pid_3b533dff - INFO - state: succeeded 2018-08-04 23:47:55,874 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,875 - mycodo.pid_3b533dff - INFO - rule: ziegler-nichols 2018-08-04 23:47:55,876 - mycodo.pid_3b533dff - INFO - Kp: 0.40927018474290117 2018-08-04 23:47:55,877 - mycodo.pid_3b533dff - INFO - Ki: 0.05846588600007114 2018-08-04 23:47:55,879 - mycodo.pid_3b533dff - INFO - Kd: 0.7162385434443115 2018-08-04 23:47:55,880 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,881 - mycodo.pid_3b533dff - INFO - rule: tyreus-luyben 2018-08-04 23:47:55,887 - mycodo.pid_3b533dff - INFO - Kp: 0.3162542336649691 2018-08-04 23:47:55,889 - mycodo.pid_3b533dff - INFO - Ki: 0.010165091543194185 2018-08-04 23:47:55,890 - mycodo.pid_3b533dff - INFO - Kd: 0.7028026111719073 2018-08-04 23:47:55,891 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,892 - mycodo.pid_3b533dff - INFO - rule: ciancone-marlin 2018-08-04 23:47:55,892 - mycodo.pid_3b533dff - INFO - Kp: 0.21083615577664605 2018-08-04 23:47:55,893 - mycodo.pid_3b533dff - INFO - Ki: 0.06626133746674728 2018-08-04 23:47:55,893 - mycodo.pid_3b533dff - INFO - Kd: 0.3644161687558038 2018-08-04 23:47:55,894 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,894 - mycodo.pid_3b533dff - INFO - rule: pessen-integral 2018-08-04 23:47:55,895 - mycodo.pid_3b533dff - INFO - Kp: 0.49697093861638 2018-08-04 23:47:55,895 - mycodo.pid_3b533dff - INFO - Ki: 0.0887428626786794 2018-08-04 23:47:55,896 - mycodo.pid_3b533dff - INFO - Kd: 1.04627757151908 2018-08-04 23:47:55,896 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,897 - mycodo.pid_3b533dff - INFO - rule: some-overshoot 2018-08-04 23:47:55,898 - mycodo.pid_3b533dff - INFO - Kp: 0.23191977135431066 2018-08-04 23:47:55,898 - mycodo.pid_3b533dff - INFO - Ki: 0.03313066873337365 2018-08-04 23:47:55,899 - mycodo.pid_3b533dff - INFO - Kd: 1.0823160212047374 2018-08-04 23:47:55,899 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,900 - mycodo.pid_3b533dff - INFO - rule: no-overshoot 2018-08-04 23:47:55,900 - mycodo.pid_3b533dff - INFO - Kp: 0.1391518628125864 2018-08-04 23:47:55,901 - mycodo.pid_3b533dff - INFO - Ki: 0.01987840124002419 2018-08-04 23:47:55,901 - mycodo.pid_3b533dff - INFO - Kd: 0.6493896127228425 2018-08-04 23:47:55,902 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,902 - mycodo.pid_3b533dff - INFO - rule: brewing 2018-08-04 23:47:55,903 - mycodo.pid_3b533dff - INFO - Kp: 5.566074512503456 2018-08-04 23:47:55,904 - mycodo.pid_3b533dff - INFO - Ki: 0.11927040744014512 2018-08-04 23:47:55,904 - mycodo.pid_3b533dff - INFO - Kd: 4.101408080354794 Conditional ~ Conditional Functions are used to perform simple to complex actions based a user-generated Python code. Conditional Functions allow the execution of Python 3 code as well as the use of Conditions and Actions within your code to interact with Mycodo. Conditions typically acquire data from Mycodo, such as Input measurements, and Actions typically affect Mycodo, such as actuating an Output or pausing a PID controller. Each Condition and Action you add will have its own description and example code to demonstrate how to use it in your Python code. Note Timeout must be set longer than it takes your Run Python Code to execute (if Timeout is set too low, only part of your Run Python Code may execute). Note Period must be set longer than the time it takes for your Run Python Code to execute, otherwise it will execute again before the previous execution has finished. Note The code is executed within the same Python virtual environment that Mycodo runs from, therefore you must install Python libraries to this environment if you want them to be available to your code. This virtualenv is located at /opt/Mycodo/env and if you wanted to install, for example, \"my_library\" using pip, you would execute \"sudo /opt/Mycodo/env/bin/pip install my_library\". Conditional Options ~ Setting Description Import Python Code Python 3 code that is used for importing Python libraries. This is executed before the class is created when generating the Conditional Function code. Initialize Python Code Python 3 code that is executed during the initialization of the class, within __init__(). This is where variables are initialized that will be used within the class. Run Python Code Python 3 code that will be executed every set Period. This is where the Condtions and Actions are executed. Once a Condition or Action is added, the functions that can be executed for each will be shown above each Condition or Action. Status Python Code A dictionary can be returned that allows information to be passed to other controllers and widgets. For example, the Function Status Widget will display this information on the Dashboard. This code can be removed if you do not want to return any information. Period (seconds) The period (seconds) that the Run Python Code will be executed. Start Offset (seconds) The duration (seconds) to wait before executing the Conditional for the first after it is activated. Log Level: Debug Show debug lines in the daemon log. Message Includes Code Include the Python code in the message (self.message) that is passed to Actions. Conditions are functions that can be used within the Run Python Code, and return specific information. Condition Description Measurement (Single, Last) Acquires the latest measurement from an Input or device. Set Max Age (seconds) to restrict how long to accept values. If the latest value is older than this duration, \"None\" is returned. Measurement (Single, Past, Average) Acquires the past measurements from an Input or device, then averages them. Set Max Age (seconds) to restrict how long to accept values. If all values are older than this duration, \"None\" is returned. Measurement (Single, Past, Sum) Acquires the past measurements from an Input or device, then sums them. Set Max Age (seconds) to restrict how long to accept values. If all values are older than this duration, \"None\" is returned. Measurement (Multiple, Past) Acquires the past measurements from an Input or device. Set Max Age (seconds) to restrict how long to accept values. If no values are found in this duration, \"None\" is returned. This differs from the \"Measurement (Single)\" Condition because it returns a list of dictionaries with 'time' and 'value' key pairs. GPIO State Acquires the current GPIO state and returns 1 if HIGH or 0 if LOW. If the latest value is older than this duration, \"None\" is returned. Output State Returns 'on' if the output is currently on, and 'off' if it's currently off. Output Duration On Returns how long the output has currently been on, in seconds. Returns 0 if off. Controller Running Returns True if the controller is active, False if inactive. Max Age (seconds) The minimum age (seconds) the measurement can be. If the last measurement is older than this, \"None\" will be returned instead of a measurement. Conditional Setup Guide ~ Python 3 is the environment that these conditionals will be executed. The following functions can be used within your Python code. Note Python code indentations must use 4 spaces (not 2 spaces, tabs, or anything else). Function Description self.condition(\"{ID}\") Returns a measurement for the Condition with ID. self.condition_dict(\"{ID}\") Returns a dictionary of measurement for the Condition with ID. self.run_action(\"{ID}\") Executes the Action with ID. self.run_all_actions() Executes all actions. self.logger.info() Writes a log line to the Daemon log. \"info\" may also be changed to \"warning\", \"error\" or \"debug\". Debug log lines will only appear in the Daemon log when Logging Level: Debug is enabled for the Input. self.set_custom_option(\"option\", value) Writes the value to the database for retrieval later. The option argument should be a string, and value can be a string, integer, float, list, or dictionary. self.get_custom_option(\"option\") Reads the value from the database that was previously written with self.set_custom_option(). Returns None if the option is not found or there is no value. There are additional functions that can be used, but these must use the full UUID (not an abridged version as the functions above). See /opt/Mycodo/mycodo/mycodo_client.py for the functions available for use. These may be accessed via the 'control' object. An example, below, will return how long the output has been on (or 0 if it's currently off): output_on_seconds = control.output_sec_currently_on(\"1b6ada50-1e69-403a-9fa6-ec748b16dc23\") Since the Python code must be formatted properly, it's best to familiarize yourself with the basics of Python . Note There are two different IDs in use here, one set of IDs are found under the Conditions section of the Conditional Function, and one set of IDs are found under the Actions section of the Conditional Function. Read all of this section, including the examples, below, to fully understand how to properly set up a Conditional Function. Info If a measurement hasn't been acquired within the set Max Age , \"None\" will be returned when self.condition(\"{ID}\") is called in the code. It is very important that you account for this. All examples below incorporate a test for the measurement being None, and this should not be removed. If an error occurs (such as if the statement resolves to comparing None to a numerical value, such as \"if None < 23\"), then the code will stop there and an error will be logged in the daemon log. Accounting for None is useful for determining if an Input is no longer acquiring measurements (e.g. dead sensor, malfunction, etc.). To create a basic conditional, follow these steps, using the numbers in the screenshots, below, that correspond to the numbers in parentheses: Navigate to the Setup -> Function page. Select \"Controller: Conditional\", then click Add . Under Conditions, select a condition option, then click Add Condition . Configure the newly-added Condition then click Save . Under Actions, select an action option, then click Add Action . Configure the newly-added Action then click Save . Notice that each Condition and each Action has its own ID (underlined). The default Run Python Code contains placeholder IDs that need to be changed to your Condition and Action IDs. Change the ID in self.condition(\"asdf1234\") to your Condition ID. Change the ID in self.run_action(\"qwer5678\", message=message) to your Action ID. Click Save at the top of the Conditional. The logic used in the Run Python Code will need to be adjusted to suit your particular needs. Additionally, you may add more Conditions or Actions. See the Advanced Conditional code examples , below, for usage examples. If your Python code has been formatted correctly, your Conditional will save and it will be ready to activate. If an error is returned, your options will not have been saved. Inspect the error for which line is causing the issue and read the error message itself to try to understand what the problem is and how to fix it. There are an unfathomable number of ways to configure a Conditional, but this should hopefully get you started to developing one that suits your needs. Note Mycodo is constantly changing, so the screenshots below may not match what you see exactly. Be sure to read this entire section of the manual to understand how to use Conditional Functions. Beginner Conditional Run Python Code examples: Each self.condition(\"ID\") will return the most recent measurement obtained from that particular measurement under the Conditions section of the Conditional Function, as long as it's within the set Max Age. # Example 1, no measurement (i.e. None) returned # useful with the Email Notify Action to email when an Input stops working if self . condition ( \"asdf1234\" ) is None : self . run_all_actions () # Execute all configured actions # Example 2, test two measurement conditions measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: # If neither measurement is None (both are working) if measure_1 < 20 and measure_2 > 10 : # If measure_1 is less than 20 and measure_2 is greater than 10 self . run_all_actions () # Execute all configured actions # Example 3, test two measurements and sum of measurements measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: sum_ = measure_1 + measure_2 if measure_1 > 2 and 10 < measure_2 < 23 and sum_ < 30.5 : self . run_all_actions () # Example 4, combine into one conditional measurement = self . condition ( \"asdf1234\" ) if measurement is not None and 20 < measurement < 30 : # combine conditions self . run_all_actions () # Example 5, test two measurements # convert Edge Input from 0 or 1 to True or False measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if bool ( measure_1 ) and measure_2 > 10 : self . run_all_actions () # Example 6, test measurement with \"or\" and a rounded measurement measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if measure_1 > 20 or int ( round ( measure_2 )) in [ 20 , 21 , 22 ]: self . run_all_actions () # Example 7, use self to store variables across multiple executions measurement = self . condition ( \"asdf1234\" ) if not hasattr ( self , \"stored_measurement\" ): # Initialize variable self . stored_measurement = measurement if measurement is not None : if abs ( measurement - self . stored_measurement ) > 10 : self . run_all_actions () # if difference is greater than 10 self . stored_measurement = measurement # Store measurement The \"Measurement (Multiple)\" Condition is useful if you desire to check if a particular value has been stored in any of the past measurements (within the set Max Age), not just the last measurement. This is useful if you have an alert system that each numerical value represents a different alert that you need to check each past value if it occurred. Here is an example that retrieves all measurements from the past 30 minutes and checks if any of the measurements in the returned list is equal to \"119\". If \"119\" exists, the Actions are executed and break is used to exit the for loop. # Example 1, find a measurement in the past 30 minutes (Max Age: 1800 seconds) measurements = self . condition_dict ( \"asdf1234\" ) if measurements : # If the list is not empty for each_measure in measurements : # Loop through each measurement in the list if each_measure [ 'value' ] == 119 : self . logger . info ( \"Alert 119 found at timestamp {time} \" . format ( time = each_measure [ 'time' ])) self . run_all_actions () break # Exit the for loop Advanced Conditional Run Python Code examples: These examples expand on the beginner examples, above, by activating specific actions. The following examples will reference actions with IDs that can be found under the Actions section of the Conditional Function. Two example action IDs will be used: \"qwer1234\" and \"uiop5678\". Additionally, self.run_all_actions() is used here, which will run all actions in the order in which they were created. # Example 1 measurement = self . condition ( \"asdf1234\" ) if measurement is None : self . run_action ( \"qwer1234\" ) elif measurement > 23 : self . run_action ( \"uiop5678\" ) else : self . run_all_actions () # Example 2, test two measurements measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if measure_1 < 20 and measure_2 > 10 : self . run_action ( \"qwer1234\" ) self . run_action ( \"uiop5678\" ) # Example 3, test two measurements and sum of measurements measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: sum_ = measure_1 + measure_2 if measure_1 > 2 and 10 < measure_2 < 23 and sum_ < 30.5 : self . run_action ( \"qwer1234\" ) else : self . run_action ( \"uiop5678\" ) # Example 4, combine into one conditional measurement = self . condition ( \"asdf1234\" ) if measurement is not None and 20 < measurement < 30 : self . run_action ( \"uiop5678\" ) # Example 5, test two measurements, convert Edge Input from 0/1 to True/False measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if bool ( measure_1 ) and measure_2 > 10 : self . run_all_actions () # Example 6, test measurement with \"or\" and a rounded measurement measure_1 = self . measure ( \"asdf1234\" ) measure_2 = self . measure ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if measure_1 > 20 or int ( round ( measure_2 )) in [ 20 , 21 , 22 ]: self . run_action ( \"qwer1234\" ) if measure_1 > 30 : self . run_action ( \"uiop5678\" ) If your Action is a type that receives a message (E-Mail or Note), you can modify this message to include extra information before it is passed to the function (so the new information is passed to the Note, E-Mail, etc.). To do this, append a string to the variable self.message and add this to the message parameter of self.run_action() or self.run_all_actions(). Below are some examples. Note the use of \"+=\" instead of \"=\", which appends the string to the variable self.message instead of overwriting it. # Example 1 measurement = self . measure ( \"asdf1234\" ) if measurement is None and measurement > 23 : self . message += \"Measurement was {} \" . format ( measurement ) self . run_action ( \"uiop5678}\" , message = self . message ) # Example 2 measure_1 = self . measure ( \"asdf1234\" ) measure_2 = self . measure ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if measure_1 < 20 and measure_2 > 10 : self . message += \"Measurement 1: {m1} , Measurement 2: {m2} \" . format ( m1 = measure_1 , m2 = measure_2 ) self . run_all_actions ( message = self . message ) Logging can also be used to log messages to the daemon log using self.logger . Logging levels include \"info\", \"warning\", \"error\" and \"debug\". Debug log lines will only appear in the Daemon log when Logging Level: Debug is enabled for the Input. # Example 1 measurement = self . measure ( \"asdf1234\" ) if measurement is None and measurement > 23 : self . logging . error ( \"Warning, measurement was {} \" . format ( measurement )) self . message += \"Measurement was {} \" . format ( measurement ) self . run_action ( \"uiop5678}\" , message = self . message ) Before activating any conditionals, it's advised to thoroughly explore all possible scenarios and plan a configuration that eliminates conflicts. Some devices or outputs may respond atypically or fail when switched on and off in rapid succession. Therefore, trial run your configuration before connecting devices to any outputs. Trigger ~ A Trigger Controller will execute actions when events are triggered, such as an output turning on or off, a GPIO pin changing it's voltage state (Edge detection, rising or falling), timed events that include various timers (duration, time period, time point, etc), or the sunrise/sunset time at a specific latitude and longitude. Once the trigger is configured, add any number of Actions to be executed when that event is triggered. Output (On/Off) Options ~ Monitor the state of an output. Setting Description If Output The Output to monitor for a change of state. If State If the state of the output changes to On or Off the conditional will trigger. If \"On (any duration) is selected, th trigger will occur no matter how long the output turns on for, whereas if only \"On\" is selected, the conditional will trigger only when the output turns on for a duration of time equal to the set \"Duration (seconds)\". If Duration (seconds) If \"On\" is selected, an optional duration (seconds) may be set that will trigger the conditional only if the Output is turned on for this specific duration. Output (PWM) Options ~ Monitor the state of a PWM output. Setting Description If Output The Output to monitor for a change of state. If State If the duty cycle of the output is greater than,less than, or equal to the set value, trigger the Conditional Actions. If Duty Cycle (%) The duty cycle for the Output to be checked against. Edge Options ~ Monitor the state of a pin for a rising and/or falling edge. Setting Description If Edge Detected The conditional will be triggered if a change in state is detected, either Rising when the state changes from LOW (0 volts) to HIGH (3.5 volts) or Falling when the state changes from HIGH (3.3 volts) to LOW (0 volts), or Both (Rising and Falling). Run PWM Method Options ~ Select a Duration Method and this will set the selected PWM Output to the duty cycle specified by the method. Setting Description Duration Method Select which Method to use. PWM Output Select which PWM Output to use. Period (seconds) Select the interval of time to calculate the duty cycle, then apply to the PWM Output. Trigger Every Period Trigger Conditional Actions every period. Trigger when Activated Trigger Conditional Actions when the Conditional is activated. Sunrise/Sunset Options ~ Trigger events at sunrise or sunset (or a time offset of those), based on latitude and longitude. Setting Description Rise or Set Select which to trigger the conditional, at sunrise or sunset. Latitude (decimal) Latitude of the sunrise/sunset, using decimal format. Longitude (decimal) Longitude of the sunrise/sunset, using decimal format. Zenith The Zenith angle of the sun. Date Offset (days) Set a sunrise/sunset offset in days (positive or negative). Time Offset (minutes) Set a sunrise/sunset offset in minutes (positive or negative). Timer (Duration) Options ~ Run a timer that triggers Conditional Actions every period. Setting Description Period (seconds) The period of time between triggering Conditional Actions. Start Offset (seconds) Set this to start the first trigger a number of seconds after the Conditional is activated. Timer (Daily Time Point) Options ~ Run a timer that triggers Conditional Actions at a specific time every day. Setting Description Start Time (HH:MM) Set the time to trigger Conditional Actions, in the format \"HH:MM\", with HH denoting hours, and MM denoting minutes. Time is in 24-hour format. Timer (Daily Time Span) Options ~ Run a timer that triggers Conditional Actions at a specific period if it's between the set start and end times. For example, if the Start Time is set to 10:00 and End Time set to 11:00 and Period set to 120 seconds, the Conditional Actions will trigger every 120 seconds when the time is between 10 AM and 11 AM. This may be useful, for instance, if you desire an Output to remain on during a particular time period and you want to prevent power outages from interrupting the cycle (which a simple Time Point Timer could not prevent against because it only triggers once at the Start Time). By setting an Output to turn the lights on every few minutes during the Start -> End period, it ensured the Output remains on during this period. Setting Description Start Time (HH:MM) Set the start time to trigger Conditional Actions, in the format \"HH:MM\", with HH denoting hours, and MM denoting minutes. Time is in 24-hour format. End Time (HH:MM) Set the end time to trigger Conditional Actions, in the format \"HH:MM\", with HH denoting hours, and MM denoting minutes. Time is in 24-hour format. Period (seconds) The period of time between triggering Conditional Actions.","title":"Functions"},{"location":"Functions/#custom-functions","text":"There is a Custom Function import system in Mycodo that allows user-created Functions to be used in the Mycodo system. Custom Functions can be uploaded on the [Gear Icon] -> Configure -> Custom Functions page. After import, they will be available to use on the Setup -> Function page. If you develop a working Function module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in modules located in the directory Mycodo/mycodo/functions for examples of the proper formatting. There are also example Custom Functions in the directory Mycodo/mycodo/functions/examples Additionally, I have another github repository devoted to Custom Modules that are not included in the built-in set, at kizniche/Mycodo-custom . For Functions that require new measurements/units, they can be added on the [Gear Icon] -> Configure -> Measurements page.","title":"Custom Functions"},{"location":"Functions/#pid-controller","text":"A proportional-derivative-integral (PID) controller is a control loop feedback mechanism used throughout industry for controlling systems. It efficiently brings a measurable condition, such as the temperature, to a desired state and maintains it there with little overshoot and oscillation. A well-tuned PID controller will raise to the setpoint quickly, have minimal overshoot, and maintain the setpoint with little oscillation. PID settings may be changed while the PID is activated and the new settings will take effect immediately. If settings are changed while the controller is paused, the values will be used once the controller resumes operation.","title":"PID Controller"},{"location":"Functions/#pid-controller-options","text":"Setting Description Activate/Deactivate Turn a particular PID controller on or off. Pause When paused, the control variable will not be updated and the PID will not turn on the associated outputs. Settings can be changed without losing current PID output values. Hold When held, the control variable will not be updated but the PID will turn on the associated outputs, Settings can be changed without losing current PID output values. Resume Resume a PID controller from being held or paused. Direction This is the direction that you wish to regulate. For example, if you only require the temperature to be raised, set this to \"Up,\" but if you require regulation up and down, set this to \"Both.\" Period This is the duration between when the PID acquires a measurement, the PID is updated, and the output is modulated. Start Offset (seconds) Wait this duration before attempting the first calculation/measurement. Max Age The time (in seconds) that the sensor measurement age is required to be less than. If the measurement is not younger than this age, the measurement is thrown out and the PID will not actuate the output. This is a safety measure to ensure the PID is only using recent measurements. Setpoint This is the specific point you would like the environment to be regulated at. For example, if you would like the humidity regulated to 60%, enter 60. Band (+/- Setpoint) Hysteresis option. If set to a non-0 value, the setpoint will become a band, which will be between the band_max=setpoint+band and band_min=setpoint-band. If Raising, the PID will raise above band_max, then wait until the condition falls below band_min to resume regulation. If Lowering, the PID will lower below band_min, then wait until the condition rises above band_max to resume regulating. If set to Both, regulation will only occur to the outside min and max of the band, and cease when within the band. Set to 0 to disable Hysteresis. Store Lower as Negative Checking this will store all output variables (PID and output duration/duty cycle) as a negative values in the measurement database. This is useful for displaying graphs that indicate whether the PID is currently lowering or raising. Disable this if you desire all positive values to be stored in the measurement database. K P Gain Proportional coefficient (non-negative). Accounts for present values of the error. For example, if the error is large and positive, the control output will also be large and positive. K I Gain Integral coefficient (non-negative). Accounts for past values of the error. For example, if the current output is not sufficiently strong, the integral of the error will accumulate over time, and the controller will respond by applying a stronger action. K D Gain Derivative coefficient (non-negative). Accounts for predicted future values of the error, based on its current rate of change. Integrator Min The minimum allowed integrator value, for calculating Ki_total: (Ki_total = Ki * integrator; and PID output = Kp_total + Ki_total + Kd_total) Integrator Max The maximum allowed integrator value, for calculating Ki_total: (Ki_total = Ki * integrator; and PID output = Kp_total + Ki_total + Kd_total) Output (Raise/Lower) This is the output that will cause the particular environmental condition to rise or lower. In the case of raising the temperature, this may be a heating pad or coil. Min On Duration, Duty Cycle, or Amount (Raise/Lower) This is the minimum value that the PID output must be before Output (Lower) turns on. If the PID output is less than this value, Duration Outputs will not turn on, and PWM Outputs will be turned off unless Always Min is enabled. Max On Duration, Duty Cycle, or Amount (Raise/Lower) This is the maximum duration, volume, or duty cycle the Output (Raise) can be set to. If the PID output is greater than this value, the Max value set here will be used. Min Off Duration (Raise/Lower) For On/Off (Duration) Outputs, this is the minimum amount of time the Output must have been off for before it is allowed to turn back on. Ths is useful for devices that can be damaged by rapid power cycling (e.g. fridges). Always Min (Raise/Lower) For PWM Outputs only. If enabled, the duty cycle will never be set below the Min value. Setpoint Tracking Method Set a method to change the setpoint over time.","title":"PID Controller Options"},{"location":"Functions/#pid-output-calculation","text":"PID Controllers can control a number of different output types (e.g. duration, volume, or PWM duty cycle). For most output types, the PID output (Control Variable) will be proportional (i.e. Output Duration = PID Control Variable ). However, when outputting a duty cycle, it will be calculated as Duty Cycle = (Control Variable / Period) * 100 . Note Control Variable = P Output + I Output + D Output. Duty cycle is limited within the 0 - 100 % range and the set Min Duty Cycle and Max Duty Cycle. An output duration is limited by the set Min On Duration and Max On Duration, and output volume similarly.","title":"PID Output Calculation"},{"location":"Functions/#pid-tuning","text":"PID tuning can be a complex process, depending on the output device(s) used and the environment or system under control. A system with large perturbations will be more difficult to control than one that is stable. Similarly, output devices that are unsuitable may make PID tuning difficult or impossible. Learning how PID controllers operate and the theory behind their tuning will not only better prepare you to operate a PID controller, but also in the development of your system and selection and implementation of the output devices used to regulate your system.","title":"PID Tuning"},{"location":"Functions/#pid-tuning-resources","text":"Sous Vide PID Tuning and the Unexpected Electrical Fire","title":"PID Tuning Resources"},{"location":"Functions/#pid-control-theory","text":"The PID controller is the most common regulatory controller found in industrial settings, for it\"s ability to handle both simple and complex regulation. The PID controller has three paths, the proportional, integral, and derivative. The P roportional takes the error and multiplies it by the constant K P , to yield an output value. When the error is large, there will be a large proportional output. The I ntegral takes the error and multiplies it by K I , then integrates it (K I \u00b7 1/s). As the error changes over time, the integral will continually sum it and multiply it by the constant K I . The integral is used to remove perpetual error in the control system. If using K P alone produces an output that produces a perpetual error (i.e. if the sensor measurement never reaches the Set Point), the integral will increase the output until the error decreases and the Set Point is reached. The D erivative multiplies the error by K D , then differentiates it (K D \u00b7 s). When the error rate changes over time, the output signal will change. The faster the change in error, the larger the derivative path becomes, decreasing the output rate of change. This has the effect of dampening overshoot and undershoot (oscillation) of the Set Point. The K P , K I , and K D gains determine how much each of the P, I, and D variables influence the final PID output value. For instance, the greater the value of the gain, the more influence that variable has on the output. The output from the PID controller can be used in a number of ways. A simple use is to use this value as the number of seconds an output is turned on during a periodic interval (Period). For instance, if the Period is set to 30 seconds, the PID equation has the desired measurement and the actual measurement used to calculate the PID output every 30 seconds. The more the output is on during this period, the more it will affect the system. For example, an output on for 15 seconds every 30 seconds is at a 50 % duty cycle, and would affect the system roughly half as much as when the output is on for 30 seconds every 30 seconds, or at at 100 % duty cycle. The PID controller will calculate the output based on the amount of error (how far the actual measurement is from the desired measurement). If the error increases or persists, the output increases, causing the output to turn on for a longer duration within the Period, which usually in term causes the measured condition to change and the error to reduce. When the error reduces, the control variable decreases, meaning the output is turned on for a shorter duration of time. The ultimate goal of a well-tuned PID controller is to bring the actual measurement to the desired measurement quickly, with little overshoot, and maintain the setpoint with minimal oscillation. Using temperature as an example, the Process Variable (PV) is the measured temperature, the Setpoint (SP) is the desired temperature, and the Error (e) is the distance between the measured temperature and the desired temperature (indicating if the actual temperature is too hot or too cold and to what degree). The error is manipulated by each of the three PID components, producing an output, called the Manipulated Variable (MV) or Control Variable (CV). To allow control of how much each path contributes to the output value, each path is multiplied by a gain (represented by K P , K I , and K D ). By adjusting the gains, the sensitivity of the system to each path is affected. When all three paths are summed, the PID output is produced. If a gain is set to 0, that path does not contribute to the output and that path is essentially turned off. The output can be used a number of ways, however this controller was designed to use the output to affect the measured value (PV). This feedback loop, with a properly tuned PID controller, can achieve a set point in a short period of time, maintain regulation with little oscillation, and respond quickly to disturbance. Therefor, if one would be regulating temperature, the sensor would be a temperature sensor and the feedback device(s) would be able to heat and cool. If the temperature is lower than the Set Point, the output value would be positive and a heater would activate. The temperature would rise toward the desired temperature, causing the error to decrease and a lower output to be produced. This feedback loop would continue until the error reaches 0 (at which point the output would be 0). If the temperature continues to rise past the Set Point (this is may be acceptable, depending on the degree), the PID would produce a negative output, which could be used by the cooling device to bring the temperature back down, to reduce the error. If the temperature would normally lower without the aid of a cooling device, then the system can be simplified by omitting a cooler and allowing it to lower on its own. Implementing a controller that effectively utilizes K P , K I , and K D can be challenging. Furthermore, it is often unnecessary. For instance, the K I and K D can be set to 0, effectively turning them off and producing the very popular and simple P controller. Also popular is the PI controller. It is recommended to start with only K P activated, then experiment with K P and K I , before finally using all three. Because systems will vary (e.g. airspace volume, degree of insulation, and the degree of impact from the connected device, etc.), each path will need to be adjusted through experimentation to produce an effective output.","title":"PID Control Theory"},{"location":"Functions/#quick-setup-examples","text":"These example setups are meant to illustrate how to configure regulation in particular directions, and not to achieve ideal values to configure your K P , K I , and K D gains. There are a number of online resources that discuss techniques and methods that have been developed to determine ideal PID values (such as here , here , here , here , and here ) and since there are no universal values that will work for every system, it is recommended to conduct your own research to understand the variables and essential to conduct your own experiments to effectively implement them. Provided merely as an example of the variance of PID values, one of my setups had temperature PID values (up regulation) of K P = 30, K I = 1.0, and K D = 0.5, and humidity PID values (up regulation) of K P = 1.0, K I = 0.2, and K D = 0.5. Furthermore, these values may not have been optimal but they worked well for the conditions of my environmental chamber.","title":"Quick Setup Examples"},{"location":"Functions/#exact-temperature-regulation","text":"This will set up the system to raise and lower the temperature to a certain level with two regulatory devices (one that heats and one that cools). Add a sensor, then save the proper device and pin/address for each sensor and activate the sensor. Add two outputs, then save each GPIO and On Trigger state. Add a PID, then select the newly-created sensor. Change Setpoint to the desired temperature, Regulate Direction to \"Both\". Set Raise Output to the relay attached to the heating device and the Lower Relay to the relay attached to the cooling device. Set K P = 1, K I = 0, and K D = 0, then activate the PID. If the temperature is lower than the Set Point, the heater should activate at some interval determined by the PID controller until the temperature rises to the set point. If the temperature goes higher than the Set Point (or Set Point + Buffer), the cooling device will activate until the temperature returns to the set point. If the temperature is not reaching the Set Point after a reasonable amount of time, increase the K P value and see how that affects the system. Experiment with different configurations involving only Read Interval and K P to achieve a good regulation. Avoid changing the K I and K D from 0 until a working regulation is achieved with K P alone. View graphs in the 6 to 12 hour time span to identify how well the temperature is regulated to the Setpoint. What is meant by well-regulated will vary, depending on your specific application and tolerances. Most applications of a PID controller would like to see the proper temperature attained within a reasonable amount of time and with little oscillation around the Setpoint. Once regulation is achieved, experiment by reducing K P slightly (~25%) and increasing K I by a low amount to start, such as 0.1 (or lower, 0.01), then start the PID and observe how well the controller regulates. Slowly increase K I until regulation becomes both quick and with little oscillation. At this point, you should be fairly familiar with experimenting with the system and the K D value can be experimented with once both K P and K I have been tuned.","title":"Exact Temperature Regulation"},{"location":"Functions/#high-temperature-regulation","text":"Often the system can be simplified if two-way regulation is not needed. For instance, if cooling is unnecessary, this can be removed from the system and only up-regulation can be used. Use the same configuration as the Exact Temperature Regulation example, except change Regulate Direction to \"Raise\" and do not touch the \"Down Relay\" section.","title":"High Temperature Regulation"},{"location":"Functions/#pid-autotune","text":"Warning This is an experimental feature. It is best not used until you are familiar with the theory, operation, and tuning of a PID. The Autotune function is a standalone controller that is useful for determining appropriate Kp, Ki, and Kd gains for use in the a PID controller. The autotuner will manipulate an output and analyze the measured response in a particular environment/system. It will take several cycles of perturbing the system with the chosen output before enough data is available to calculate the PID gains. In order to use this feature, select a Measurement and an Output that can module the specific condition being measured. Then, configure the Noise Band and Outstep and activate the function. Log lines of the autotuner will appear in the daemon log ( [Gear Icon] -> Mycodo Logs -> Daemon Log ). While the autotune is being performed, it is recommended to create a dashboard graph that includes the Measurement and Output in order to see what the PID Autotuner is doing and to notice any potential issues with the autotune settings that have been configured. If the autotune is taking a long time to complete, there may not be enough stability in the system being manipulated to calculate a reliable set of PID gains. This may be because there are too many perturbations to the system, or conditions are changing too rapidly to acquire consistent measurement oscillations. If this is the case, try modifying your system to increase stability and yield consistent measurement oscillations. Once the autotune successfully completes, perturbations may be reintroduced in order to further tune the PID controller to handle them. Setting Description Measurement This is the Input or Function measurement that is measuring the specific condition that the Output will affect. For instance, this could be a temperature measurement and the output could be a heater. Output This is the Output that will affect the measurement when it's activated. The autotune function will periodically turn this output on in order to raise the measurement beyond the setpoint. Period This is the period of time between the Output being turned on. This should be set to the same Period you wish to use for your PID controller. A different Period can significantly affect the PID gains that the autotune produces. Setpoint This is the desired measurement condition value. For instance, if temperature is being measured, this should be set a several degrees higher than the current temperature so the output, when activated, will cause the temperature to rise beyond the setpoint. Noise Band This is the amount above the setpoint the measured condition must reach before the output turns off. This is also how much below the setpoint the measured condition must fall before the output turns back on. Outstep This is how many seconds the output will turn on every PID Period. For instance, to autotune with 50% power, ensure the Outstep is half the value of the PID Period. Direction This is the direction for which the Output will push the Measurement. For instance, a heater will raise temperature, whereas a cooler will lower temperature. Typical graph output will look like this: And typical Daemon Log output will look like this: 2018-08-04 23:32:20,876 - mycodo.pid_3b533dff - INFO - Activated in 187.2 ms 2018-08-04 23:32:20,877 - mycodo.pid_autotune - INFO - PID Autotune started 2018-08-04 23:33:50,823 - mycodo.pid_autotune - INFO - 2018-08-04 23:33:50,830 - mycodo.pid_autotune - INFO - Cycle: 19 2018-08-04 23:33:50,831 - mycodo.pid_autotune - INFO - switched state: relay step down 2018-08-04 23:33:50,832 - mycodo.pid_autotune - INFO - input: 32.52 2018-08-04 23:36:00,854 - mycodo.pid_autotune - INFO - 2018-08-04 23:36:00,860 - mycodo.pid_autotune - INFO - Cycle: 45 2018-08-04 23:36:00,862 - mycodo.pid_autotune - INFO - found peak: 34.03 2018-08-04 23:36:00,863 - mycodo.pid_autotune - INFO - peak count: 1 2018-08-04 23:37:20,802 - mycodo.pid_autotune - INFO - 2018-08-04 23:37:20,809 - mycodo.pid_autotune - INFO - Cycle: 61 2018-08-04 23:37:20,810 - mycodo.pid_autotune - INFO - switched state: relay step up 2018-08-04 23:37:20,811 - mycodo.pid_autotune - INFO - input: 31.28 2018-08-04 23:38:30,867 - mycodo.pid_autotune - INFO - 2018-08-04 23:38:30,874 - mycodo.pid_autotune - INFO - Cycle: 75 2018-08-04 23:38:30,876 - mycodo.pid_autotune - INFO - found peak: 32.17 2018-08-04 23:38:30,878 - mycodo.pid_autotune - INFO - peak count: 2 2018-08-04 23:38:40,852 - mycodo.pid_autotune - INFO - 2018-08-04 23:38:40,858 - mycodo.pid_autotune - INFO - Cycle: 77 2018-08-04 23:38:40,860 - mycodo.pid_autotune - INFO - switched state: relay step down 2018-08-04 23:38:40,861 - mycodo.pid_autotune - INFO - input: 32.85 2018-08-04 23:40:50,834 - mycodo.pid_autotune - INFO - 2018-08-04 23:40:50,835 - mycodo.pid_autotune - INFO - Cycle: 103 2018-08-04 23:40:50,836 - mycodo.pid_autotune - INFO - found peak: 33.93 2018-08-04 23:40:50,836 - mycodo.pid_autotune - INFO - peak count: 3 2018-08-04 23:42:05,799 - mycodo.pid_autotune - INFO - 2018-08-04 23:42:05,805 - mycodo.pid_autotune - INFO - Cycle: 118 2018-08-04 23:42:05,806 - mycodo.pid_autotune - INFO - switched state: relay step up 2018-08-04 23:42:05,807 - mycodo.pid_autotune - INFO - input: 31.27 2018-08-04 23:43:15,816 - mycodo.pid_autotune - INFO - 2018-08-04 23:43:15,822 - mycodo.pid_autotune - INFO - Cycle: 132 2018-08-04 23:43:15,824 - mycodo.pid_autotune - INFO - found peak: 32.09 2018-08-04 23:43:15,825 - mycodo.pid_autotune - INFO - peak count: 4 2018-08-04 23:43:25,790 - mycodo.pid_autotune - INFO - 2018-08-04 23:43:25,796 - mycodo.pid_autotune - INFO - Cycle: 134 2018-08-04 23:43:25,797 - mycodo.pid_autotune - INFO - switched state: relay step down 2018-08-04 23:43:25,798 - mycodo.pid_autotune - INFO - input: 32.76 2018-08-04 23:45:30,802 - mycodo.pid_autotune - INFO - 2018-08-04 23:45:30,808 - mycodo.pid_autotune - INFO - Cycle: 159 2018-08-04 23:45:30,810 - mycodo.pid_autotune - INFO - found peak: 33.98 2018-08-04 23:45:30,811 - mycodo.pid_autotune - INFO - peak count: 5 2018-08-04 23:45:30,812 - mycodo.pid_autotune - INFO - 2018-08-04 23:45:30,814 - mycodo.pid_autotune - INFO - amplitude: 0.9099999999999989 2018-08-04 23:45:30,815 - mycodo.pid_autotune - INFO - amplitude deviation: 0.06593406593406595 2018-08-04 23:46:40,851 - mycodo.pid_autotune - INFO - 2018-08-04 23:46:40,857 - mycodo.pid_autotune - INFO - Cycle: 173 2018-08-04 23:46:40,858 - mycodo.pid_autotune - INFO - switched state: relay step up 2018-08-04 23:46:40,859 - mycodo.pid_autotune - INFO - input: 31.37 2018-08-04 23:47:55,860 - mycodo.pid_autotune - INFO - 2018-08-04 23:47:55,866 - mycodo.pid_autotune - INFO - Cycle: 188 2018-08-04 23:47:55,868 - mycodo.pid_autotune - INFO - found peak: 32.36 2018-08-04 23:47:55,869 - mycodo.pid_autotune - INFO - peak count: 6 2018-08-04 23:47:55,870 - mycodo.pid_autotune - INFO - 2018-08-04 23:47:55,871 - mycodo.pid_autotune - INFO - amplitude: 0.9149999999999979 2018-08-04 23:47:55,872 - mycodo.pid_autotune - INFO - amplitude deviation: 0.032786885245900406 2018-08-04 23:47:55,873 - mycodo.pid_3b533dff - INFO - time: 16 min 2018-08-04 23:47:55,874 - mycodo.pid_3b533dff - INFO - state: succeeded 2018-08-04 23:47:55,874 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,875 - mycodo.pid_3b533dff - INFO - rule: ziegler-nichols 2018-08-04 23:47:55,876 - mycodo.pid_3b533dff - INFO - Kp: 0.40927018474290117 2018-08-04 23:47:55,877 - mycodo.pid_3b533dff - INFO - Ki: 0.05846588600007114 2018-08-04 23:47:55,879 - mycodo.pid_3b533dff - INFO - Kd: 0.7162385434443115 2018-08-04 23:47:55,880 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,881 - mycodo.pid_3b533dff - INFO - rule: tyreus-luyben 2018-08-04 23:47:55,887 - mycodo.pid_3b533dff - INFO - Kp: 0.3162542336649691 2018-08-04 23:47:55,889 - mycodo.pid_3b533dff - INFO - Ki: 0.010165091543194185 2018-08-04 23:47:55,890 - mycodo.pid_3b533dff - INFO - Kd: 0.7028026111719073 2018-08-04 23:47:55,891 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,892 - mycodo.pid_3b533dff - INFO - rule: ciancone-marlin 2018-08-04 23:47:55,892 - mycodo.pid_3b533dff - INFO - Kp: 0.21083615577664605 2018-08-04 23:47:55,893 - mycodo.pid_3b533dff - INFO - Ki: 0.06626133746674728 2018-08-04 23:47:55,893 - mycodo.pid_3b533dff - INFO - Kd: 0.3644161687558038 2018-08-04 23:47:55,894 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,894 - mycodo.pid_3b533dff - INFO - rule: pessen-integral 2018-08-04 23:47:55,895 - mycodo.pid_3b533dff - INFO - Kp: 0.49697093861638 2018-08-04 23:47:55,895 - mycodo.pid_3b533dff - INFO - Ki: 0.0887428626786794 2018-08-04 23:47:55,896 - mycodo.pid_3b533dff - INFO - Kd: 1.04627757151908 2018-08-04 23:47:55,896 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,897 - mycodo.pid_3b533dff - INFO - rule: some-overshoot 2018-08-04 23:47:55,898 - mycodo.pid_3b533dff - INFO - Kp: 0.23191977135431066 2018-08-04 23:47:55,898 - mycodo.pid_3b533dff - INFO - Ki: 0.03313066873337365 2018-08-04 23:47:55,899 - mycodo.pid_3b533dff - INFO - Kd: 1.0823160212047374 2018-08-04 23:47:55,899 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,900 - mycodo.pid_3b533dff - INFO - rule: no-overshoot 2018-08-04 23:47:55,900 - mycodo.pid_3b533dff - INFO - Kp: 0.1391518628125864 2018-08-04 23:47:55,901 - mycodo.pid_3b533dff - INFO - Ki: 0.01987840124002419 2018-08-04 23:47:55,901 - mycodo.pid_3b533dff - INFO - Kd: 0.6493896127228425 2018-08-04 23:47:55,902 - mycodo.pid_3b533dff - INFO - 2018-08-04 23:47:55,902 - mycodo.pid_3b533dff - INFO - rule: brewing 2018-08-04 23:47:55,903 - mycodo.pid_3b533dff - INFO - Kp: 5.566074512503456 2018-08-04 23:47:55,904 - mycodo.pid_3b533dff - INFO - Ki: 0.11927040744014512 2018-08-04 23:47:55,904 - mycodo.pid_3b533dff - INFO - Kd: 4.101408080354794","title":"PID Autotune"},{"location":"Functions/#conditional","text":"Conditional Functions are used to perform simple to complex actions based a user-generated Python code. Conditional Functions allow the execution of Python 3 code as well as the use of Conditions and Actions within your code to interact with Mycodo. Conditions typically acquire data from Mycodo, such as Input measurements, and Actions typically affect Mycodo, such as actuating an Output or pausing a PID controller. Each Condition and Action you add will have its own description and example code to demonstrate how to use it in your Python code. Note Timeout must be set longer than it takes your Run Python Code to execute (if Timeout is set too low, only part of your Run Python Code may execute). Note Period must be set longer than the time it takes for your Run Python Code to execute, otherwise it will execute again before the previous execution has finished. Note The code is executed within the same Python virtual environment that Mycodo runs from, therefore you must install Python libraries to this environment if you want them to be available to your code. This virtualenv is located at /opt/Mycodo/env and if you wanted to install, for example, \"my_library\" using pip, you would execute \"sudo /opt/Mycodo/env/bin/pip install my_library\".","title":"Conditional"},{"location":"Functions/#conditional-options","text":"Setting Description Import Python Code Python 3 code that is used for importing Python libraries. This is executed before the class is created when generating the Conditional Function code. Initialize Python Code Python 3 code that is executed during the initialization of the class, within __init__(). This is where variables are initialized that will be used within the class. Run Python Code Python 3 code that will be executed every set Period. This is where the Condtions and Actions are executed. Once a Condition or Action is added, the functions that can be executed for each will be shown above each Condition or Action. Status Python Code A dictionary can be returned that allows information to be passed to other controllers and widgets. For example, the Function Status Widget will display this information on the Dashboard. This code can be removed if you do not want to return any information. Period (seconds) The period (seconds) that the Run Python Code will be executed. Start Offset (seconds) The duration (seconds) to wait before executing the Conditional for the first after it is activated. Log Level: Debug Show debug lines in the daemon log. Message Includes Code Include the Python code in the message (self.message) that is passed to Actions. Conditions are functions that can be used within the Run Python Code, and return specific information. Condition Description Measurement (Single, Last) Acquires the latest measurement from an Input or device. Set Max Age (seconds) to restrict how long to accept values. If the latest value is older than this duration, \"None\" is returned. Measurement (Single, Past, Average) Acquires the past measurements from an Input or device, then averages them. Set Max Age (seconds) to restrict how long to accept values. If all values are older than this duration, \"None\" is returned. Measurement (Single, Past, Sum) Acquires the past measurements from an Input or device, then sums them. Set Max Age (seconds) to restrict how long to accept values. If all values are older than this duration, \"None\" is returned. Measurement (Multiple, Past) Acquires the past measurements from an Input or device. Set Max Age (seconds) to restrict how long to accept values. If no values are found in this duration, \"None\" is returned. This differs from the \"Measurement (Single)\" Condition because it returns a list of dictionaries with 'time' and 'value' key pairs. GPIO State Acquires the current GPIO state and returns 1 if HIGH or 0 if LOW. If the latest value is older than this duration, \"None\" is returned. Output State Returns 'on' if the output is currently on, and 'off' if it's currently off. Output Duration On Returns how long the output has currently been on, in seconds. Returns 0 if off. Controller Running Returns True if the controller is active, False if inactive. Max Age (seconds) The minimum age (seconds) the measurement can be. If the last measurement is older than this, \"None\" will be returned instead of a measurement.","title":"Conditional Options"},{"location":"Functions/#conditional-setup-guide","text":"Python 3 is the environment that these conditionals will be executed. The following functions can be used within your Python code. Note Python code indentations must use 4 spaces (not 2 spaces, tabs, or anything else). Function Description self.condition(\"{ID}\") Returns a measurement for the Condition with ID. self.condition_dict(\"{ID}\") Returns a dictionary of measurement for the Condition with ID. self.run_action(\"{ID}\") Executes the Action with ID. self.run_all_actions() Executes all actions. self.logger.info() Writes a log line to the Daemon log. \"info\" may also be changed to \"warning\", \"error\" or \"debug\". Debug log lines will only appear in the Daemon log when Logging Level: Debug is enabled for the Input. self.set_custom_option(\"option\", value) Writes the value to the database for retrieval later. The option argument should be a string, and value can be a string, integer, float, list, or dictionary. self.get_custom_option(\"option\") Reads the value from the database that was previously written with self.set_custom_option(). Returns None if the option is not found or there is no value. There are additional functions that can be used, but these must use the full UUID (not an abridged version as the functions above). See /opt/Mycodo/mycodo/mycodo_client.py for the functions available for use. These may be accessed via the 'control' object. An example, below, will return how long the output has been on (or 0 if it's currently off): output_on_seconds = control.output_sec_currently_on(\"1b6ada50-1e69-403a-9fa6-ec748b16dc23\") Since the Python code must be formatted properly, it's best to familiarize yourself with the basics of Python . Note There are two different IDs in use here, one set of IDs are found under the Conditions section of the Conditional Function, and one set of IDs are found under the Actions section of the Conditional Function. Read all of this section, including the examples, below, to fully understand how to properly set up a Conditional Function. Info If a measurement hasn't been acquired within the set Max Age , \"None\" will be returned when self.condition(\"{ID}\") is called in the code. It is very important that you account for this. All examples below incorporate a test for the measurement being None, and this should not be removed. If an error occurs (such as if the statement resolves to comparing None to a numerical value, such as \"if None < 23\"), then the code will stop there and an error will be logged in the daemon log. Accounting for None is useful for determining if an Input is no longer acquiring measurements (e.g. dead sensor, malfunction, etc.). To create a basic conditional, follow these steps, using the numbers in the screenshots, below, that correspond to the numbers in parentheses: Navigate to the Setup -> Function page. Select \"Controller: Conditional\", then click Add . Under Conditions, select a condition option, then click Add Condition . Configure the newly-added Condition then click Save . Under Actions, select an action option, then click Add Action . Configure the newly-added Action then click Save . Notice that each Condition and each Action has its own ID (underlined). The default Run Python Code contains placeholder IDs that need to be changed to your Condition and Action IDs. Change the ID in self.condition(\"asdf1234\") to your Condition ID. Change the ID in self.run_action(\"qwer5678\", message=message) to your Action ID. Click Save at the top of the Conditional. The logic used in the Run Python Code will need to be adjusted to suit your particular needs. Additionally, you may add more Conditions or Actions. See the Advanced Conditional code examples , below, for usage examples. If your Python code has been formatted correctly, your Conditional will save and it will be ready to activate. If an error is returned, your options will not have been saved. Inspect the error for which line is causing the issue and read the error message itself to try to understand what the problem is and how to fix it. There are an unfathomable number of ways to configure a Conditional, but this should hopefully get you started to developing one that suits your needs. Note Mycodo is constantly changing, so the screenshots below may not match what you see exactly. Be sure to read this entire section of the manual to understand how to use Conditional Functions. Beginner Conditional Run Python Code examples: Each self.condition(\"ID\") will return the most recent measurement obtained from that particular measurement under the Conditions section of the Conditional Function, as long as it's within the set Max Age. # Example 1, no measurement (i.e. None) returned # useful with the Email Notify Action to email when an Input stops working if self . condition ( \"asdf1234\" ) is None : self . run_all_actions () # Execute all configured actions # Example 2, test two measurement conditions measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: # If neither measurement is None (both are working) if measure_1 < 20 and measure_2 > 10 : # If measure_1 is less than 20 and measure_2 is greater than 10 self . run_all_actions () # Execute all configured actions # Example 3, test two measurements and sum of measurements measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: sum_ = measure_1 + measure_2 if measure_1 > 2 and 10 < measure_2 < 23 and sum_ < 30.5 : self . run_all_actions () # Example 4, combine into one conditional measurement = self . condition ( \"asdf1234\" ) if measurement is not None and 20 < measurement < 30 : # combine conditions self . run_all_actions () # Example 5, test two measurements # convert Edge Input from 0 or 1 to True or False measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if bool ( measure_1 ) and measure_2 > 10 : self . run_all_actions () # Example 6, test measurement with \"or\" and a rounded measurement measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if measure_1 > 20 or int ( round ( measure_2 )) in [ 20 , 21 , 22 ]: self . run_all_actions () # Example 7, use self to store variables across multiple executions measurement = self . condition ( \"asdf1234\" ) if not hasattr ( self , \"stored_measurement\" ): # Initialize variable self . stored_measurement = measurement if measurement is not None : if abs ( measurement - self . stored_measurement ) > 10 : self . run_all_actions () # if difference is greater than 10 self . stored_measurement = measurement # Store measurement The \"Measurement (Multiple)\" Condition is useful if you desire to check if a particular value has been stored in any of the past measurements (within the set Max Age), not just the last measurement. This is useful if you have an alert system that each numerical value represents a different alert that you need to check each past value if it occurred. Here is an example that retrieves all measurements from the past 30 minutes and checks if any of the measurements in the returned list is equal to \"119\". If \"119\" exists, the Actions are executed and break is used to exit the for loop. # Example 1, find a measurement in the past 30 minutes (Max Age: 1800 seconds) measurements = self . condition_dict ( \"asdf1234\" ) if measurements : # If the list is not empty for each_measure in measurements : # Loop through each measurement in the list if each_measure [ 'value' ] == 119 : self . logger . info ( \"Alert 119 found at timestamp {time} \" . format ( time = each_measure [ 'time' ])) self . run_all_actions () break # Exit the for loop Advanced Conditional Run Python Code examples: These examples expand on the beginner examples, above, by activating specific actions. The following examples will reference actions with IDs that can be found under the Actions section of the Conditional Function. Two example action IDs will be used: \"qwer1234\" and \"uiop5678\". Additionally, self.run_all_actions() is used here, which will run all actions in the order in which they were created. # Example 1 measurement = self . condition ( \"asdf1234\" ) if measurement is None : self . run_action ( \"qwer1234\" ) elif measurement > 23 : self . run_action ( \"uiop5678\" ) else : self . run_all_actions () # Example 2, test two measurements measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if measure_1 < 20 and measure_2 > 10 : self . run_action ( \"qwer1234\" ) self . run_action ( \"uiop5678\" ) # Example 3, test two measurements and sum of measurements measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: sum_ = measure_1 + measure_2 if measure_1 > 2 and 10 < measure_2 < 23 and sum_ < 30.5 : self . run_action ( \"qwer1234\" ) else : self . run_action ( \"uiop5678\" ) # Example 4, combine into one conditional measurement = self . condition ( \"asdf1234\" ) if measurement is not None and 20 < measurement < 30 : self . run_action ( \"uiop5678\" ) # Example 5, test two measurements, convert Edge Input from 0/1 to True/False measure_1 = self . condition ( \"asdf1234\" ) measure_2 = self . condition ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if bool ( measure_1 ) and measure_2 > 10 : self . run_all_actions () # Example 6, test measurement with \"or\" and a rounded measurement measure_1 = self . measure ( \"asdf1234\" ) measure_2 = self . measure ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if measure_1 > 20 or int ( round ( measure_2 )) in [ 20 , 21 , 22 ]: self . run_action ( \"qwer1234\" ) if measure_1 > 30 : self . run_action ( \"uiop5678\" ) If your Action is a type that receives a message (E-Mail or Note), you can modify this message to include extra information before it is passed to the function (so the new information is passed to the Note, E-Mail, etc.). To do this, append a string to the variable self.message and add this to the message parameter of self.run_action() or self.run_all_actions(). Below are some examples. Note the use of \"+=\" instead of \"=\", which appends the string to the variable self.message instead of overwriting it. # Example 1 measurement = self . measure ( \"asdf1234\" ) if measurement is None and measurement > 23 : self . message += \"Measurement was {} \" . format ( measurement ) self . run_action ( \"uiop5678}\" , message = self . message ) # Example 2 measure_1 = self . measure ( \"asdf1234\" ) measure_2 = self . measure ( \"hjkl5678\" ) if None not in [ measure_1 , measure_2 ]: if measure_1 < 20 and measure_2 > 10 : self . message += \"Measurement 1: {m1} , Measurement 2: {m2} \" . format ( m1 = measure_1 , m2 = measure_2 ) self . run_all_actions ( message = self . message ) Logging can also be used to log messages to the daemon log using self.logger . Logging levels include \"info\", \"warning\", \"error\" and \"debug\". Debug log lines will only appear in the Daemon log when Logging Level: Debug is enabled for the Input. # Example 1 measurement = self . measure ( \"asdf1234\" ) if measurement is None and measurement > 23 : self . logging . error ( \"Warning, measurement was {} \" . format ( measurement )) self . message += \"Measurement was {} \" . format ( measurement ) self . run_action ( \"uiop5678}\" , message = self . message ) Before activating any conditionals, it's advised to thoroughly explore all possible scenarios and plan a configuration that eliminates conflicts. Some devices or outputs may respond atypically or fail when switched on and off in rapid succession. Therefore, trial run your configuration before connecting devices to any outputs.","title":"Conditional Setup Guide"},{"location":"Functions/#trigger","text":"A Trigger Controller will execute actions when events are triggered, such as an output turning on or off, a GPIO pin changing it's voltage state (Edge detection, rising or falling), timed events that include various timers (duration, time period, time point, etc), or the sunrise/sunset time at a specific latitude and longitude. Once the trigger is configured, add any number of Actions to be executed when that event is triggered.","title":"Trigger"},{"location":"Functions/#output-onoff-options","text":"Monitor the state of an output. Setting Description If Output The Output to monitor for a change of state. If State If the state of the output changes to On or Off the conditional will trigger. If \"On (any duration) is selected, th trigger will occur no matter how long the output turns on for, whereas if only \"On\" is selected, the conditional will trigger only when the output turns on for a duration of time equal to the set \"Duration (seconds)\". If Duration (seconds) If \"On\" is selected, an optional duration (seconds) may be set that will trigger the conditional only if the Output is turned on for this specific duration.","title":"Output (On/Off) Options"},{"location":"Functions/#output-pwm-options","text":"Monitor the state of a PWM output. Setting Description If Output The Output to monitor for a change of state. If State If the duty cycle of the output is greater than,less than, or equal to the set value, trigger the Conditional Actions. If Duty Cycle (%) The duty cycle for the Output to be checked against.","title":"Output (PWM) Options"},{"location":"Functions/#edge-options","text":"Monitor the state of a pin for a rising and/or falling edge. Setting Description If Edge Detected The conditional will be triggered if a change in state is detected, either Rising when the state changes from LOW (0 volts) to HIGH (3.5 volts) or Falling when the state changes from HIGH (3.3 volts) to LOW (0 volts), or Both (Rising and Falling).","title":"Edge Options"},{"location":"Functions/#run-pwm-method-options","text":"Select a Duration Method and this will set the selected PWM Output to the duty cycle specified by the method. Setting Description Duration Method Select which Method to use. PWM Output Select which PWM Output to use. Period (seconds) Select the interval of time to calculate the duty cycle, then apply to the PWM Output. Trigger Every Period Trigger Conditional Actions every period. Trigger when Activated Trigger Conditional Actions when the Conditional is activated.","title":"Run PWM Method Options"},{"location":"Functions/#sunrisesunset-options","text":"Trigger events at sunrise or sunset (or a time offset of those), based on latitude and longitude. Setting Description Rise or Set Select which to trigger the conditional, at sunrise or sunset. Latitude (decimal) Latitude of the sunrise/sunset, using decimal format. Longitude (decimal) Longitude of the sunrise/sunset, using decimal format. Zenith The Zenith angle of the sun. Date Offset (days) Set a sunrise/sunset offset in days (positive or negative). Time Offset (minutes) Set a sunrise/sunset offset in minutes (positive or negative).","title":"Sunrise/Sunset Options"},{"location":"Functions/#timer-duration-options","text":"Run a timer that triggers Conditional Actions every period. Setting Description Period (seconds) The period of time between triggering Conditional Actions. Start Offset (seconds) Set this to start the first trigger a number of seconds after the Conditional is activated.","title":"Timer (Duration) Options"},{"location":"Functions/#timer-daily-time-point-options","text":"Run a timer that triggers Conditional Actions at a specific time every day. Setting Description Start Time (HH:MM) Set the time to trigger Conditional Actions, in the format \"HH:MM\", with HH denoting hours, and MM denoting minutes. Time is in 24-hour format.","title":"Timer (Daily Time Point) Options"},{"location":"Functions/#timer-daily-time-span-options","text":"Run a timer that triggers Conditional Actions at a specific period if it's between the set start and end times. For example, if the Start Time is set to 10:00 and End Time set to 11:00 and Period set to 120 seconds, the Conditional Actions will trigger every 120 seconds when the time is between 10 AM and 11 AM. This may be useful, for instance, if you desire an Output to remain on during a particular time period and you want to prevent power outages from interrupting the cycle (which a simple Time Point Timer could not prevent against because it only triggers once at the Start Time). By setting an Output to turn the lights on every few minutes during the Start -> End period, it ensured the Output remains on during this period. Setting Description Start Time (HH:MM) Set the start time to trigger Conditional Actions, in the format \"HH:MM\", with HH denoting hours, and MM denoting minutes. Time is in 24-hour format. End Time (HH:MM) Set the end time to trigger Conditional Actions, in the format \"HH:MM\", with HH denoting hours, and MM denoting minutes. Time is in 24-hour format. Period (seconds) The period of time between triggering Conditional Actions.","title":"Timer (Daily Time Span) Options"},{"location":"I2C-Multiplexers/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. All devices that connected to the Raspberry Pi by the I2C bus need to have a unique address in order to communicate. Some inputs may have the same address (such as the AM2315), which prevents more than one from being connected at the same time. Others may provide the ability to change the address, however the address range may be limited, which limits by how many you can use at the same time. I2C multiplexers are extremely clever and useful in these scenarios because they allow multiple sensors with the same I2C address to be connected. For instance, the TCA9548A/PCA9548A: I2C Multiplexer has 8 selectable addresses, so 8 multiplexers can be connected to one Raspberry Pi. Each multiplexer has 8 channels, allowing up to 8 devices/sensors with the same address to be connected to each multiplexer. 8 multiplexers x 8 channels = 64 devices/sensors with the same I2C address. TCA9548A/PCA9548A: I2C Multiplexer link (I2C): 8 selectable addresses, 8 channels To load the kernel driver for the TCA9548A/PCA9548A that ships with raspbian add dtoverlay=i2c-mux,pca9548,addr=0x70 to /boot/config.txt where 0x70 is the i2c address of the multiplexer. If successfully set up, there will be 8 new I2C buses on the [Gear Icon] -> System Information page. TCA9545A: I2C Bus Multiplexer link (I2C): The linked Grove board creates 4 new I2C buses, each with their own selectable voltage, either 3.3 or 5.0 volts. To load the kernel driver for the TCA9545A add dtoverlay=i2c-mux,pca9545,addr=0x70 to /boot/config.txt where 0x70 is the i2c address of the multiplexer. If successfully set up, there will be 4 new I2C buses on the [Gear Icon] -> System Information page.","title":"I2C Multiplexers"},{"location":"Inputs/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Page: Setup -> Input For a full list of supported Inputs, see Supported Input Devices . Inputs, such as sensors, ADC signals, or even a response from a command, enable measuring conditions in the environment or elsewhere, which will be stored in a time-series database (InfluxDB). This database will provide measurements for Dashboard Widgets , Functions , and other parts of Mycodo to operate from. Add, configure, and activate inputs to begin recording measurements to the database and allow them to be used throughout Mycodo. Custom Inputs ~ See Building a Custom Input Module Wiki page. There is a Custom Input import system in Mycodo that allows user-created Inputs to be created an used in the Mycodo system. Custom Inputs can be uploaded and imported from the [Gear Icon] -> Configure -> Custom Inputs page. After import, they will be available to use on the Setup -> Input page. If you develop a working Input module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in modules located in the directory Mycodo/mycodo/inputs for examples of the proper formatting. There are also example Custom Inputs in the directory Mycodo/mycodo/inputs/examples Additionally, I have another github repository devoted to Custom Modules that are not included in the built-in set, at kizniche/Mycodo-custom . Input Commands ~ Input Commands are functions within the Input module that can be executed from the Web UI. This is useful for things such as calibration or other functionality specific to the input. By default, there is at least one action, Acquire Measurements Now, which will cause the input to acquire measurements rather than waiting until the next Period has elapsed. Note Actions can only be executed while the Input is active. Input Actions ~ Every Period the Input will acquire measurements and store then in the time-series database. Following measurement acquisition, one or more Actions can be executed to enhance the functionality of Inputs. For example, the MQTT Publish Action can be used to publish measurements to an MQTT server. Input Options ~ Setting Description Activate After the sensor has been properly configured, activation begins acquiring measurements from the sensor. Any activated Conditional Functions will now being operating. Deactivate Deactivation stops measurements from being acquired from the sensor. All associated Conditional Functions will cease to operate. Save Save the current configuration entered into the input boxes for a particular sensor. Delete Delete a particular sensor. Acquire Measurements Now Force the input to conduct measurements and them in the database. Up/Down Move a particular sensor up or down in the order displayed. Power Output Select a output that powers the sensor. This enables powering cycling (turn off then on) when the sensor returns 3 consecutive errors to attempt to fix the issue. Transistors may also be used instead of a relay (note: NPN transistors are preferred over PNP for powering sensors). Location Depending on what sensor is being used, you will need to either select a serial number (DS18B20 temperature sensor), a GPIO pin (in the case of sensors read by a GPIO), or an I2C address. or other. I2C Bus The bus to be used to communicate with the I2C address. Period (seconds) After the sensor is successfully read and a database entry is made, this is the duration of time waited until the sensor is measured again. Measurement Unit Select the unit to save the measurement as (only available for select measurements). Pre Output If you require a output to be activated before a measurement is made (for instance, if you have a pump that extracts air to a chamber where the sensor resides), this is the output number that will be activated. The output will be activated for a duration defined by the Pre Duration, then once the output turns off, a measurement by the sensor is made. Pre Output Duration (seconds) This is the duration of time that the Pre Output runs for before the sensor measurement is obtained. Pre Output During Measurement If enabled, the Pre Output stays on during the acquisition of a measurement. If disabled, the Pre Output is turned off directly before acquiring a measurement. Command A linux command (executed as the user 'root') that the return value becomes the measurement Command Measurement The measured condition (e.g. temperature, humidity, etc.) from the linux command Command Units The units of the measurement condition from the linux command Edge Edge sensors only: Select whether the Rising or Falling (or both) edges of a changing voltage are detected. A number of devices to do this when in-line with a circuit supplying a 3.3-volt input signal to a GPIO, such as simple mechanical switch, a button, a magnet (reed/hall) sensor, a PIR motion detector, and more. Bounce Time (ms) Edge sensors only: This is the number of milliseconds to bounce the input signal. This is commonly called debouncing a signal [1] and may be necessary if using a mechanical circuit. Reset Period (seconds) Edge sensors only: This is the period of time after an edge detection that another edge will not be recorded. This enables devices such as PIR motion sensors that may stay activated for longer periods of time. Measurement Analog-to-digital converter only: The type of measurement being acquired by the ADC. For instance, if the resistance of a photocell is being measured through a voltage divider, this measurement would be \"light\". Units Analog-to-digital converter only: This is the unit of the measurement. With the above example of \"light\" as the measurement, the unit may be \"lux\" or \"intensity\". BT Adapter The Bluetooth adapter to communicate with the input. Clock Pin The GPIO (using BCM numbering) connected to the Clock pin of the ADC CS Pin The GPIO (using BCM numbering) connected to the CS pin of the ADC MISO Pin The GPIO (using BCM numbering) connected to the MISO pin of the ADC MOSI Pin The GPIO (using BCM numbering) connected to the MOSI pin of the ADC RTD Probe Type Select to measure from a PT100 or PT1000 probe. Resistor Reference (Ohm) If your reference resistor is not the default (400 Ohm for PT100, 4000 Ohm for PT1000), you can manually set this value. Several manufacturers now use 430 Ohm resistors on their circuit boards, therefore it's recommended to verify the accuracy of your measurements and adjust this value if necessary. Channel Analog-to-digital converter only: This is the channel to obtain the voltage measurement from the ADC. Gain Analog-to-digital converter only: set the gain when acquiring the measurement. Sample Speed Analog-to-digital converter only: set the sample speed (typically samples per second). Volts Min Analog-to-digital converter only: What is the minimum voltage to use when scaling to produce the unit value for the database. For instance, if your ADC is not expected to measure below 0.2 volts for your particular circuit, set this to \"0.2\". Volts Max Analog-to-digital converter only: This is similar to the Min option above, however it is setting the ceiling to the voltage range. Units Min Analog-to-digital converter only: This value will be the lower value of a range that will use the Min and Max Voltages, above, to produce a unit output. For instance, if your voltage range is 0.0 -1.0 volts, and the unit range is 1 -60, and a voltage of 0.5 is measured, in addition to 0.5 being stored in the database, 30 will be stored as well. This enables creating calibrated scales to use with your particular circuit. Units Max Analog-to-digital converter only: This is similar to the Min option above, however it is setting the ceiling to the unit range. Weighting The This is a number between 0 and 1 and indicates how much the old reading affects the new reading. It defaults to 0 which means the old reading has no effect. This may be used to smooth the data. Pulses Per Rev The number of pulses for a complete revolution. Port The server port to be queried (Server Port Open input). Times to Check The number of times to attempt to ping a server (Server Ping input). Deadline (seconds) The maximum amount of time to wait for each ping attempt, after which 0 (offline) will be returned (Server Ping input). Number of Measurement The number of unique measurements to store data for this input. Application ID The Application ID on The Things Network. App API Key The Application API Key on The Things Network. Device ID The Device ID of the Application on The Things Network. Debouncing a signal The Things Network ~ The Things Network (TTN, v2 and v3) Input module enables downloading of data from TTN if the Data Storage Integration is enabled in your TTN Application. The Data Storage Integration will store data for up to 7 days. Mycodo will download this data periodically and store the measurements locally. The payload on TTN must be properly decoded to variables that correspond to the \"Variable Name\" option under \"Channel Options\", in the lower section of the Input options. For instance, in your TTN Application, if a custom Payload Format is selected, the decoder code may look like this: function Decoder ( bytes , port ) { var decoded = {}; var rawTemp = bytes [ 0 ] + bytes [ 1 ] * 256 ; decoded . temperature = sflt162f ( rawTemp ) * 100 ; return decoded ; } function sflt162f ( rawSflt16 ) { rawSflt16 &= 0xFFFF ; if ( rawSflt16 === 0x8000 ) return - 0.0 ; var sSign = (( rawSflt16 & 0x8000 ) !== 0 ) ? - 1 : 1 ; var exp1 = ( rawSflt16 >> 11 ) & 0xF ; var mant1 = ( rawSflt16 & 0x7FF ) / 2048.0 ; return sSign * mant1 * Math . pow ( 2 , exp1 - 15 ); } This will decode the 2-byte payload into a temperature float value with the name \"temperature\". Set \"Number of Measurements\" to \"1\", then set the \"Variable Name\" for the first channel (CH0) to \"temperature\" and the \"Measurement Unit\" to \"Temperature: Celsius (\u00b0C)\". Upon activation of the Input, data will be downloaded for the past 7 days. The latest data timestamp will be stored so any subsequent activation of the Input will only download new data (since the last known timestamp). This Input also allows multiple measurements to be stored. You merely have to change \"Number of Measurements\" to a number larger than 1, save, and there will now be multiple variable names and measurement units to set. There are several example Input modules that, in addition to storing the measurements of a sensor in the influx database, will write the measurements to a serial device. This is useful of you have a LoRaWAN transmitter connected via serial to receive measurement information from Mycodo and transmit it to a LoRaWAN gateway (and subsequently to The Things Network). The data on TTN can then be downloaded elsewhere with the TTN Input. These example Input modules are located in the following locations: /opt/Mycodo/mycodo/inputs/examples/bme280_ttn.py /opt/Mycodo/mycodo/inputs/examples/k30_ttn.py For example, the following excerpt from bme_280.py will write a set of comma-separated strings to the user-specified serial device with the first string (the letter \"B\") used to denote the sensor/measurements, followed by the actual measurements (humidity, pressure, and temperature, in this case). string_send = 'B, {} , {} , {} ' . format ( return_dict [ 1 ][ 'value' ], return_dict [ 2 ][ 'value' ], return_dict [ 0 ][ 'value' ]) self . serial_send = self . serial . Serial ( self . serial_device , 9600 ) self . serial_send . write ( string_send . encode ()) This is useful if multiple data strings are to be sent to the same serial device (e.g. if both bme280_ttn.py and k30_ttn.py are being used at the same time), allowing the serial device to distinguish what data is being received. The full code used to decode both bme280_ttn.py and k30_ttn.py , with informative comments, is located at /opt/Mycodo/mycodo/inputs/examples/ttn_data_storage_decoder_example.js . These example Input modules may be modified to suit your needs and imported into Mycodo through the [Gear Icon] -> Configure -> Custom Inputs page. After import, they will be available to use on the Setup -> Input page.","title":"Inputs"},{"location":"Inputs/#custom-inputs","text":"See Building a Custom Input Module Wiki page. There is a Custom Input import system in Mycodo that allows user-created Inputs to be created an used in the Mycodo system. Custom Inputs can be uploaded and imported from the [Gear Icon] -> Configure -> Custom Inputs page. After import, they will be available to use on the Setup -> Input page. If you develop a working Input module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in modules located in the directory Mycodo/mycodo/inputs for examples of the proper formatting. There are also example Custom Inputs in the directory Mycodo/mycodo/inputs/examples Additionally, I have another github repository devoted to Custom Modules that are not included in the built-in set, at kizniche/Mycodo-custom .","title":"Custom Inputs"},{"location":"Inputs/#input-commands","text":"Input Commands are functions within the Input module that can be executed from the Web UI. This is useful for things such as calibration or other functionality specific to the input. By default, there is at least one action, Acquire Measurements Now, which will cause the input to acquire measurements rather than waiting until the next Period has elapsed. Note Actions can only be executed while the Input is active.","title":"Input Commands"},{"location":"Inputs/#input-actions","text":"Every Period the Input will acquire measurements and store then in the time-series database. Following measurement acquisition, one or more Actions can be executed to enhance the functionality of Inputs. For example, the MQTT Publish Action can be used to publish measurements to an MQTT server.","title":"Input Actions"},{"location":"Inputs/#input-options","text":"Setting Description Activate After the sensor has been properly configured, activation begins acquiring measurements from the sensor. Any activated Conditional Functions will now being operating. Deactivate Deactivation stops measurements from being acquired from the sensor. All associated Conditional Functions will cease to operate. Save Save the current configuration entered into the input boxes for a particular sensor. Delete Delete a particular sensor. Acquire Measurements Now Force the input to conduct measurements and them in the database. Up/Down Move a particular sensor up or down in the order displayed. Power Output Select a output that powers the sensor. This enables powering cycling (turn off then on) when the sensor returns 3 consecutive errors to attempt to fix the issue. Transistors may also be used instead of a relay (note: NPN transistors are preferred over PNP for powering sensors). Location Depending on what sensor is being used, you will need to either select a serial number (DS18B20 temperature sensor), a GPIO pin (in the case of sensors read by a GPIO), or an I2C address. or other. I2C Bus The bus to be used to communicate with the I2C address. Period (seconds) After the sensor is successfully read and a database entry is made, this is the duration of time waited until the sensor is measured again. Measurement Unit Select the unit to save the measurement as (only available for select measurements). Pre Output If you require a output to be activated before a measurement is made (for instance, if you have a pump that extracts air to a chamber where the sensor resides), this is the output number that will be activated. The output will be activated for a duration defined by the Pre Duration, then once the output turns off, a measurement by the sensor is made. Pre Output Duration (seconds) This is the duration of time that the Pre Output runs for before the sensor measurement is obtained. Pre Output During Measurement If enabled, the Pre Output stays on during the acquisition of a measurement. If disabled, the Pre Output is turned off directly before acquiring a measurement. Command A linux command (executed as the user 'root') that the return value becomes the measurement Command Measurement The measured condition (e.g. temperature, humidity, etc.) from the linux command Command Units The units of the measurement condition from the linux command Edge Edge sensors only: Select whether the Rising or Falling (or both) edges of a changing voltage are detected. A number of devices to do this when in-line with a circuit supplying a 3.3-volt input signal to a GPIO, such as simple mechanical switch, a button, a magnet (reed/hall) sensor, a PIR motion detector, and more. Bounce Time (ms) Edge sensors only: This is the number of milliseconds to bounce the input signal. This is commonly called debouncing a signal [1] and may be necessary if using a mechanical circuit. Reset Period (seconds) Edge sensors only: This is the period of time after an edge detection that another edge will not be recorded. This enables devices such as PIR motion sensors that may stay activated for longer periods of time. Measurement Analog-to-digital converter only: The type of measurement being acquired by the ADC. For instance, if the resistance of a photocell is being measured through a voltage divider, this measurement would be \"light\". Units Analog-to-digital converter only: This is the unit of the measurement. With the above example of \"light\" as the measurement, the unit may be \"lux\" or \"intensity\". BT Adapter The Bluetooth adapter to communicate with the input. Clock Pin The GPIO (using BCM numbering) connected to the Clock pin of the ADC CS Pin The GPIO (using BCM numbering) connected to the CS pin of the ADC MISO Pin The GPIO (using BCM numbering) connected to the MISO pin of the ADC MOSI Pin The GPIO (using BCM numbering) connected to the MOSI pin of the ADC RTD Probe Type Select to measure from a PT100 or PT1000 probe. Resistor Reference (Ohm) If your reference resistor is not the default (400 Ohm for PT100, 4000 Ohm for PT1000), you can manually set this value. Several manufacturers now use 430 Ohm resistors on their circuit boards, therefore it's recommended to verify the accuracy of your measurements and adjust this value if necessary. Channel Analog-to-digital converter only: This is the channel to obtain the voltage measurement from the ADC. Gain Analog-to-digital converter only: set the gain when acquiring the measurement. Sample Speed Analog-to-digital converter only: set the sample speed (typically samples per second). Volts Min Analog-to-digital converter only: What is the minimum voltage to use when scaling to produce the unit value for the database. For instance, if your ADC is not expected to measure below 0.2 volts for your particular circuit, set this to \"0.2\". Volts Max Analog-to-digital converter only: This is similar to the Min option above, however it is setting the ceiling to the voltage range. Units Min Analog-to-digital converter only: This value will be the lower value of a range that will use the Min and Max Voltages, above, to produce a unit output. For instance, if your voltage range is 0.0 -1.0 volts, and the unit range is 1 -60, and a voltage of 0.5 is measured, in addition to 0.5 being stored in the database, 30 will be stored as well. This enables creating calibrated scales to use with your particular circuit. Units Max Analog-to-digital converter only: This is similar to the Min option above, however it is setting the ceiling to the unit range. Weighting The This is a number between 0 and 1 and indicates how much the old reading affects the new reading. It defaults to 0 which means the old reading has no effect. This may be used to smooth the data. Pulses Per Rev The number of pulses for a complete revolution. Port The server port to be queried (Server Port Open input). Times to Check The number of times to attempt to ping a server (Server Ping input). Deadline (seconds) The maximum amount of time to wait for each ping attempt, after which 0 (offline) will be returned (Server Ping input). Number of Measurement The number of unique measurements to store data for this input. Application ID The Application ID on The Things Network. App API Key The Application API Key on The Things Network. Device ID The Device ID of the Application on The Things Network. Debouncing a signal","title":"Input Options"},{"location":"Inputs/#the-things-network","text":"The Things Network (TTN, v2 and v3) Input module enables downloading of data from TTN if the Data Storage Integration is enabled in your TTN Application. The Data Storage Integration will store data for up to 7 days. Mycodo will download this data periodically and store the measurements locally. The payload on TTN must be properly decoded to variables that correspond to the \"Variable Name\" option under \"Channel Options\", in the lower section of the Input options. For instance, in your TTN Application, if a custom Payload Format is selected, the decoder code may look like this: function Decoder ( bytes , port ) { var decoded = {}; var rawTemp = bytes [ 0 ] + bytes [ 1 ] * 256 ; decoded . temperature = sflt162f ( rawTemp ) * 100 ; return decoded ; } function sflt162f ( rawSflt16 ) { rawSflt16 &= 0xFFFF ; if ( rawSflt16 === 0x8000 ) return - 0.0 ; var sSign = (( rawSflt16 & 0x8000 ) !== 0 ) ? - 1 : 1 ; var exp1 = ( rawSflt16 >> 11 ) & 0xF ; var mant1 = ( rawSflt16 & 0x7FF ) / 2048.0 ; return sSign * mant1 * Math . pow ( 2 , exp1 - 15 ); } This will decode the 2-byte payload into a temperature float value with the name \"temperature\". Set \"Number of Measurements\" to \"1\", then set the \"Variable Name\" for the first channel (CH0) to \"temperature\" and the \"Measurement Unit\" to \"Temperature: Celsius (\u00b0C)\". Upon activation of the Input, data will be downloaded for the past 7 days. The latest data timestamp will be stored so any subsequent activation of the Input will only download new data (since the last known timestamp). This Input also allows multiple measurements to be stored. You merely have to change \"Number of Measurements\" to a number larger than 1, save, and there will now be multiple variable names and measurement units to set. There are several example Input modules that, in addition to storing the measurements of a sensor in the influx database, will write the measurements to a serial device. This is useful of you have a LoRaWAN transmitter connected via serial to receive measurement information from Mycodo and transmit it to a LoRaWAN gateway (and subsequently to The Things Network). The data on TTN can then be downloaded elsewhere with the TTN Input. These example Input modules are located in the following locations: /opt/Mycodo/mycodo/inputs/examples/bme280_ttn.py /opt/Mycodo/mycodo/inputs/examples/k30_ttn.py For example, the following excerpt from bme_280.py will write a set of comma-separated strings to the user-specified serial device with the first string (the letter \"B\") used to denote the sensor/measurements, followed by the actual measurements (humidity, pressure, and temperature, in this case). string_send = 'B, {} , {} , {} ' . format ( return_dict [ 1 ][ 'value' ], return_dict [ 2 ][ 'value' ], return_dict [ 0 ][ 'value' ]) self . serial_send = self . serial . Serial ( self . serial_device , 9600 ) self . serial_send . write ( string_send . encode ()) This is useful if multiple data strings are to be sent to the same serial device (e.g. if both bme280_ttn.py and k30_ttn.py are being used at the same time), allowing the serial device to distinguish what data is being received. The full code used to decode both bme280_ttn.py and k30_ttn.py , with informative comments, is located at /opt/Mycodo/mycodo/inputs/examples/ttn_data_storage_decoder_example.js . These example Input modules may be modified to suit your needs and imported into Mycodo through the [Gear Icon] -> Configure -> Custom Inputs page. After import, they will be available to use on the Setup -> Input page.","title":"The Things Network"},{"location":"Interfaces/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. I2C Information ~ The I2C interface should be enabled with raspi-config or from the [Gear Icon] -> Configure -> Raspberry Pi page. 1-Wire Information ~ The 1-Wire interface should be enabled with raspi-config or from the [Gear Icon] -> Configure -> Raspberry Pi page. UART Information ~ This documentation provides specific installation procedures for configuring UART with the Raspberry Pi version 1 or 2. Because the UART is handled differently higher after the Raspberry Pi 2 (due to the addition of bluetooth), there are a different set of instructions. If installing Mycodo on a Raspberry Pi 3 or above, you only need to perform these steps to configure UART: Run raspi-config sudo raspi-config Go to Advanced Options -> Serial and disable. Then edit /boot/config.txt sudo nano /boot/config.txt Find the line \"enable_uart=0\" and change it to \"enable_uart=1\", then reboot.","title":"Interfaces"},{"location":"Interfaces/#i2c-information","text":"The I2C interface should be enabled with raspi-config or from the [Gear Icon] -> Configure -> Raspberry Pi page.","title":"I2C Information"},{"location":"Interfaces/#1-wire-information","text":"The 1-Wire interface should be enabled with raspi-config or from the [Gear Icon] -> Configure -> Raspberry Pi page.","title":"1-Wire Information"},{"location":"Interfaces/#uart-information","text":"This documentation provides specific installation procedures for configuring UART with the Raspberry Pi version 1 or 2. Because the UART is handled differently higher after the Raspberry Pi 2 (due to the addition of bluetooth), there are a different set of instructions. If installing Mycodo on a Raspberry Pi 3 or above, you only need to perform these steps to configure UART: Run raspi-config sudo raspi-config Go to Advanced Options -> Serial and disable. Then edit /boot/config.txt sudo nano /boot/config.txt Find the line \"enable_uart=0\" and change it to \"enable_uart=1\", then reboot.","title":"UART Information"},{"location":"Methods/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Page: Setup -> Method Methods enable Setpoint Tracking in PIDs and time-based duty cycle changes in timers. Normally, a PID controller will regulate an environmental condition to a specific setpoint. If you would like the setpoint to change over time, this is called setpoint tracking. Setpoint Tracking is useful for applications such as reflow ovens, thermal cyclers (DNA replication), mimicking natural daily cycles, and more. Methods may also be used to change a duty cycle over time when used with a Run PWM Method Conditional. Method Options ~ These options are shared with several method types. Setting Description Start Time/Date This is the start time of a range of time. End Time/Date This is the end time of a range of time. Start Setpoint This is the start setpoint of a range of setpoints. End Setpoint This is the end setpoint of a range of setpoints. Time/Date Method ~ A time/date method allows a specific time/date span to dictate the setpoint. This is useful for long-running methods, that may take place over the period of days, weeks, or months. Duration Method ~ A Duration Method allows a Setpoint (for PIDs) or Duty Cycle (for Conditional) to be set after specific durations of time. Each new duration added will stack, meaning it will come after the previous duration, meaning a newly-added Start Setpoint will begin after the previous entry's End Setpoint . If the \"Repeat Method\" option is used, this will cause the method to repeat once it has reached the end. If this option is used, no more durations may be added to the method. If the repeat option is deleted then more durations may be added. For instance, if your method is 200 seconds total, if the Repeat Duration is set to 600 seconds, the method will repeat 3 times and then automatically turn off the PID or Conditional. Daily (Time-Based) Method ~ The daily time-based method is similar to the time/date method, however it will repeat every day. Therefore, it is essential that only the span of one day be set in this method. Begin with the start time at 00:00:00 and end at 23:59:59 (or 00:00:00, which would be 24 hours from the start). The start time must be equal or greater than the previous end time. Daily (Sine Wave) Method ~ The daily sine wave method defines the setpoint over the day based on a sinusoidal wave. The sine wave is defined by y = [A * sin(B * x + C)] + D, where A is amplitude, B is frequency, C is the angle shift, and D is the y-axis shift. This method will repeat daily. Daily (Bezier Curve) Method ~ A daily Bezier curve method define the setpoint over the day based on a cubic Bezier curve. If unfamiliar with a Bezier curve, it is recommended you use the graphical Bezier curve generator and use the 8 variables it creates for 4 points (each a set of x and y). The x-axis start (x3) and end (x0) will be automatically stretched or skewed to fit within a 24-hour period and this method will repeat daily. Cascade Method ~ This method combines multiple methods and outputs the average of the methods. For examples, let's combine a Duration method set to 100 for 60 seconds and 0 for 60 seconds (and set to repeat forever) with a Daily Method that rises from 0 at 00:00:00 to 50 at 12:00:00, and falls back to 0 at 23:59:59. At 00:00:00, the combined methods would produce an output that oscillates from 0 ((0 / 100) * (0 / 100) = 0) to 0 ((100 / 100) * (0 / 100) = 0) every 60 seconds, and gradually increase until at 12:00:00 the output would be oscillating from 0 ((0 / 100) * (50 / 100)) to 50 ((100 / 100) * (50 / 100)) every 60 seconds. This is a simple example, but combinations can become very complex.","title":"Methods"},{"location":"Methods/#method-options","text":"These options are shared with several method types. Setting Description Start Time/Date This is the start time of a range of time. End Time/Date This is the end time of a range of time. Start Setpoint This is the start setpoint of a range of setpoints. End Setpoint This is the end setpoint of a range of setpoints.","title":"Method Options"},{"location":"Methods/#timedate-method","text":"A time/date method allows a specific time/date span to dictate the setpoint. This is useful for long-running methods, that may take place over the period of days, weeks, or months.","title":"Time/Date Method"},{"location":"Methods/#duration-method","text":"A Duration Method allows a Setpoint (for PIDs) or Duty Cycle (for Conditional) to be set after specific durations of time. Each new duration added will stack, meaning it will come after the previous duration, meaning a newly-added Start Setpoint will begin after the previous entry's End Setpoint . If the \"Repeat Method\" option is used, this will cause the method to repeat once it has reached the end. If this option is used, no more durations may be added to the method. If the repeat option is deleted then more durations may be added. For instance, if your method is 200 seconds total, if the Repeat Duration is set to 600 seconds, the method will repeat 3 times and then automatically turn off the PID or Conditional.","title":"Duration Method"},{"location":"Methods/#daily-time-based-method","text":"The daily time-based method is similar to the time/date method, however it will repeat every day. Therefore, it is essential that only the span of one day be set in this method. Begin with the start time at 00:00:00 and end at 23:59:59 (or 00:00:00, which would be 24 hours from the start). The start time must be equal or greater than the previous end time.","title":"Daily (Time-Based) Method"},{"location":"Methods/#daily-sine-wave-method","text":"The daily sine wave method defines the setpoint over the day based on a sinusoidal wave. The sine wave is defined by y = [A * sin(B * x + C)] + D, where A is amplitude, B is frequency, C is the angle shift, and D is the y-axis shift. This method will repeat daily.","title":"Daily (Sine Wave) Method"},{"location":"Methods/#daily-bezier-curve-method","text":"A daily Bezier curve method define the setpoint over the day based on a cubic Bezier curve. If unfamiliar with a Bezier curve, it is recommended you use the graphical Bezier curve generator and use the 8 variables it creates for 4 points (each a set of x and y). The x-axis start (x3) and end (x0) will be automatically stretched or skewed to fit within a 24-hour period and this method will repeat daily.","title":"Daily (Bezier Curve) Method"},{"location":"Methods/#cascade-method","text":"This method combines multiple methods and outputs the average of the methods. For examples, let's combine a Duration method set to 100 for 60 seconds and 0 for 60 seconds (and set to repeat forever) with a Daily Method that rises from 0 at 00:00:00 to 50 at 12:00:00, and falls back to 0 at 23:59:59. At 00:00:00, the combined methods would produce an output that oscillates from 0 ((0 / 100) * (0 / 100) = 0) to 0 ((100 / 100) * (0 / 100) = 0) every 60 seconds, and gradually increase until at 12:00:00 the output would be oscillating from 0 ((0 / 100) * (50 / 100)) to 50 ((100 / 100) * (50 / 100)) every 60 seconds. This is a simple example, but combinations can become very complex.","title":"Cascade Method"},{"location":"Mycodo-Client/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. The Mycodo client is a command-line tool used to communicate with the daemon. pi@raspberry:~ $ mycodo-client --help usage: mycodo-client [-h] [-c] [--activatecontroller CONTROLLER ID] [--deactivatecontroller CONTROLLER ID] [--ramuse] [-t] [--trigger_action ACTIONID] [--trigger_all_actions FUNCTIONID] [--input_force_measurements INPUTID] [--backlight_on DEVID] [--backlight_off DEVID] [--lcd_reset DEVID] [--get_measurement ID UNIT CHANNEL] [--output_state OUTPUTID] [--output_currently_on OUTPUTID] [--outputoff OUTPUTID] [--outputon OUTPUTID] [--duration SECONDS] [--dutycycle DUTYCYCLE] [--pid_pause ID] [--pid_hold ID] [--pid_resume ID] [--pid_get_setpoint ID] [--pid_get_error ID] [--pid_get_integrator ID] [--pid_get_derivator ID] [--pid_get_kp ID] [--pid_get_ki ID] [--pid_get_kd ID] [--pid_set_setpoint ID SETPOINT] [--pid_set_integrator ID INTEGRATOR] [--pid_set_derivator ID DERIVATOR] [--pid_set_kp ID KP] [--pid_set_ki ID KI] [--pid_set_kd ID KD] Client for Mycodo daemon. optional arguments: -h, --help show this help message and exit -c, --checkdaemon Check if all active daemon controllers are running --activatecontroller CONTROLLER ID Activate controller. Options: Conditional, PID, Input --deactivatecontroller CONTROLLER ID Deactivate controller. Options: Conditional, PID, Input --ramuse Return the amount of ram used by the Mycodo daemon -t, --terminate Terminate the daemon --trigger_action ACTIONID Trigger action with Action ID --trigger_all_actions FUNCTIONID Trigger all actions belonging to Function with ID --input_force_measurements INPUTID Force acquiring measurements for Input ID --backlight_on DEVID Turn on display backlight with device ID --backlight_off DEVID Turn off display backlight with device ID --lcd_reset DEVID Reset display with device ID --get_measurement ID UNIT CHANNEL Get the last measurement --output_state OUTPUTID State of output with output ID --output_currently_on OUTPUTID How many seconds an output has currently been active for --outputoff OUTPUTID Turn off output with output ID --outputon OUTPUTID Turn on output with output ID --duration SECONDS Turn on output for a duration of time (seconds) --dutycycle DUTYCYCLE Turn on PWM output for a duty cycle (%) --pid_pause ID Pause PID controller. --pid_hold ID Hold PID controller. --pid_resume ID Resume PID controller. --pid_get_setpoint ID Get the setpoint value of the PID controller. --pid_get_error ID Get the error value of the PID controller. --pid_get_integrator ID Get the integrator value of the PID controller. --pid_get_derivator ID Get the derivator value of the PID controller. --pid_get_kp ID Get the Kp gain of the PID controller. --pid_get_ki ID Get the Ki gain of the PID controller. --pid_get_kd ID Get the Kd gain of the PID controller. --pid_set_setpoint ID SETPOINT Set the setpoint value of the PID controller. --pid_set_integrator ID INTEGRATOR Set the integrator value of the PID controller. --pid_set_derivator ID DERIVATOR Set the derivator value of the PID controller. --pid_set_kp ID KP Set the Kp gain of the PID controller. --pid_set_ki ID KI Set the Ki gain of the PID controller. --pid_set_kd ID KD Set the Kd gain of the PID controller.","title":"Mycodo Client"},{"location":"Notes/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Page: More -> Notes Notes may be created that can then be displayed on graphs or referenced at a later time. All notes are timestamped with the date/time of creation or may be created with a custom date/time. Each note must have at least one tag selected. Tags are what are selected to be displayed on a graph and all notes with that tag will appear in the time frame selected on the graph. Tag Options ~ Setting Description Name A name for the tag. Must not contain spaces. Rename Rename the tag. Note Options ~ Setting Description Name A name for the note. Use Custom Date/Time Check to enter a custom date/time for the note. Custom Date/Time Store the note with this custom date/time. Attached Files Attach one or more files to the note. Tags Associate the note with at least one tag. Note The text body of the note. The text will appear monospaced, so code will format properly.","title":"Notes"},{"location":"Notes/#tag-options","text":"Setting Description Name A name for the tag. Must not contain spaces. Rename Rename the tag.","title":"Tag Options"},{"location":"Notes/#note-options","text":"Setting Description Name A name for the note. Use Custom Date/Time Check to enter a custom date/time for the note. Custom Date/Time Store the note with this custom date/time. Attached Files Attach one or more files to the note. Tags Associate the note with at least one tag. Note The text body of the note. The text will appear monospaced, so code will format properly.","title":"Note Options"},{"location":"Outputs/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Page: Setup -> Output For a full list of supported Outputs, see Supported Outputs Devices . Outputs are various signals that can be generated that operate devices. An output can be a HIGH/LOW signal on a GPIO pin, a pulse-width modulated (PWM) signal, a 315/433 MHz signal to switch a radio frequency-operated relay, driving of pumps and motors, or an execution of a linux or Python command, to name a few. Custom Outputs ~ There is a Custom Output import system in Mycodo that allows user-created Outputs to be created an used in the Mycodo system. Custom Outputs can be uploaded and imported from the [Gear Icon] -> Configure -> Custom Outputs page. After import, they will be available to use on the Setup -> Output page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in modules located in the directory Mycodo/mycodo/outputs for examples of the proper formatting. There are also example Custom Outputs in the directory Mycodo/mycodo/outputs/examples For Outputs that require new measurements/units, they can be added on the [Gear Icon] -> Configure -> Measurements page. Output Options ~ Setting Description Pin (GPIO) This is the GPIO that will be the signal to the output, using BCM numbering. WiringPi Pin This is the GPIO that will be the signal to the output, using WiringPi numbering. On State This is the state of the GPIO to signal the output to turn the device on. HIGH will send a 3.3-volt signal and LOW will send a 0-volt signal. If you output completes the circuit (and the device powers on) when a 3.3-volt signal is sent, then set this to HIGH. If the device powers when a 0-volt signal is sent, set this to LOW. Protocol This is the protocol to use to transmit via 315/433 MHz. Default is 1, but if this doesn't work, increment the number. UART Device The UART device connected to the device. Baud Rate The baud rate of the UART device. I2C Address The I2C address of the device. I2C Bus The I2C bus the device is connected to. Output Mode The Output mode, if supported. Flow Rate The flow rate to dispense the volume (ml/min). Pulse Length This is the pulse length to transmit via 315/433 MHz. Default is 189 ms. Bit Length This is the bit length to transmit via 315/433 MHz. Default is 24-bit. Execute as User Select which user executes Linux Commands. On Command This is the command used to turn the output on. For wireless relays, this is the numerical command to be transmitted, and for command outputs this is the command to be executed. Commands may be for the linux terminal or Python 3 (depending on which output type selected). Off Command This is the command used to turn the output off. For wireless relays, this is the numerical command to be transmitted, and for command outputs this is the command to be executed. Commands may be for the linux terminal or Python 3 (depending on which output type selected). Force Command If an Output is already on, enabling this option will allow the On command to be executed rather than returning \"Output is already On\". PWM Command This is the command used to set the duty cycle. The string \"((duty_cycle))\" in the command will be replaced with the actual duty cycle before the command is executed. Ensure \"((duty_cycle))\" is included in your command for this feature to work correctly. Commands may be for the linux terminal or Python 3 (depending on which output type selected). Current Draw (amps) The is the amount of current the device powered by the output draws. Note: this value should be calculated based on the voltage set in the Energy Usage Settings. Startup State This specifies whether the output should be ON or OFF when mycodo initially starts. Some outputs have an additional options. Startup Value If the Startup State is set to User Set Value (such as for PWM Outputs), then this value will be set when Mycodo starts up. Shutdown State This specifies whether the output should be ON or OFF when mycodo initially shuts down. Some outputs have an additional options. Shutdown Value If the Shutdown State is set to User Set Value (such as for PWM Outputs), then this value will be set when Mycodo shuts down. Trigger at Startup Select to enable triggering Functions (such as Output Triggers) when Mycodo starts and if Start State is set to ON. Seconds to turn On This is a way to turn a output on for a specific duration of time. This can be useful for testing the outputs and powered devices or the measured effects a device may have on an environmental condition. On/Off (GPIO) ~ The On/Off (GPIO) output merely turns a GPIO pin High (3.3 volts) or Low (0 volts). This is useful for controlling things like electromechanical switches, such as relays, to turn electrical devices on and off. Relays are electromechanical or solid-state devices that enable a small voltage signal (such as from a microprocessor) to activate a much larger voltage, without exposing the low-voltage system to the dangers of the higher voltage. Add and configure outputs in the Output tab. Outputs must be properly set up before they can be used in the rest of the system. To set up a wired relay, set the \"GPIO Pin\" (using BCM numbering) to the pin you would like to switch High (5 volts) and Low (0 volts), which can be used to activate relays and other devices. On Trigger should be set to the signal state (High or Low) that induces the device to turn on. For example, if your relay activates when the potential across the coil is 0-volts, set On Trigger to \"Low\", otherwise if your relay activates when the potential across the coil is 5 volts, set it to \"High\". Pulse-Width Modulation (PWM) ~ Pulse-width modulation (PWM) is a modulation technique used to encode a message into a pulsing signal, at a specific frequency in Hertz (Hz). The average value of voltage (and current) fed to the load is controlled by turning the switch between supply and load on and off at a fast rate. The longer the switch is on compared to the off periods, the higher the total power supplied to the load. The PWM switching frequency has to be much higher than what would affect the load (the device that uses the power), which is to say that the resultant waveform perceived by the load must be as smooth as possible. The rate (or frequency) at which the power supply must switch can vary greatly depending on load and application, for example Quote Switching has to be done several times a minute in an electric stove; 120 Hz in a lamp dimmer; between a few kilohertz (kHz) to tens of kHz for a motor drive; and well into the tens or hundreds of kHz in audio amplifiers and computer power supplies. The term duty cycle describes the proportion of 'on' time to the regular interval or 'period' of time; a low duty cycle corresponds to low power, because the power is off for most of the time. Duty cycle is expressed in percent, with 0% being always off, 50% being off for half of the time and on for half of the time, and 100% being always on. Pulse-Width Modulation (PWM) Options ~ Setting Description Library Select the method for producing the PWM signal. Hardware pins can produce up to a 30 MHz PWM signal, while any other (non-hardware PWM) pin can produce up to a 40 kHz PWM signal. See the table, below, for the hardware pins on various Pi boards. Pin (GPIO) This is the GPIO pin that will output the PWM signal, using BCM numbering. Frequency (Hertz) This is frequency of the PWM signal. Invert Signal Send an inverted duty cycle to the output controller. Duty Cycle This is the proportion of the time on to the time off, expressed in percent (0 -100). Non-hardware PWM Pins ~ When using non-hardware PWM pins, there are only certain frequencies that can be used. These frequencies in Hertz are 40000, 20000, 10000, 8000, 5000, 4000, 2500, 2000, 1600, 1250, 1000, 800, 500, 400, 250, 200, 100, and 50 Hz. If you attempt to set a frequency that is not listed here, the nearest frequency from this list will be used. Hardware PWM Pins ~ The exact frequency may be set when using hardware PWM pins. The same PWM channel is available on multiple GPIO. The latest frequency and duty cycle setting will be used by all GPIO pins which share a PWM channel. BCM Pin PWM Channel Raspberry Pi Version 12 0 All models except A and B 13 1 All models except A and B 18 0 All models 19 1 All models except A and B 40 0 Compute module only 41 1 Compute module only 45 1 Compute module only 52 0 Compute module only 53 1 Compute module only Schematics for DC Fan Control ~ Below are hardware schematics that enable controlling direct current (DC) fans from the PWM output from Mycodo. PWM output controlling a 12-volt DC fan (such as a PC fan) Schematics for AC Modulation ~ Below are hardware schematics that enable the modulation of alternating current (AC) from the PWM output from Mycodo. PWM output modulating alternating current (AC) at 1% duty cycle PWM output modulating alternating current (AC) at 50% duty cycle PWM output modulating alternating current (AC) at 99% duty cycle Peristaltic Pump ~ There are two peristaltic pump Output modules that Mycodo supports, a generic peristaltic pump Output, and the Atlas Scientific EZO-PMP peristaltic pump. Generic Peristaltic Pump ~ Any peristaltic pump can be used with the Generic Peristaltic Pump Output to dispense liquids. The most basic dispensing abilities are to start dispensing, stop dispensing, or dispense for a duration of time. If the pump rate has been measured, this value can be entered into the Fastest Rate (ml/min) setting and the Output controller will then be able to dispense specific volumes rather than merely for durations of time. In oder to dispense specific volumes, the Output Mode will also need to be set in addition to the Desired Flow Rate (ml/min), if the Output Mode has been set to Specify Flow Rate. To determine your pump's flow rate, first purge all air from your pump's hose. Next, instruct the pump to dispense for 60 seconds and collect the liquid it dispenses. Once finished, measure the amount of liquid and enter this value, in milliliters into the Fastest Rate (ml/min) setting. Once your pump's flow rate is set, you can now start dispensing specific volumes rather than durations. This Output module relies on switching a GPIO pin High and Low to switch the peristaltic pump on and off. This is most easily accomplished with the use of a relay in-line with your pump's power supply or using the GPIO as an input signal directly to the pump (if supported). When using a relay, it's important to develop your circuit to provide the fastest possible switching of the pump. Since the volume dispensed by the pump is dependent on time, the faster the pump switching can occur, the more accurate the dispensing will be. Many peristaltic pumps operate on DC voltage and require an AC-DC converter. These converters can take a significant amount of time to energize once power is applied as well as de-energize once power is removed, causing significant delays that can impact dispensing accuracy. To alleviate this issue, the DC power should be switched, rather than the AC power, which will remove this potential delay. Atlas Scientific Peristaltic Pump ~ The Atlas Scientific peristaltic pump is a peristaltic pump and microcontroller combined that allows it to be communicated with via I2C or Serial and can accurately dispense specific volumes of fluid. There are several commands the pump can accept, including commands to calibrate, turn on, turn off, and dispense at a specific rate, among others. Atlas Scientific peristaltic pumps are good options, but are more expensive than generic peristaltic pumps. Peristaltic Pump Options ~ Setting Description Output Mode \"Fastest low Rate\" will pump liquid at the fastest rate the pump can perform. \"Specify Flow Rate\" will pump liquid at the rate set by the \"Flow Rate (ml/min)\" option. Flow Rate (ml/min) This is how fast liquid will be pumped if the \"Specify Flow Rate\" option is selected for the Output Mode option. Fastest Rate (ml/min) This is the rate at which the pump dispenses liquid, in ml/min. Minimum On (sec/min) This is the minimum duration (seconds) the pump should be turned on for every 60 second period of pumping. This option is only used when Specify Flow Rate is selected as the output Mode. Wireless 315/433 MHz ~ Certain 315/433 MHz wireless relays may be used, however you will need to set the pin of the transmitter (using BCM numbering), pulse length, bit length, protocol, on command, and off command. To determine your On and Off commands, connect a 315/433 MHz receiver to your Pi, then run the receiver script, below, replacing 17 with the pin your receiver is connected to (using BCM numbering), and press one of the buttons on your remote (either on or off) to detect the numeric code associated with that button. sudo /opt/Mycodo/env/bin/python /opt/Mycodo/mycodo/devices/wireless_rpi_rf.py -d 2 -g 17 433 MHz wireless relays have been successfully tested with SMAKN 433MHz RF Transmitters/Receivers and Etekcity Wireless Remote Control Electrical Outlets (see Issue 88 for more information). If you have a 315/433 MHz transmitter/receiver and a wireless relay that does not work with the current code, submit a new issue with details of your hardware. Linux Command ~ Another option for output control is to execute a terminal command when the output is turned on, off, or a duty cycle is set. Commands will be executed as the user 'root'. When a Linux Command output is created, example code is provided to demonstrate how to use the output. Python Command ~ The Python Command output operates similarly to the Linux Command output, however Python 3 code is being executed. When a Python Command output is created, example code is provided to demonstrate how to use the output. Output Notes ~ Wireless and Command (Linux/Python) Outputs: Since the wireless protocol only allows 1-way communication to 315/433 MHz devices, wireless relays are assumed to be off until they are turned on, and therefore will appear red (off) when added. If a wireless relay is turned off or on outside Mycodo (by a remote, for instance), Mycodo will *not * be able to determine the state of the relay and will indicate whichever state the relay was last. This is, if Mycodo turns the wireless relay on, and a remote is used to turn the relay off, Mycodo will still assume the relay is on.","title":"Outputs"},{"location":"Outputs/#custom-outputs","text":"There is a Custom Output import system in Mycodo that allows user-created Outputs to be created an used in the Mycodo system. Custom Outputs can be uploaded and imported from the [Gear Icon] -> Configure -> Custom Outputs page. After import, they will be available to use on the Setup -> Output page. If you develop a working module, please consider creating a new GitHub issue or pull request, and it may be included in the built-in set. Open any of the built-in modules located in the directory Mycodo/mycodo/outputs for examples of the proper formatting. There are also example Custom Outputs in the directory Mycodo/mycodo/outputs/examples For Outputs that require new measurements/units, they can be added on the [Gear Icon] -> Configure -> Measurements page.","title":"Custom Outputs"},{"location":"Outputs/#output-options","text":"Setting Description Pin (GPIO) This is the GPIO that will be the signal to the output, using BCM numbering. WiringPi Pin This is the GPIO that will be the signal to the output, using WiringPi numbering. On State This is the state of the GPIO to signal the output to turn the device on. HIGH will send a 3.3-volt signal and LOW will send a 0-volt signal. If you output completes the circuit (and the device powers on) when a 3.3-volt signal is sent, then set this to HIGH. If the device powers when a 0-volt signal is sent, set this to LOW. Protocol This is the protocol to use to transmit via 315/433 MHz. Default is 1, but if this doesn't work, increment the number. UART Device The UART device connected to the device. Baud Rate The baud rate of the UART device. I2C Address The I2C address of the device. I2C Bus The I2C bus the device is connected to. Output Mode The Output mode, if supported. Flow Rate The flow rate to dispense the volume (ml/min). Pulse Length This is the pulse length to transmit via 315/433 MHz. Default is 189 ms. Bit Length This is the bit length to transmit via 315/433 MHz. Default is 24-bit. Execute as User Select which user executes Linux Commands. On Command This is the command used to turn the output on. For wireless relays, this is the numerical command to be transmitted, and for command outputs this is the command to be executed. Commands may be for the linux terminal or Python 3 (depending on which output type selected). Off Command This is the command used to turn the output off. For wireless relays, this is the numerical command to be transmitted, and for command outputs this is the command to be executed. Commands may be for the linux terminal or Python 3 (depending on which output type selected). Force Command If an Output is already on, enabling this option will allow the On command to be executed rather than returning \"Output is already On\". PWM Command This is the command used to set the duty cycle. The string \"((duty_cycle))\" in the command will be replaced with the actual duty cycle before the command is executed. Ensure \"((duty_cycle))\" is included in your command for this feature to work correctly. Commands may be for the linux terminal or Python 3 (depending on which output type selected). Current Draw (amps) The is the amount of current the device powered by the output draws. Note: this value should be calculated based on the voltage set in the Energy Usage Settings. Startup State This specifies whether the output should be ON or OFF when mycodo initially starts. Some outputs have an additional options. Startup Value If the Startup State is set to User Set Value (such as for PWM Outputs), then this value will be set when Mycodo starts up. Shutdown State This specifies whether the output should be ON or OFF when mycodo initially shuts down. Some outputs have an additional options. Shutdown Value If the Shutdown State is set to User Set Value (such as for PWM Outputs), then this value will be set when Mycodo shuts down. Trigger at Startup Select to enable triggering Functions (such as Output Triggers) when Mycodo starts and if Start State is set to ON. Seconds to turn On This is a way to turn a output on for a specific duration of time. This can be useful for testing the outputs and powered devices or the measured effects a device may have on an environmental condition.","title":"Output Options"},{"location":"Outputs/#onoff-gpio","text":"The On/Off (GPIO) output merely turns a GPIO pin High (3.3 volts) or Low (0 volts). This is useful for controlling things like electromechanical switches, such as relays, to turn electrical devices on and off. Relays are electromechanical or solid-state devices that enable a small voltage signal (such as from a microprocessor) to activate a much larger voltage, without exposing the low-voltage system to the dangers of the higher voltage. Add and configure outputs in the Output tab. Outputs must be properly set up before they can be used in the rest of the system. To set up a wired relay, set the \"GPIO Pin\" (using BCM numbering) to the pin you would like to switch High (5 volts) and Low (0 volts), which can be used to activate relays and other devices. On Trigger should be set to the signal state (High or Low) that induces the device to turn on. For example, if your relay activates when the potential across the coil is 0-volts, set On Trigger to \"Low\", otherwise if your relay activates when the potential across the coil is 5 volts, set it to \"High\".","title":"On/Off (GPIO)"},{"location":"Outputs/#pulse-width-modulation-pwm","text":"Pulse-width modulation (PWM) is a modulation technique used to encode a message into a pulsing signal, at a specific frequency in Hertz (Hz). The average value of voltage (and current) fed to the load is controlled by turning the switch between supply and load on and off at a fast rate. The longer the switch is on compared to the off periods, the higher the total power supplied to the load. The PWM switching frequency has to be much higher than what would affect the load (the device that uses the power), which is to say that the resultant waveform perceived by the load must be as smooth as possible. The rate (or frequency) at which the power supply must switch can vary greatly depending on load and application, for example Quote Switching has to be done several times a minute in an electric stove; 120 Hz in a lamp dimmer; between a few kilohertz (kHz) to tens of kHz for a motor drive; and well into the tens or hundreds of kHz in audio amplifiers and computer power supplies. The term duty cycle describes the proportion of 'on' time to the regular interval or 'period' of time; a low duty cycle corresponds to low power, because the power is off for most of the time. Duty cycle is expressed in percent, with 0% being always off, 50% being off for half of the time and on for half of the time, and 100% being always on.","title":"Pulse-Width Modulation (PWM)"},{"location":"Outputs/#pulse-width-modulation-pwm-options","text":"Setting Description Library Select the method for producing the PWM signal. Hardware pins can produce up to a 30 MHz PWM signal, while any other (non-hardware PWM) pin can produce up to a 40 kHz PWM signal. See the table, below, for the hardware pins on various Pi boards. Pin (GPIO) This is the GPIO pin that will output the PWM signal, using BCM numbering. Frequency (Hertz) This is frequency of the PWM signal. Invert Signal Send an inverted duty cycle to the output controller. Duty Cycle This is the proportion of the time on to the time off, expressed in percent (0 -100).","title":"Pulse-Width Modulation (PWM) Options"},{"location":"Outputs/#non-hardware-pwm-pins","text":"When using non-hardware PWM pins, there are only certain frequencies that can be used. These frequencies in Hertz are 40000, 20000, 10000, 8000, 5000, 4000, 2500, 2000, 1600, 1250, 1000, 800, 500, 400, 250, 200, 100, and 50 Hz. If you attempt to set a frequency that is not listed here, the nearest frequency from this list will be used.","title":"Non-hardware PWM Pins"},{"location":"Outputs/#hardware-pwm-pins","text":"The exact frequency may be set when using hardware PWM pins. The same PWM channel is available on multiple GPIO. The latest frequency and duty cycle setting will be used by all GPIO pins which share a PWM channel. BCM Pin PWM Channel Raspberry Pi Version 12 0 All models except A and B 13 1 All models except A and B 18 0 All models 19 1 All models except A and B 40 0 Compute module only 41 1 Compute module only 45 1 Compute module only 52 0 Compute module only 53 1 Compute module only","title":"Hardware PWM Pins"},{"location":"Outputs/#schematics-for-dc-fan-control","text":"Below are hardware schematics that enable controlling direct current (DC) fans from the PWM output from Mycodo. PWM output controlling a 12-volt DC fan (such as a PC fan)","title":"Schematics for DC Fan Control"},{"location":"Outputs/#schematics-for-ac-modulation","text":"Below are hardware schematics that enable the modulation of alternating current (AC) from the PWM output from Mycodo. PWM output modulating alternating current (AC) at 1% duty cycle PWM output modulating alternating current (AC) at 50% duty cycle PWM output modulating alternating current (AC) at 99% duty cycle","title":"Schematics for AC Modulation"},{"location":"Outputs/#peristaltic-pump","text":"There are two peristaltic pump Output modules that Mycodo supports, a generic peristaltic pump Output, and the Atlas Scientific EZO-PMP peristaltic pump.","title":"Peristaltic Pump"},{"location":"Outputs/#generic-peristaltic-pump","text":"Any peristaltic pump can be used with the Generic Peristaltic Pump Output to dispense liquids. The most basic dispensing abilities are to start dispensing, stop dispensing, or dispense for a duration of time. If the pump rate has been measured, this value can be entered into the Fastest Rate (ml/min) setting and the Output controller will then be able to dispense specific volumes rather than merely for durations of time. In oder to dispense specific volumes, the Output Mode will also need to be set in addition to the Desired Flow Rate (ml/min), if the Output Mode has been set to Specify Flow Rate. To determine your pump's flow rate, first purge all air from your pump's hose. Next, instruct the pump to dispense for 60 seconds and collect the liquid it dispenses. Once finished, measure the amount of liquid and enter this value, in milliliters into the Fastest Rate (ml/min) setting. Once your pump's flow rate is set, you can now start dispensing specific volumes rather than durations. This Output module relies on switching a GPIO pin High and Low to switch the peristaltic pump on and off. This is most easily accomplished with the use of a relay in-line with your pump's power supply or using the GPIO as an input signal directly to the pump (if supported). When using a relay, it's important to develop your circuit to provide the fastest possible switching of the pump. Since the volume dispensed by the pump is dependent on time, the faster the pump switching can occur, the more accurate the dispensing will be. Many peristaltic pumps operate on DC voltage and require an AC-DC converter. These converters can take a significant amount of time to energize once power is applied as well as de-energize once power is removed, causing significant delays that can impact dispensing accuracy. To alleviate this issue, the DC power should be switched, rather than the AC power, which will remove this potential delay.","title":"Generic Peristaltic Pump"},{"location":"Outputs/#atlas-scientific-peristaltic-pump","text":"The Atlas Scientific peristaltic pump is a peristaltic pump and microcontroller combined that allows it to be communicated with via I2C or Serial and can accurately dispense specific volumes of fluid. There are several commands the pump can accept, including commands to calibrate, turn on, turn off, and dispense at a specific rate, among others. Atlas Scientific peristaltic pumps are good options, but are more expensive than generic peristaltic pumps.","title":"Atlas Scientific Peristaltic Pump"},{"location":"Outputs/#peristaltic-pump-options","text":"Setting Description Output Mode \"Fastest low Rate\" will pump liquid at the fastest rate the pump can perform. \"Specify Flow Rate\" will pump liquid at the rate set by the \"Flow Rate (ml/min)\" option. Flow Rate (ml/min) This is how fast liquid will be pumped if the \"Specify Flow Rate\" option is selected for the Output Mode option. Fastest Rate (ml/min) This is the rate at which the pump dispenses liquid, in ml/min. Minimum On (sec/min) This is the minimum duration (seconds) the pump should be turned on for every 60 second period of pumping. This option is only used when Specify Flow Rate is selected as the output Mode.","title":"Peristaltic Pump Options"},{"location":"Outputs/#wireless-315433-mhz","text":"Certain 315/433 MHz wireless relays may be used, however you will need to set the pin of the transmitter (using BCM numbering), pulse length, bit length, protocol, on command, and off command. To determine your On and Off commands, connect a 315/433 MHz receiver to your Pi, then run the receiver script, below, replacing 17 with the pin your receiver is connected to (using BCM numbering), and press one of the buttons on your remote (either on or off) to detect the numeric code associated with that button. sudo /opt/Mycodo/env/bin/python /opt/Mycodo/mycodo/devices/wireless_rpi_rf.py -d 2 -g 17 433 MHz wireless relays have been successfully tested with SMAKN 433MHz RF Transmitters/Receivers and Etekcity Wireless Remote Control Electrical Outlets (see Issue 88 for more information). If you have a 315/433 MHz transmitter/receiver and a wireless relay that does not work with the current code, submit a new issue with details of your hardware.","title":"Wireless 315/433 MHz"},{"location":"Outputs/#linux-command","text":"Another option for output control is to execute a terminal command when the output is turned on, off, or a duty cycle is set. Commands will be executed as the user 'root'. When a Linux Command output is created, example code is provided to demonstrate how to use the output.","title":"Linux Command"},{"location":"Outputs/#python-command","text":"The Python Command output operates similarly to the Linux Command output, however Python 3 code is being executed. When a Python Command output is created, example code is provided to demonstrate how to use the output.","title":"Python Command"},{"location":"Outputs/#output-notes","text":"Wireless and Command (Linux/Python) Outputs: Since the wireless protocol only allows 1-way communication to 315/433 MHz devices, wireless relays are assumed to be off until they are turned on, and therefore will appear red (off) when added. If a wireless relay is turned off or on outside Mycodo (by a remote, for instance), Mycodo will *not * be able to determine the state of the relay and will indicate whichever state the relay was last. This is, if Mycodo turns the wireless relay on, and a remote is used to turn the relay off, Mycodo will still assume the relay is on.","title":"Output Notes"},{"location":"Python-Code/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. There are numerous places where Python 3 code can be used within Mycodo, including the Python Code Input, the Python Code Output, and Conditional Function. Here are a few example that demonstrates some useful ways to interact with Mycodo with Python 3 code. In all the Mycodo environments where your code will be executed, the DaemonControl() Class of mycodo/mycodo_client.py is available to communicate with the daemon using the object \"control\". Outputs ~ PWM Fan with a Minimum Duty Cycle to Spin ~ Some PWM-controlled fans do not start spinning until a minimum duty cycle is set. Once the fan is spinning, the duty cycle can be set much lower and the fan will continue to spin. Because of this, there needs to be a \"charging\" step if the fan is turning on from a duty cycle of 0. This code detects if the requested duty cycle will need to execute the charging step prior to setting the duty cycle. For this, you will need A GPIO PWM Output and a Python Code PWM Output. The GPIO PWM Output will be configured for the fan, and the Python Code PWM Output will be configured with the following code: import time # Set the variables the first time the code is executed if not hasattr ( self , \"output_id_gpio_pwm\" ): self . logger . debug ( \"Initializing\" ) self . output_id_gpio_pwm = \"a3dade60-091a-49d7-9c79-cd2adf41bc23\" # UUID of GPIO PWM Output self . fan_spinning = False # saves the state of the fan self . fan_min_duty_cycle = 2 # The lowest duty cycle that will keep the fan spinning self . fan_spin_duty_cycle = 25 # The minimum duty cycle to get the fan spinning if it's been off self . fan_charge_duty_cycle = 45 # The charging duty cycle to get the fan initially spinning self . fan_spin_duration_sec = 1.5 # The duration to run the fan at the charge duty cycle # Charge the fan if it's not spinning and the desired duty cycle is too low if duty_cycle and not self . fan_spinning and duty_cycle < self . fan_spin_duty_cycle : self . logger . debug ( \"Duty cycle too low and fan is off. Charging.\" ) self . logger . debug ( \"Setting duty cycle of {} %\" . format ( self . fan_charge_duty_cycle )) control . output_on ( self . output_id_gpio_pwm , output_type = 'pwm' , amount = self . fan_charge_duty_cycle , output_channel = 0 ) time . sleep ( self . fan_spin_duration_sec ) self . fan_spinning = True if duty_cycle == 0 : self . logger . debug ( \"Fan turned off\" ) self . fan_spinning = False elif duty_cycle > self . fan_spin_duty_cycle : self . fan_spinning = True self . logger . debug ( \"Setting duty cycle of {} %\" . format ( duty_cycle )) control . output_on ( self . output_id_gpio_pwm , output_type = 'pwm' , amount = duty_cycle , output_channel = 0 )","title":"Python Code"},{"location":"Python-Code/#outputs","text":"","title":"Outputs"},{"location":"Python-Code/#pwm-fan-with-a-minimum-duty-cycle-to-spin","text":"Some PWM-controlled fans do not start spinning until a minimum duty cycle is set. Once the fan is spinning, the duty cycle can be set much lower and the fan will continue to spin. Because of this, there needs to be a \"charging\" step if the fan is turning on from a duty cycle of 0. This code detects if the requested duty cycle will need to execute the charging step prior to setting the duty cycle. For this, you will need A GPIO PWM Output and a Python Code PWM Output. The GPIO PWM Output will be configured for the fan, and the Python Code PWM Output will be configured with the following code: import time # Set the variables the first time the code is executed if not hasattr ( self , \"output_id_gpio_pwm\" ): self . logger . debug ( \"Initializing\" ) self . output_id_gpio_pwm = \"a3dade60-091a-49d7-9c79-cd2adf41bc23\" # UUID of GPIO PWM Output self . fan_spinning = False # saves the state of the fan self . fan_min_duty_cycle = 2 # The lowest duty cycle that will keep the fan spinning self . fan_spin_duty_cycle = 25 # The minimum duty cycle to get the fan spinning if it's been off self . fan_charge_duty_cycle = 45 # The charging duty cycle to get the fan initially spinning self . fan_spin_duration_sec = 1.5 # The duration to run the fan at the charge duty cycle # Charge the fan if it's not spinning and the desired duty cycle is too low if duty_cycle and not self . fan_spinning and duty_cycle < self . fan_spin_duty_cycle : self . logger . debug ( \"Duty cycle too low and fan is off. Charging.\" ) self . logger . debug ( \"Setting duty cycle of {} %\" . format ( self . fan_charge_duty_cycle )) control . output_on ( self . output_id_gpio_pwm , output_type = 'pwm' , amount = self . fan_charge_duty_cycle , output_channel = 0 ) time . sleep ( self . fan_spin_duration_sec ) self . fan_spinning = True if duty_cycle == 0 : self . logger . debug ( \"Fan turned off\" ) self . fan_spinning = False elif duty_cycle > self . fan_spin_duty_cycle : self . fan_spinning = True self . logger . debug ( \"Setting duty cycle of {} %\" . format ( duty_cycle )) control . output_on ( self . output_id_gpio_pwm , output_type = 'pwm' , amount = duty_cycle , output_channel = 0 )","title":"PWM Fan with a Minimum Duty Cycle to Spin"},{"location":"Supported-Actions/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Built-In Actions (System) ~ Actions: Pause ~ Manufacturer: Mycodo Works with: Functions Set a delay between executing Actions when self.run_all_actions() is used. Usage: Executing self.run_action(\"ACTION_ID\") will create a pause for the set duration. When self.run_all_actions() is executed, this will add a pause in the sequential execution of all actions. Options ~ Duration (seconds) ~ Type: Decimal Description: The duration to pause Camera: Capture Photo ~ Manufacturer: Mycodo Works with: Functions Capture a photo with the selected Camera. Usage: Executing self.run_action(\"ACTION_ID\") will capture a photo with the selected Camera. Executing self.run_action(\"ACTION_ID\", value={\"camera_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will capture a photo with the Camera with the specified ID. Options ~ Camera ~ Type: Select Device Description: Select the Camera to take a photo Camera: Time-lapse: Pause ~ Manufacturer: Mycodo Works with: Functions Pause a camera time-lapse Usage: Executing self.run_action(\"ACTION_ID\") will pause the selected Camera time-lapse. Executing self.run_action(\"ACTION_ID\", value={\"camera_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will pause the Camera time-lapse with the specified ID. Options ~ Camera ~ Type: Select Device Description: Select the Camera to pause the time-lapse Camera: Time-lapse: Resume ~ Manufacturer: Mycodo Works with: Functions Resume a camera time-lapse Usage: Executing self.run_action(\"ACTION_ID\") will resume the selected Camera time-lapse. Executing self.run_action(\"ACTION_ID\", value={\"camera_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will resume the Camera time-lapse with the specified ID. Options ~ Camera ~ Type: Select Device Description: Select the Camera to resume the time-lapse Controller: Activate ~ Manufacturer: Mycodo Works with: Functions Activate a controller. Usage: Executing self.run_action(\"ACTION_ID\") will activate the selected Controller. Executing self.run_action(\"ACTION_ID\", value={\"controller_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will activate the controller with the specified ID. Options ~ Controller ~ Type: Select Device Description: Select the controller to activate Controller: Deactivate ~ Manufacturer: Mycodo Works with: Functions Deactivate a controller. Usage: Executing self.run_action(\"ACTION_ID\") will deactivate the selected Controller. Executing self.run_action(\"ACTION_ID\", value={\"controller_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will deactivate the controller with the specified ID. Options ~ Controller ~ Type: Select Device Description: Select the controller to deactivate Create: Note ~ Manufacturer: Mycodo Works with: Functions Create a note with the selected Tag. Usage: Executing self.run_action(\"ACTION_ID\") will create a note with the selected tag and note. Executing self.run_action(\"ACTION_ID\", value={\"tags\": [\"tag1\", \"tag2\"], \"name\": \"My Note\", \"note\": \"this is a message\"}) will execute the action with the specified list of tag(s) and note. If using only one tag, make it the only element of the list (e.g. [\"tag1\"]). If note is not specified, then the action message will be used as the note. Options ~ Tags ~ Description: Select one or more tags Name ~ Type: Text Default Value: Name Description: The name of the note Note ~ Type: Text Default Value: Note Description: The body of the note Execute Command: Shell ~ Manufacturer: Mycodo Works with: Functions Execute a Linux bash shell command. Usage: Executing self.run_action(\"ACTION_ID\") will execute the bash command.Executing self.run_action(\"ACTION_ID\", value={\"user\": \"mycodo\", \"command\": \"/home/pi/my_script.sh on\"}) will execute the action with the specified command and user. Options ~ User ~ Type: Text Default Value: mycodo Description: The user to execute the command Command ~ Type: Text Default Value: /home/pi/my_script.sh on Description: Command to execute Flow Meter: Clear Total Volume ~ Manufacturer: Mycodo Works with: Functions Clear the total volume saved for a flow meter Input. The Input must have the Clear Total Volume option. Usage: Executing self.run_action(\"ACTION_ID\") will clear the total volume for the selected flow meter Input. Executing self.run_action(\"ACTION_ID\", value={\"input_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will clear the total volume for the flow meter Input with the specified ID. Options ~ Controller ~ Type: Select Device Description: Select the flow meter Input Input: Force Measurements ~ Manufacturer: Mycodo Works with: Functions Force measurements to be conducted for an input Usage: Executing self.run_action(\"ACTION_ID\") will force acquiring measurements for the selected Input. Executing self.run_action(\"ACTION_ID\", value={\"input_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will force acquiring measurements for the Input with the specified ID. Options ~ Input ~ Type: Select Device Description: Select an Input MQTT: Publish ~ Manufacturer: Mycodo Works with: Functions Dependencies: paho-mqtt Publish to an MQTT server. Usage: Executing self.run_action(\"ACTION_ID\") will publish the saved payload text options to the MQTT server. Executing self.run_action(\"ACTION_ID\", value={\"payload\": 42}) will publish the specified payload (any type) to the MQTT server. You can also specify the topic (e.g. value={\"topic\": \"my_topic\", \"payload\": 42}). Warning: If using multiple MQTT Inputs or Functions, ensure the Client IDs are unique. Options ~ Hostname ~ Type: Text Default Value: localhost Description: The hostname of the MQTT server Port ~ Type: Integer Default Value: 1883 Description: The port of the MQTT server Topic ~ Type: Text Default Value: paho/test/single Description: The topic to publish with Payload ~ Type: Text Description: The payload to publish Keep Alive ~ Type: Integer Default Value: 60 Description: The keepalive timeout value for the client. Set to 0 to disable. Client ID ~ Type: Text Default Value: client_796v1NR4 Description: Unique client ID for connecting to the MQTT server Use Login ~ Type: Boolean Description: Send login credentials Username ~ Type: Text Default Value: user Description: Username for connecting to the server Password ~ Type: Text Description: Password for connecting to the server MQTT: Publish: Measurement ~ Manufacturer: Mycodo Works with: Inputs Dependencies: paho-mqtt Publish an Input measurement to an MQTT server. Options ~ Measurement ~ Description: Select the measurement to send as the payload Hostname ~ Type: Text Default Value: localhost Description: The hostname of the MQTT server Port ~ Type: Integer Default Value: 1883 Description: The port of the MQTT server Topic ~ Type: Text Default Value: paho/test/single Description: The topic to publish with Keep Alive ~ Type: Integer Default Value: 60 Description: The keepalive timeout value for the client. Set to 0 to disable. Client ID ~ Type: Text Default Value: client_YeURfmKy Description: Unique client ID for connecting to the MQTT server Use Login ~ Type: Boolean Description: Send login credentials Username ~ Type: Text Default Value: user Description: Username for connecting to the server Password ~ Type: Text Description: Password for connecting to the server. Output: Duty Cycle ~ Manufacturer: Mycodo Works with: Functions Set a PWM Output to set a duty cycle. Usage: Executing self.run_action(\"ACTION_ID\") will set the PWM output duty cycle. Executing self.run_action(\"ACTION_ID\", value={\"output_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"channel\": 0, \"duty_cycle\": 42}) will set the duty cycle of the PWM output with the specified ID and channel. Options ~ Output ~ Type: Select Channel Selections: Output_Channels Description: Select an output to control Duty Cycle ~ Type: Decimal Description: Duty cycle for the PWM (percent, 0.0 - 100.0) Output: On/Off/Duration ~ Manufacturer: Mycodo Works with: Functions Turn an On/Off Output On, Off, or On for a duration. Usage: Executing self.run_action(\"ACTION_ID\") will actuate an output. Executing self.run_action(\"ACTION_ID\", value={\"output_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"channel\": 0, \"state\": \"on\", \"duration\": 300}) will set the state of the output with the specified ID and channel. If state is on and a duration is set, the output will turn off after the duration. Options ~ Output ~ Type: Select Channel Selections: Output_Channels Description: Select an output to control State ~ Type: Select Description: Turn the output on or off Duration (seconds) ~ Type: Decimal Description: If On, you can set a duration to turn the output on. 0 stays on. Output: Ramp Duty Cycle ~ Manufacturer: Mycodo Works with: Functions Ramp a PWM Output from one duty cycle to another duty cycle over a period of time. Usage: Executing self.run_action(\"ACTION_ID\") will ramp the PWM output duty cycle according to the settings. Executing self.run_action(\"ACTION_ID\", value={\"output_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"channel\": 0, \"start\": 42, \"end\": 62, \"increment\": 1.0, \"duration\": 600}) will ramp the duty cycle of the PWM output with the specified ID and channel. Options ~ Output ~ Type: Select Channel Selections: Output_Channels Description: Select an output to control Duty Cycle: Start ~ Type: Decimal Description: Duty cycle for the PWM (percent, 0.0 - 100.0) Duty Cycle: End ~ Type: Decimal Default Value: 50.0 Description: Duty cycle for the PWM (percent, 0.0 - 100.0) Increment (Duty Cycle) ~ Type: Decimal Default Value: 1.0 Description: How much to change the duty cycle every Duration Duration (seconds) ~ Type: Decimal Description: How long to ramp from start to finish. Output: Value ~ Manufacturer: Mycodo Works with: Functions Send a value to the Output. Usage: Executing self.run_action(\"ACTION_ID\") will actuate a value output. Executing self.run_action(\"ACTION_ID\", value={\"output_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"channel\": 0, \"value\": 42}) will send a value to the output with the specified ID and channel. Options ~ Output ~ Type: Select Channel Selections: Output_Channels Description: Select an output to control Value ~ Type: Decimal Description: The value to send to the output Output: Volume ~ Manufacturer: Mycodo Works with: Functions Instruct the Output to dispense a volume. Usage: Executing self.run_action(\"ACTION_ID\") will actuate a volume output. Executing self.run_action(\"ACTION_ID\", value={\"output_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"channel\": 0, \"volume\": 42}) will send a volume to the output with the specified ID and channel. Options ~ Output ~ Type: Select Channel Selections: Output_Channels Description: Select an output to control Volume ~ Type: Decimal Description: The volume to send to the output PID: Lower: Setpoint ~ Manufacturer: Mycodo Works with: Functions Lower the Setpoint of a PID. Usage: Executing self.run_action(\"ACTION_ID\") will lower the setpoint of the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value={\"pid_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"amount\": 2}) will lower the setpoint of the PID with the specified ID. Options ~ Controller ~ Type: Select Device Description: Select the PID Controller to lower the setpoint of Lower Setpoint ~ Type: Decimal Description: The amount to lower the PID setpoint by PID: Pause ~ Manufacturer: Mycodo Works with: Functions Pause a PID. Usage: Executing self.run_action(\"ACTION_ID\") will pause the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value=\"959019d1-c1fa-41fe-a554-7be3366a9c5b\") will pause the PID Controller with the specified ID. Options ~ Controller ~ Type: Select Device Description: Select the PID Controller to pause PID: Raise: Setpoint ~ Manufacturer: Mycodo Works with: Functions Raise the Setpoint of a PID. Usage: Executing self.run_action(\"ACTION_ID\") will raise the setpoint of the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value={\"pid_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"amount\": 2}) will raise the setpoint of the PID with the specified ID. Options ~ Controller ~ Type: Select Device Description: Select the PID Controller to raise the setpoint of Raise Setpoint ~ Type: Decimal Description: The amount to raise the PID setpoint by PID: Resume ~ Manufacturer: Mycodo Works with: Functions Resume a PID. Usage: Executing self.run_action(\"ACTION_ID\") will resume the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value=\"959019d1-c1fa-41fe-a554-7be3366a9c5b\") will resume the PID Controller with the specified ID. Options ~ Controller ~ Type: Select Device Description: Select the PID Controller to resume PID: Set Method ~ Manufacturer: Mycodo Works with: Functions Select a method to set the PID to use. Usage: Executing self.run_action(\"ACTION_ID\") will pause the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value={\"pid_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"method_id\": \"fe8b8f41-131b-448d-ba7b-00a044d24075\"}) will set a method for the PID Controller with the specified IDs. Options ~ Controller ~ Type: Select Device Description: Select the PID Controller to apply the method Method ~ Type: Select Device Description: Select the Method to apply to the PID PID: Set: Setpoint ~ Manufacturer: Mycodo Works with: Functions Set the Setpoint of a PID. Usage: Executing self.run_action(\"ACTION_ID\") will set the setpoint of the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value={\"setpoint\": 42}) will set the setpoint of the PID Controller (e.g. 42). You can also specify the PID ID (e.g. value={\"setpoint\": 42, \"pid_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) Options ~ Controller ~ Type: Select Device Description: Select the PID Controller to pause Setpoint ~ Type: Decimal Description: The setpoint to set the PID Controller Send Email ~ Manufacturer: Mycodo Works with: Functions Send an email. Usage: Executing self.run_action(\"ACTION_ID\") will email the specified recipient(s) using the SMTP credentials in the system configuration. Separate multiple recipients with commas. The body of the email will be the self-generated message. Executing self.run_action(\"ACTION_ID\", value={\"email_address\": [\"email1@email.com\", \"email2@email.com\"], \"message\": \"My message\"}) will send an email to the specified recipient(s) with the specified message. Options ~ E-Mail Address ~ Type: Text Default Value: email@domain.com Description: E-mail recipient(s) (separate multiple addresses with commas) Send Email with Photo ~ Manufacturer: Mycodo Works with: Functions Take a photo and send an email with it attached. Usage: Executing self.run_action(\"ACTION_ID\") will take a photo and email it to the specified recipient(s) using the SMTP credentials in the system configuration. Separate multiple recipients with commas. The body of the email will be the self-generated message. Executing self.run_action(\"ACTION_ID\", value={\"camera_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"email_address\": [\"email1@email.com\", \"email2@email.com\"], \"message\": \"My message\"}) will capture a photo using the camera with the specified ID and send an email to the specified email(s) with message and attached photo. Options ~ Camera ~ Type: Select Device Description: Select the Camera to take a photo with E-Mail Address ~ Type: Text Default Value: email@domain.com Description: E-mail recipient(s). Separate multiple with commas. System: Restart ~ Manufacturer: Mycodo Works with: Functions Restart the System Usage: Executing self.run_action(\"ACTION_ID\") will restart the system in 10 seconds. System: Shutdown ~ Manufacturer: Mycodo Works with: Functions Shutdown the System Usage: Executing self.run_action(\"ACTION_ID\") will shut down the system in 10 seconds. Webhook ~ Manufacturer: Mycodo Works with: Functions Emits a HTTP request when triggered. The first line contains a HTTP verb (GET, POST, PUT, ...) followed by a space and the URL to call. Subsequent lines are optional \"name: value\"-header parameters. After a blank line, the body payload to be sent follows. {{{message}}} is a placeholder that gets replaced by the message, {{{quoted_message}}} is the message in an URL safe encoding. Usage: Executing self.run_action(\"ACTION_ID\") will run the Action. Options ~ Webhook Request ~ Description: HTTP request to execute Built-In Actions (Devices) ~ Display: Backlight: Color ~ Manufacturer: Display Works with: Functions Set the display backlight color Usage: Executing self.run_action(\"ACTION_ID\") will change the backlight color on the selected display. Executing self.run_action(\"ACTION_ID\", value={\"display_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"color\": \"255,0,0\"}) will change the backlight color on the controller with the specified ID and color. Options ~ Display ~ Type: Select Device Description: Select the display to set the backlight color Color (RGB) ~ Type: Text Default Value: 255,0,0 Description: Color as R,G,B values (e.g. \"255,0,0\" without quotes) Display: Backlight: Off ~ Manufacturer: Display Works with: Functions Turn display backlight off Usage: Executing self.run_action(\"ACTION_ID\") will turn the backlight off for the selected display. Executing self.run_action(\"ACTION_ID\", value={\"display_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will turn the backlight off for the controller with the specified ID. Options ~ Display ~ Type: Select Device Description: Select the display to turn the backlight off Display: Backlight: On ~ Manufacturer: Display Works with: Functions Turn display backlight on Usage: Executing self.run_action(\"ACTION_ID\") will turn the backlight on for the selected display. Executing self.run_action(\"ACTION_ID\", value={\"display_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will turn the backlight on for the controller with the specified ID. Options ~ Display ~ Type: Select Device Description: Select the display to turn the backlight on Display: Flashing: Off ~ Manufacturer: Display Works with: Functions Turn display flashing off Usage: Executing self.run_action(\"ACTION_ID\") will stop the backlight flashing on the selected display. Executing self.run_action(\"ACTION_ID\", value={\"display_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will stop the backlight flashing on the controller with the specified ID. Options ~ Display ~ Type: Select Device Description: Select the display to stop flashing the backlight Display: Flashing: On ~ Manufacturer: Display Works with: Functions Turn display flashing on Usage: Executing self.run_action(\"ACTION_ID\") will start the backlight flashing on the selected display. Executing self.run_action(\"ACTION_ID\", value={\"display_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will start the backlight flashing on the controller with the specified ID. Options ~ Display ~ Type: Select Device Description: Select the display to start flashing the backlight","title":"Supported Actions"},{"location":"Supported-Actions/#built-in-actions-system","text":"","title":"Built-In Actions (System)"},{"location":"Supported-Actions/#actions-pause","text":"Manufacturer: Mycodo Works with: Functions Set a delay between executing Actions when self.run_all_actions() is used. Usage: Executing self.run_action(\"ACTION_ID\") will create a pause for the set duration. When self.run_all_actions() is executed, this will add a pause in the sequential execution of all actions.","title":"Actions: Pause"},{"location":"Supported-Actions/#options","text":"","title":"Options"},{"location":"Supported-Actions/#camera-capture-photo","text":"Manufacturer: Mycodo Works with: Functions Capture a photo with the selected Camera. Usage: Executing self.run_action(\"ACTION_ID\") will capture a photo with the selected Camera. Executing self.run_action(\"ACTION_ID\", value={\"camera_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will capture a photo with the Camera with the specified ID.","title":"Camera: Capture Photo"},{"location":"Supported-Actions/#options_1","text":"","title":"Options"},{"location":"Supported-Actions/#camera-time-lapse-pause","text":"Manufacturer: Mycodo Works with: Functions Pause a camera time-lapse Usage: Executing self.run_action(\"ACTION_ID\") will pause the selected Camera time-lapse. Executing self.run_action(\"ACTION_ID\", value={\"camera_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will pause the Camera time-lapse with the specified ID.","title":"Camera: Time-lapse: Pause"},{"location":"Supported-Actions/#options_2","text":"","title":"Options"},{"location":"Supported-Actions/#camera-time-lapse-resume","text":"Manufacturer: Mycodo Works with: Functions Resume a camera time-lapse Usage: Executing self.run_action(\"ACTION_ID\") will resume the selected Camera time-lapse. Executing self.run_action(\"ACTION_ID\", value={\"camera_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will resume the Camera time-lapse with the specified ID.","title":"Camera: Time-lapse: Resume"},{"location":"Supported-Actions/#options_3","text":"","title":"Options"},{"location":"Supported-Actions/#controller-activate","text":"Manufacturer: Mycodo Works with: Functions Activate a controller. Usage: Executing self.run_action(\"ACTION_ID\") will activate the selected Controller. Executing self.run_action(\"ACTION_ID\", value={\"controller_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will activate the controller with the specified ID.","title":"Controller: Activate"},{"location":"Supported-Actions/#options_4","text":"","title":"Options"},{"location":"Supported-Actions/#controller-deactivate","text":"Manufacturer: Mycodo Works with: Functions Deactivate a controller. Usage: Executing self.run_action(\"ACTION_ID\") will deactivate the selected Controller. Executing self.run_action(\"ACTION_ID\", value={\"controller_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will deactivate the controller with the specified ID.","title":"Controller: Deactivate"},{"location":"Supported-Actions/#options_5","text":"","title":"Options"},{"location":"Supported-Actions/#create-note","text":"Manufacturer: Mycodo Works with: Functions Create a note with the selected Tag. Usage: Executing self.run_action(\"ACTION_ID\") will create a note with the selected tag and note. Executing self.run_action(\"ACTION_ID\", value={\"tags\": [\"tag1\", \"tag2\"], \"name\": \"My Note\", \"note\": \"this is a message\"}) will execute the action with the specified list of tag(s) and note. If using only one tag, make it the only element of the list (e.g. [\"tag1\"]). If note is not specified, then the action message will be used as the note.","title":"Create: Note"},{"location":"Supported-Actions/#options_6","text":"","title":"Options"},{"location":"Supported-Actions/#execute-command-shell","text":"Manufacturer: Mycodo Works with: Functions Execute a Linux bash shell command. Usage: Executing self.run_action(\"ACTION_ID\") will execute the bash command.Executing self.run_action(\"ACTION_ID\", value={\"user\": \"mycodo\", \"command\": \"/home/pi/my_script.sh on\"}) will execute the action with the specified command and user.","title":"Execute Command: Shell"},{"location":"Supported-Actions/#options_7","text":"","title":"Options"},{"location":"Supported-Actions/#flow-meter-clear-total-volume","text":"Manufacturer: Mycodo Works with: Functions Clear the total volume saved for a flow meter Input. The Input must have the Clear Total Volume option. Usage: Executing self.run_action(\"ACTION_ID\") will clear the total volume for the selected flow meter Input. Executing self.run_action(\"ACTION_ID\", value={\"input_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will clear the total volume for the flow meter Input with the specified ID.","title":"Flow Meter: Clear Total Volume"},{"location":"Supported-Actions/#options_8","text":"","title":"Options"},{"location":"Supported-Actions/#input-force-measurements","text":"Manufacturer: Mycodo Works with: Functions Force measurements to be conducted for an input Usage: Executing self.run_action(\"ACTION_ID\") will force acquiring measurements for the selected Input. Executing self.run_action(\"ACTION_ID\", value={\"input_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will force acquiring measurements for the Input with the specified ID.","title":"Input: Force Measurements"},{"location":"Supported-Actions/#options_9","text":"","title":"Options"},{"location":"Supported-Actions/#mqtt-publish","text":"Manufacturer: Mycodo Works with: Functions Dependencies: paho-mqtt Publish to an MQTT server. Usage: Executing self.run_action(\"ACTION_ID\") will publish the saved payload text options to the MQTT server. Executing self.run_action(\"ACTION_ID\", value={\"payload\": 42}) will publish the specified payload (any type) to the MQTT server. You can also specify the topic (e.g. value={\"topic\": \"my_topic\", \"payload\": 42}). Warning: If using multiple MQTT Inputs or Functions, ensure the Client IDs are unique.","title":"MQTT: Publish"},{"location":"Supported-Actions/#options_10","text":"","title":"Options"},{"location":"Supported-Actions/#mqtt-publish-measurement","text":"Manufacturer: Mycodo Works with: Inputs Dependencies: paho-mqtt Publish an Input measurement to an MQTT server.","title":"MQTT: Publish: Measurement"},{"location":"Supported-Actions/#options_11","text":"","title":"Options"},{"location":"Supported-Actions/#output-duty-cycle","text":"Manufacturer: Mycodo Works with: Functions Set a PWM Output to set a duty cycle. Usage: Executing self.run_action(\"ACTION_ID\") will set the PWM output duty cycle. Executing self.run_action(\"ACTION_ID\", value={\"output_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"channel\": 0, \"duty_cycle\": 42}) will set the duty cycle of the PWM output with the specified ID and channel.","title":"Output: Duty Cycle"},{"location":"Supported-Actions/#options_12","text":"","title":"Options"},{"location":"Supported-Actions/#output-onoffduration","text":"Manufacturer: Mycodo Works with: Functions Turn an On/Off Output On, Off, or On for a duration. Usage: Executing self.run_action(\"ACTION_ID\") will actuate an output. Executing self.run_action(\"ACTION_ID\", value={\"output_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"channel\": 0, \"state\": \"on\", \"duration\": 300}) will set the state of the output with the specified ID and channel. If state is on and a duration is set, the output will turn off after the duration.","title":"Output: On/Off/Duration"},{"location":"Supported-Actions/#options_13","text":"","title":"Options"},{"location":"Supported-Actions/#output-ramp-duty-cycle","text":"Manufacturer: Mycodo Works with: Functions Ramp a PWM Output from one duty cycle to another duty cycle over a period of time. Usage: Executing self.run_action(\"ACTION_ID\") will ramp the PWM output duty cycle according to the settings. Executing self.run_action(\"ACTION_ID\", value={\"output_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"channel\": 0, \"start\": 42, \"end\": 62, \"increment\": 1.0, \"duration\": 600}) will ramp the duty cycle of the PWM output with the specified ID and channel.","title":"Output: Ramp Duty Cycle"},{"location":"Supported-Actions/#options_14","text":"","title":"Options"},{"location":"Supported-Actions/#output-value","text":"Manufacturer: Mycodo Works with: Functions Send a value to the Output. Usage: Executing self.run_action(\"ACTION_ID\") will actuate a value output. Executing self.run_action(\"ACTION_ID\", value={\"output_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"channel\": 0, \"value\": 42}) will send a value to the output with the specified ID and channel.","title":"Output: Value"},{"location":"Supported-Actions/#options_15","text":"","title":"Options"},{"location":"Supported-Actions/#output-volume","text":"Manufacturer: Mycodo Works with: Functions Instruct the Output to dispense a volume. Usage: Executing self.run_action(\"ACTION_ID\") will actuate a volume output. Executing self.run_action(\"ACTION_ID\", value={\"output_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"channel\": 0, \"volume\": 42}) will send a volume to the output with the specified ID and channel.","title":"Output: Volume"},{"location":"Supported-Actions/#options_16","text":"","title":"Options"},{"location":"Supported-Actions/#pid-lower-setpoint","text":"Manufacturer: Mycodo Works with: Functions Lower the Setpoint of a PID. Usage: Executing self.run_action(\"ACTION_ID\") will lower the setpoint of the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value={\"pid_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"amount\": 2}) will lower the setpoint of the PID with the specified ID.","title":"PID: Lower: Setpoint"},{"location":"Supported-Actions/#options_17","text":"","title":"Options"},{"location":"Supported-Actions/#pid-pause","text":"Manufacturer: Mycodo Works with: Functions Pause a PID. Usage: Executing self.run_action(\"ACTION_ID\") will pause the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value=\"959019d1-c1fa-41fe-a554-7be3366a9c5b\") will pause the PID Controller with the specified ID.","title":"PID: Pause"},{"location":"Supported-Actions/#options_18","text":"","title":"Options"},{"location":"Supported-Actions/#pid-raise-setpoint","text":"Manufacturer: Mycodo Works with: Functions Raise the Setpoint of a PID. Usage: Executing self.run_action(\"ACTION_ID\") will raise the setpoint of the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value={\"pid_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"amount\": 2}) will raise the setpoint of the PID with the specified ID.","title":"PID: Raise: Setpoint"},{"location":"Supported-Actions/#options_19","text":"","title":"Options"},{"location":"Supported-Actions/#pid-resume","text":"Manufacturer: Mycodo Works with: Functions Resume a PID. Usage: Executing self.run_action(\"ACTION_ID\") will resume the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value=\"959019d1-c1fa-41fe-a554-7be3366a9c5b\") will resume the PID Controller with the specified ID.","title":"PID: Resume"},{"location":"Supported-Actions/#options_20","text":"","title":"Options"},{"location":"Supported-Actions/#pid-set-method","text":"Manufacturer: Mycodo Works with: Functions Select a method to set the PID to use. Usage: Executing self.run_action(\"ACTION_ID\") will pause the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value={\"pid_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"method_id\": \"fe8b8f41-131b-448d-ba7b-00a044d24075\"}) will set a method for the PID Controller with the specified IDs.","title":"PID: Set Method"},{"location":"Supported-Actions/#options_21","text":"","title":"Options"},{"location":"Supported-Actions/#pid-set-setpoint","text":"Manufacturer: Mycodo Works with: Functions Set the Setpoint of a PID. Usage: Executing self.run_action(\"ACTION_ID\") will set the setpoint of the selected PID Controller. Executing self.run_action(\"ACTION_ID\", value={\"setpoint\": 42}) will set the setpoint of the PID Controller (e.g. 42). You can also specify the PID ID (e.g. value={\"setpoint\": 42, \"pid_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"})","title":"PID: Set: Setpoint"},{"location":"Supported-Actions/#options_22","text":"","title":"Options"},{"location":"Supported-Actions/#send-email","text":"Manufacturer: Mycodo Works with: Functions Send an email. Usage: Executing self.run_action(\"ACTION_ID\") will email the specified recipient(s) using the SMTP credentials in the system configuration. Separate multiple recipients with commas. The body of the email will be the self-generated message. Executing self.run_action(\"ACTION_ID\", value={\"email_address\": [\"email1@email.com\", \"email2@email.com\"], \"message\": \"My message\"}) will send an email to the specified recipient(s) with the specified message.","title":"Send Email"},{"location":"Supported-Actions/#options_23","text":"","title":"Options"},{"location":"Supported-Actions/#send-email-with-photo","text":"Manufacturer: Mycodo Works with: Functions Take a photo and send an email with it attached. Usage: Executing self.run_action(\"ACTION_ID\") will take a photo and email it to the specified recipient(s) using the SMTP credentials in the system configuration. Separate multiple recipients with commas. The body of the email will be the self-generated message. Executing self.run_action(\"ACTION_ID\", value={\"camera_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"email_address\": [\"email1@email.com\", \"email2@email.com\"], \"message\": \"My message\"}) will capture a photo using the camera with the specified ID and send an email to the specified email(s) with message and attached photo.","title":"Send Email with Photo"},{"location":"Supported-Actions/#options_24","text":"","title":"Options"},{"location":"Supported-Actions/#system-restart","text":"Manufacturer: Mycodo Works with: Functions Restart the System Usage: Executing self.run_action(\"ACTION_ID\") will restart the system in 10 seconds.","title":"System: Restart"},{"location":"Supported-Actions/#system-shutdown","text":"Manufacturer: Mycodo Works with: Functions Shutdown the System Usage: Executing self.run_action(\"ACTION_ID\") will shut down the system in 10 seconds.","title":"System: Shutdown"},{"location":"Supported-Actions/#webhook","text":"Manufacturer: Mycodo Works with: Functions Emits a HTTP request when triggered. The first line contains a HTTP verb (GET, POST, PUT, ...) followed by a space and the URL to call. Subsequent lines are optional \"name: value\"-header parameters. After a blank line, the body payload to be sent follows. {{{message}}} is a placeholder that gets replaced by the message, {{{quoted_message}}} is the message in an URL safe encoding. Usage: Executing self.run_action(\"ACTION_ID\") will run the Action.","title":"Webhook"},{"location":"Supported-Actions/#options_25","text":"","title":"Options"},{"location":"Supported-Actions/#built-in-actions-devices","text":"","title":"Built-In Actions (Devices)"},{"location":"Supported-Actions/#display-backlight-color","text":"Manufacturer: Display Works with: Functions Set the display backlight color Usage: Executing self.run_action(\"ACTION_ID\") will change the backlight color on the selected display. Executing self.run_action(\"ACTION_ID\", value={\"display_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\", \"color\": \"255,0,0\"}) will change the backlight color on the controller with the specified ID and color.","title":"Display: Backlight: Color"},{"location":"Supported-Actions/#options_26","text":"","title":"Options"},{"location":"Supported-Actions/#display-backlight-off","text":"Manufacturer: Display Works with: Functions Turn display backlight off Usage: Executing self.run_action(\"ACTION_ID\") will turn the backlight off for the selected display. Executing self.run_action(\"ACTION_ID\", value={\"display_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will turn the backlight off for the controller with the specified ID.","title":"Display: Backlight: Off"},{"location":"Supported-Actions/#options_27","text":"","title":"Options"},{"location":"Supported-Actions/#display-backlight-on","text":"Manufacturer: Display Works with: Functions Turn display backlight on Usage: Executing self.run_action(\"ACTION_ID\") will turn the backlight on for the selected display. Executing self.run_action(\"ACTION_ID\", value={\"display_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will turn the backlight on for the controller with the specified ID.","title":"Display: Backlight: On"},{"location":"Supported-Actions/#options_28","text":"","title":"Options"},{"location":"Supported-Actions/#display-flashing-off","text":"Manufacturer: Display Works with: Functions Turn display flashing off Usage: Executing self.run_action(\"ACTION_ID\") will stop the backlight flashing on the selected display. Executing self.run_action(\"ACTION_ID\", value={\"display_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will stop the backlight flashing on the controller with the specified ID.","title":"Display: Flashing: Off"},{"location":"Supported-Actions/#options_29","text":"","title":"Options"},{"location":"Supported-Actions/#display-flashing-on","text":"Manufacturer: Display Works with: Functions Turn display flashing on Usage: Executing self.run_action(\"ACTION_ID\") will start the backlight flashing on the selected display. Executing self.run_action(\"ACTION_ID\", value={\"display_id\": \"959019d1-c1fa-41fe-a554-7be3366a9c5b\"}) will start the backlight flashing on the controller with the specified ID.","title":"Display: Flashing: On"},{"location":"Supported-Actions/#options_30","text":"","title":"Options"},{"location":"Supported-Functions/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Built-In Functions ~ Average (Last, Multiple) ~ This function acquires the last measurement of those that are selected, averages them, then stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Measurement to replace \"x\" in the equation Average (Past, Single) ~ This function acquires the past measurements (within Max Age) for the selected measurement, averages them, then stores the resulting value as the selected measurement and unit. Note: There is a bug in InfluxDB 1.8.10 that prevents the mean() function from working properly. Therefore, if you are using Influxdb v1.x, the median() function will be used. InfluxDB 2.x is unaffected and uses mean(). To get the true mean, upgrade to InfluxDB 2.x. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Measurement Select Measurement (Input, Function) Measurement to replace \"x\" in the equation Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Backup to Remote Host (rsync) ~ Dependencies: rsync This function will use rsync to back up assets on this system to a remote system. Your remote system needs to have an SSH server running and rsync installed. This system will need rsync installed and be able to access your remote system via SSH keyfile (login without a password). You can do this by creating an SSH key on this system running Mycodo with \"ssh-keygen\" (leave the password field empty), then run \"ssh-copy-id -i ~/.ssh/id_rsa.pub pi@REMOTE_HOST_IP\" to transfer your public SSH key to your remote system (changing pi and REMOTE_HOST_IP to the appropriate user and host of your remote system). You can test if this worked by trying to connect to your remote system with \"ssh pi@REMOTE_HOST_IP\" and you should log in without being asked for a password. Be careful not to set the Period too low, which could cause the function to begin running before the previous operation(s) complete. Therefore, it is recommended to set a relatively long Period (greater than 10 minutes). The default Period is 15 days. Note that the Period will reset if the system or the Mycodo daemon restarts and the Function will run, generating new settings and measurement archives that will be synced. There are two common ways to use this Function: 1) A short period (1 hour), only have Backup Camera Directories enabled, and use the Backup Settings Now and Backup Measurements Now buttons manually to perform a backup, and 2) A long period (15 days), only have Backup Settings and Backup Measurements enabled. You can even create two of these Functions with one set up to perform long-Period settings and measurement backups and the other set up to perform short-Period camera backups. Option Type Description Period (Seconds) Decimal - Default Value: 1296000 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 300 The duration to wait before the first operation Local User Text - Default Value: pi The user on this system that will run rsync Remote User Text - Default Value: pi The user to log in to the remote host Remote Host Text - Default Value: 192.168.0.50 The IP or host address to send the backup to Remote Backup Path Text - Default Value: /home/pi/backup_mycodo The path to backup to on the remote host Rsync Timeout (Seconds) Integer - Default Value: 3600 How long to allow rsync to complete Local Backup Path Text A local path to backup (leave blank to disable) Backup Settings Export File Boolean - Default Value: True Create and backup exported settings file Remove Local Settings Backups Boolean Remove local settings backups after successful transfer to remote host Backup Measurements Boolean - Default Value: True Backup all influxdb measurements Remove Local Measurements Backups Boolean Remove local measurements backups after successful transfer to remote host Backup Camera Directories Boolean - Default Value: True Backup all camera directories Remove Local Camera Images Boolean Remove local camera images after successful transfer to remote host SSH Port Integer - Default Value: 22 Specify a nonstandard SSH port Commands Backup of settings are only created if the Mycodo version or database versions change. This is due to this Function running periodically- if it created a new backup every Period, there would soon be many identical backups. Therefore, if you want to induce the backup of settings, measurements, or camera directories and sync them to your remote system, use the buttons below. Backup Settings Now Button Backup Measurements Now Button Backup Camera Directories Now Button Bang-Bang Hysteretic (On/Off) (Raise/Lower) ~ A simple bang-bang control for controlling one output from one input. Select an input, an output, enter a setpoint and a hysteresis, and select a direction. The output will turn on when the input is below (lower = setpoint - hysteresis) and turn off when the input is above (higher = setpoint + hysteresis). This is the behavior when Raise is selected, such as when heating. Lower direction has the opposite behavior - it will try to turn the output on in order to drive the input lower. Option Type Description Measurement Select Measurement (Input, Function) Select a measurement the selected output will affect Measurement: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Output Select Device, Measurement, and Channel (Output) Select an output to control that will affect the measurement Setpoint Decimal - Default Value: 50 The desired setpoint Hysteresis Decimal - Default Value: 1 The amount above and below the setpoint that defines the control band Direction Select(Options: [ Raise | Lower] (Default in bold ) Raise means the measurement will increase when the control is on (heating). Lower means the measurement will decrease when the output is on (cooling) Period (Seconds) Decimal - Default Value: 5 The duration between measurements or actions Bang-Bang Hysteretic (On/Off) (Raise/Lower/Both) ~ A simple bang-bang control for controlling one or two outputs from one input. Select an input, a raise and/or lower output, enter a setpoint and a hysteresis, and select a direction. The output will turn on when the input is below (lower = setpoint - hysteresis) and turn off when the input is above (higher = setpoint + hysteresis). This is the behavior when Raise is selected, such as when heating. Lower direction has the opposite behavior - it will try to turn the output on in order to drive the input lower. The Both option will raise and lower. Note: This output will only work with On/Off Outputs. Option Type Description Measurement Select Measurement (Input, Function) Select a measurement the selected output will affect Measurement: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Output (Raise) Select Device, Measurement, and Channel (Output) Select an output to control that will raise the measurement Output (Lower) Select Device, Measurement, and Channel (Output) Select an output to control that will lower the measurement Setpoint Decimal - Default Value: 50 The desired setpoint Hysteresis Decimal - Default Value: 1 The amount above and below the setpoint that defines the control band Direction Select(Options: [Raise | Lower | Both ] (Default in bold ) Raise means the measurement will increase when the control is on (heating). Lower means the measurement will decrease when the output is on (cooling) Period (Seconds) Decimal - Default Value: 5 The duration between measurements or actions Bang-Bang Hysteretic (PWM) (Raise/Lower/Both) ~ A simple bang-bang control for controlling one PWM output from one input. Select an input, a PWM output, enter a setpoint and a hysteresis, and select a direction. The output will turn on when the input is below below (lower = setpoint - hysteresis) and turn off when the input is above (higher = setpoint + hysteresis). This is the behavior when Raise is selected, such as when heating. Lower direction has the opposite behavior - it will try to turn the output on in order to drive the input lower. The Both option will raise and lower. Note: This output will only work with PWM Outputs. Option Type Description Measurement Select Measurement (Input, Function) Select a measurement the selected output will affect Measurement: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Output Select Device, Measurement, and Channel (Output) Select an output to control that will affect the measurement Setpoint Decimal - Default Value: 50 The desired setpoint Hysteresis Decimal - Default Value: 1 The amount above and below the setpoint that defines the control band Direction Select(Options: [Raise | Lower | Both ] (Default in bold ) Raise means the measurement will increase when the control is on (heating). Lower means the measurement will decrease when the output is on (cooling) Period (Seconds) Decimal - Default Value: 5 The duration between measurements or actions Duty Cycle (increase) Decimal - Default Value: 90 The duty cycle to increase the measurement Duty Cycle (maintain) Decimal - Default Value: 55 The duty cycle to maintain the measurement Duty Cycle (decrease) Decimal - Default Value: 20 The duty cycle to decrease the measurement Duty Cycle (shutdown) Decimal The duty cycle to set when the function shuts down Camera: libcamera: Image/Video ~ Dependencies: libcamera-apps , ffmpeg NOTE: THIS IS CURRENTLY EXPERIMENTAL - USE AT YOUR OWN RISK UNTIL THIS NOTICE IS REMOVED. Capture images and videos from a camera using libcamera-still and libcamera-vid. The Function must be activated in order to capture still and timelapse images and use the Camera Widget. Option Type Description Status Period (seconds) Integer - Default Value: 60 The duration (seconds) to update the Function status on the UI Image options. Custom Image Path Text Set a non-default path for still images to be saved Custom Timelapse Path Text Set a non-default path for timelapse images to be saved Image Extension Select(Options: [ JPG | PNG | BMP | RGB | YUV420] (Default in bold ) The file type/format to save images Image: Resolution: Width Integer - Default Value: 720 The width of still images Image: Resolution: Height Integer - Default Value: 480 The height of still images Brightness Decimal The brightness of still images (-1 to 1) Image: Contrast Decimal - Default Value: 1.0 The contrast of still images. Larger values produce images with more contrast. Saturation Decimal - Default Value: 1.0 The saturation of still images. Larger values produce more saturated colours; 0.0 produces a greyscale image. Sharpness Decimal The sharpness of still images. Larger values produce more saturated colours; 0.0 produces a greyscale image. Shutter Speed (Microseconds) Integer The shutter speed, in microseconds. 0 disables and returns to auto exposure. Gain Decimal - Default Value: 1.0 The gain of still images. White Balance: Auto Select(Options: [ Auto | Incandescent | Tungsten | Fluorescent | Indoor | Daylight | Cloudy | Custom] (Default in bold ) The white balance of images White Balance: Red Gain Decimal The red gain of white balance for still images (disabled Auto White Balance if red and blue are not set to 0) White Balance: Blue Gain Decimal The red gain of white balance for still images (disabled Auto White Balance if red and blue are not set to 0) Flip Horizontally Boolean Flip the image horizontally. Flip Vertically Boolean Flip the image vertically. Rotate (Degrees) Integer Rotate the image. Custom libcamera-still Options Text Pass custom options to the libcamera-still command. Video options. Custom Video Path Text Set a non-default path for videos to be saved Video Extension Select(Options: [ H264 -> MP4 (with ffmpeg) | H264 | MJPEG | YUV420] (Default in bold ) The file type/format to save videos Video: Resolution: Width Integer - Default Value: 720 The width of videos Video: Resolution: Height Integer - Default Value: 480 The height of videos Custom libcamera-vid Options Text Pass custom options to the libcamera-vid command. Commands Capture Image Button To capture a video, enter the duration and press Capture Video. Video Duration (Seconds) Integer - Default Value: 5 How long to record the video Capture Video Button To start a timelapse, enter the duration and period and press Start Timelapse. Timelapse Duration (Seconds) Integer - Default Value: 2592000 How long the timelapse will run Timelapse Period (Seconds) Integer - Default Value: 600 How often to take a timelapse photo Start Timelapse Button To stop an active timelapse, press Stop Timelapse. Stop Timelapse Button To pause or resume an active timelapse, press Pause Timelapse or Resume Timelapse. Pause Timelapse Button Resume Timelapse Button Difference ~ This function acquires 2 measurements, calculates the difference, and stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Measurement: A Select Measurement (Input, Function) Measurement A: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement: B Select Measurement (Input, Function) Measurement B: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Reverse Order Boolean Reverse the order in the calculation Absolute Difference Boolean Return the absolute value of the difference Display: Generic LCD 16x2 (I2C) ~ Dependencies: smbus2 This Function outputs to a generic 16x2 LCD display via I2C. Since this display can show 2 lines at a time, channels are added in sets of 2 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first 2 lines that are displayed are channels 0 and 1, then 2 and 3, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x20 I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Commands Backlight On Button Backlight Off Button Backlight Flashing On Button Backlight Flashing Off Button Display: Generic LCD 20x4 (I2C) ~ Dependencies: smbus2 This Function outputs to a generic 20x4 LCD display via I2C. Since this display can show 4 lines at a time, channels are added in sets of 4 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first 4 lines that are displayed are channels 0, 1, 2, and 3, then 4, 5, 6, and 7, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x20 I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Commands Backlight On Button Backlight Off Button Display: Grove LCD 16x2 (I2C) ~ Dependencies: smbus2 This Function outputs to the Grove 16x2 LCD display via I2C. Since this display can show 2 lines at a time, channels are added in sets of 2 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first 2 lines that are displayed are channels 0 and 1, then 2 and 3, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3e I2C Bus Integer - Default Value: 1 Backlight I2C Address Text - Default Value: 0x62 I2C address to control the backlight Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Backlight Red (0 - 255) Integer - Default Value: 255 Set the red color value of the backlight on startup. Backlight Green (0 - 255) Integer - Default Value: 255 Set the green color value of the backlight on startup. Backlight Blue (0 - 255) Integer - Default Value: 255 Set the blue color value of the backlight on startup. Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Commands Backlight On Button Backlight Off Button Color (RGB) Text - Default Value: 255,0,0 Color as R,G,B values (e.g. \"255,0,0\" without quotes) Set Backlight Color Button Display: SSD1306 OLED 128x32 [2 Lines] (I2C) ~ Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x32 SSD1306 OLED display via I2C. This display Function will show 2 lines at a time, so channels are added in sets of 2 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 1, then 2 - 3, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3c I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Reset Pin Integer - Default Value: 17 The pin (BCM numbering) connected to RST of the display Characters Per Line Integer - Default Value: 17 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 12 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Display: SSD1306 OLED 128x32 [2 Lines] (SPI) ~ Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-GPIO , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x32 SSD1306 OLED display via SPI. This display Function will show 2 lines at a time, so channels are added in sets of 2 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 1, then 2 - 3, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD SPI Device Integer The SPI device SPI Bus Integer The SPI bus DC Pin Integer - Default Value: 16 The pin (BCM numbering) connected to DC of the display Reset Pin Integer - Default Value: 19 The pin (BCM numbering) connected to RST of the display CS Pin Integer - Default Value: 17 The pin (BCM numbering) connected to CS of the display Characters Per Line Integer - Default Value: 17 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 12 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Display: SSD1306 OLED 128x32 [4 Lines] (I2C) ~ Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x32 SSD1306 OLED display via I2C. This display Function will show 4 lines at a time, so channels are added in sets of 4 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 3, then 4 - 7, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3c I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Reset Pin Integer - Default Value: 17 The pin (BCM numbering) connected to RST of the display Characters Per Line Integer - Default Value: 21 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 10 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Display: SSD1306 OLED 128x32 [4 Lines] (SPI) ~ Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-GPIO , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x32 SSD1306 OLED display via SPI. This display Function will show 4 lines at a time, so channels are added in sets of 4 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 3, then 4 - 7, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD SPI Device Integer The SPI device SPI Bus Integer The SPI bus DC Pin Integer - Default Value: 16 The pin (BCM numbering) connected to DC of the display Reset Pin Integer - Default Value: 19 The pin (BCM numbering) connected to RST of the display CS Pin Integer - Default Value: 17 The pin (BCM numbering) connected to CS of the display Characters Per Line Integer - Default Value: 21 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 10 The size of the font, in points Display Unit Boolean - Default Value: True Display the measurement unit (if available) Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Display: SSD1306 OLED 128x64 [4 Lines] (I2C) ~ Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x64 SSD1306 OLED display via I2C. This display Function will show 4 lines at a time, so channels are added in sets of 4 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 3, then 4 - 7, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3c I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Reset Pin Integer - Default Value: 17 The pin (BCM numbering) connected to RST of the display Characters Per Line Integer - Default Value: 17 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 12 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Display: SSD1306 OLED 128x64 [4 Lines] (SPI) ~ Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-GPIO , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x64 SSD1306 OLED display via SPI. This display Function will show 4 lines at a time, so channels are added in sets of 4 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 3, then 4 - 7, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD SPI Device Integer The SPI device SPI Bus Integer The SPI bus DC Pin Integer - Default Value: 16 The pin (BCM numbering) connected to DC of the display Reset Pin Integer - Default Value: 19 The pin (BCM numbering) connected to RST of the display CS Pin Integer - Default Value: 17 The pin (BCM numbering) connected to CS of the display Characters Per Line Integer - Default Value: 17 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 12 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Display: SSD1306 OLED 128x64 [8 Lines] (I2C) ~ Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x64 SSD1306 OLED display via I2C. This display Function will show 8 lines at a time, so channels are added in sets of 8 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 7, then 8 - 15, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3c I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Reset Pin Integer - Default Value: 17 The pin (BCM numbering) connected to RST of the display Characters Per Line Integer - Default Value: 21 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 10 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Display: SSD1306 OLED 128x64 [8 Lines] (SPI) ~ Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-GPIO , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x64 SSD1306 OLED display via SPI. This display Function will show 8 lines at a time, so channels are added in sets of 8 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 7, then 8 - 15, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD SPI Device Integer The SPI device SPI Bus Integer The SPI bus DC Pin Integer - Default Value: 16 The pin (BCM numbering) connected to DC of the display Reset Pin Integer - Default Value: 19 The pin (BCM numbering) connected to RST of the display CS Pin Integer - Default Value: 17 The pin (BCM numbering) connected to CS of the display Characters Per Line Integer - Default Value: 21 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 10 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Display: SSD1309 OLED 128x64 [8 Lines] (I2C) ~ Dependencies: pyusb , luma.oled , Pillow , libjpeg-dev , zlib1g-dev , libfreetype6-dev , liblcms2-dev , libopenjp2-7 , libtiff5 This Function outputs to a 128x64 SSD1309 OLED display via I2C. This display Function will show 8 lines at a time, so channels are added in sets of 8 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 7, then 8 - 15, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3c I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Reset Pin Integer - Default Value: 17 The pin (BCM numbering) connected to RST of the display Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Equation (Multi-Measure) ~ This function acquires two measurements and uses them within a user-set equation and stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Measurement: A Select Measurement (Input, Output, Function) Measurement to replace a Measurement A: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement: B Select Measurement (Input, Output, Function) Measurement to replace b Measurement B: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Equation Text - Default Value: a*(2+b) Equation using measurements a and b Equation (Single-Measure) ~ This function acquires a measurement and uses it within a user-set equation and stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Measurement Select Measurement (Input, Output, Function) Measurement to replace \"x\" in the equation Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Equation Text - Default Value: x*5+2 Equation using the measurement Example: Generic ~ Dependencies: build-essential This is an example Function Module that showcases all the different type of UI options. It is not useful beyond showing how to develop new custom Function modules.This message will appear above the Function options. It will retrieve the last selected measurement, turn the selected output on for 15 seconds, then deactivate itself. Study the code to develop your own Function Module that can be imported on the Function Import page. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions The following fields are for text, integers, and decimal inputs. This message will automatically create a new line for the options that come after it. Alternatively, a new line can be created instead without a message, which are what separates each of the following three inputs. Text Input Text - Default Value: Text_1 Type in text Integer Input Integer - Default Value: 100 Type in an Integer Devimal Input Decimal - Default Value: 50.2 Type in a decimal value A boolean value can be made using a checkbox. Boolean Value Boolean - Default Value: True Set to either True (checked) or False (Unchecked) A dropdown selection can be made of any user-defined options, with any of the options selected by default when the Function is added by the user. Select Option Select(Options: [First Option Selected | Second Option Selected | Third Option Selected] (Default in bold ) Select an option from the dropdown A specific measurement from an Input, Function, or PID Controller can be selected. The following dropdown will be populated if at least one Input, Function, or PID Controller has been created (as long as the Function has measurements, e.g. Statistics Function). Controller Measurement Select Measurement (Input, Function, PID) Select a controller Measurement An output channel measurement can be selected that will return the Output ID, Channel ID, and Measurement ID. This is useful if you need more than just the Output and Channel IDs and require the user to select the specific Measurement of a channel. Output Channel Measurement Select Device, Measurement, and Channel (Output) Select an output channel and measurement An output can be selected that will return the Output ID if only the output ID is needed. Output Device Select Device Select an Output device An Input, Output, Function, PID, or Trigger can be selected that will return the ID if only the controller ID is needed (e.g. for activating/deactivating a controller) Controller Device Select Device Select an Input/Output/Function/PID/Trigger controller Commands Button One will pass the Button One Value to the button_one() function of this module. This allows functions to be executed with user-specified inputs. These can be text, integers, decimals, or boolean values. Button One Value Integer - Default Value: 650 Value for button one. Button One Button Here is another action with another user input that will be passed to the function. Note that Button One Value will also be passed to this second function, so be sure to use unique ids for each input. Button Two Value Integer - Default Value: 1500 Value for button two. Button Two Button Humidity (Wet/Dry-Bulb) ~ This function calculates the humidity based on wet and dry bulb temperature measurements. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Dry Bulb Temperature Select Measurement (Input, Function) Dry Bulb temperature measurement Dry Bulb: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Wet Bulb Temperature Select Measurement (Input, Function) Wet Bulb temperature measurement Wet Bulb: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Pressure Select Measurement (Input, Function) Pressure measurement Pressure: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Neokey 4x1 Neopixel Keyboard (Execute Actions) ~ Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-neokey This Function executes actions when a key is pressed. Add actions at the bottom of this module, then enter one or more short action IDs for each key, separated by commas. The Action ID is found next to the Action (for example, the Action \"[Action 0559689e] Controller: Activate\" has an Action ID of 0559689e. When entering Action ID(s), separate multiple IDs by commas (for example, \"asdf1234\" or \"asdf1234,qwer5678,zxcv0987\"). Actions will be executed in the order they are entered in the text string. Enter Action IDs to execute those actions when the key is pressed. If enable Toggling Actions, every other key press will execute Actions listed in Toggled Action IDs. The LED color of the key before being pressed, after being pressed, and while the last action is running. Color is an RGB string, with 0-255 for each color. For example, red is \"255, 0, 0\" and blue is \"0, 0, 255\". Option Type Description I2C Address Text - Default Value: 0x30 I2C Bus Integer - Default Value: 1 LED Brightness (0.0-1.0) Decimal - Default Value: 0.2 The brightness of the LEDs LED Flash Period (Seconds) Decimal - Default Value: 1.0 Set the period if the LED begins flashing Channel Options Name Text A name to distinguish this from others LED Delay (Seconds) Decimal - Default Value: 1.5 How long to leave the LED on after the last action executes. Action ID(s) Text Set which action(s) execute when the key is pressed. Enter one or more Action IDs, separated by commas Enable Toggling Actions Boolean Alternate between executing two sets of Actions Toggled Action ID(s) Text Set which action(s) execute when the key is pressed on even presses. Enter one or more Action IDs, separated by commas Resting LED Color (RGB) Text - Default Value: 0, 0, 0 The RGB color while no actions are running (e.g 10, 0, 0) Actions Running LED Color: (RGB) Text - Default Value: 0, 255, 0 The RGB color while all but the last action is running (e.g 10, 0, 0) Last Action LED Color (RGB) Text - Default Value: 0, 0, 255 The RGB color while the last action is running (e.g 10, 0, 0) Shutdown LED Color (RGB) Text - Default Value: 0, 0, 0 The RGB color when the Function is disabled (e.g 10, 0, 0) PID Autotune ~ This function will attempt to perform a PID controller autotune. That is, an output will be powered and the response measured from a sensor several times to calculate the P, I, and D gains. Updates about the operation will be sent to the Daemon log. If the autotune successfully completes, a summary will be sent to the Daemon log as well. Currently, only raising a Measurement is supported, but lowering should be possible with some modification to the function controller code. It is recommended to create a graph on a dashboard with the Measurement and Output to monitor that the Output is successfully raising the Measurement beyond the Setpoint. Note: Autotune is an experimental feature, it is not well-developed, and it has a high likelihood of failing to generate PID gains. Do not rely on it for accurately tuning your PID controller. Option Type Description Measurement Select Measurement (Input, Function) Select a measurement the selected output will affect Output Select Device, Measurement, and Channel (Output) Select an output to modulate that will affect the measurement Period Integer - Default Value: 30 The period between powering the output Setpoint Decimal - Default Value: 50 A value sufficiently far from the current measured value that the output is capable of pushing the measurement toward Noise Band Decimal - Default Value: 0.5 The amount above the setpoint the measurement must reach Outstep Decimal - Default Value: 10 How many seconds the output will turn on every Period Currently, only autotuning to raise a condition (measurement) is supported. Direction Select(Options: [ Raise ] (Default in bold ) The direction the Output will push the Measurement Redundancy ~ This function stores the first available measurement. This is useful if you have multiple sensors that you want to serve as backups in case one stops working, you can set them up in the order of importance. This function will check if a measurement exits, starting with the first measurement. If it doesn't, the next is checked, until a measurement is found. Once a measurement is found, it is stored in the database with the user-set measurement and unit. The output of this function can be used as an input throughout Mycodo. If you need more than 3 measurements to be checked, you can string multiple Redundancy Functions by creating a second Function and setting the first Function's output as the second Function's input. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Measurement A Select Measurement (Input, Function) Measurement to replace a Measurement A: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement B Select Measurement (Input, Function) Measurement to replace b Measurement B: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement C Select Measurement (Input, Function) Measurement to replace C Measurement C: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Regulate pH and Electrical Conductivity ~ This function regulates pH with 2 pumps (acid and base solutions) and electrical conductivity (EC) with up to 4 pumps (nutrient solutions A, B, C, and D). Set only the nutrient solution outputs you want to use. Any outputs not set will not dispense when EC is being adjusted, allowing as few as 1 pump or as many as 4 pumps. Outputs can be instructed to turn on for durations (seconds) or volumes (ml). Set each Output Type to the correct type for each selected Output Channel (only select on/off Output Channels for durations and volume Output Channels for volumes). The ratio of nutrient solutions being dispensed is defined by the duration or volume set for each EC output. If an e-mail address (or multiple addresses separated by commas) is entered into the E-Mail Notification field, a notification e-mail will be sent if 1) pH is outside the set danger range, 2) EC is too high and water needs to be added to the reservoir, or 3) a measurement could not be found in the database for the specific Max Age. Each e-mail notification type has its own timer that prevents e-mail spam, and will only allow sending for each notification type every set E-Mail Timer Duration. After this duration, the timer will automatically reset to allow new notifications to be sent. You may also manually reset e-mail timers at any time with the Custom Commands, below. When the Function is active, Status text will appear below indicating the regulation information and total duration/volume for each output. Option Type Description Period (Seconds) Decimal - Default Value: 300 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Status Period (seconds) Integer - Default Value: 60 The duration (seconds) to update the Function status on the UI Measurement Options pH Measurement Select Measurement (Input, Function) Measurement from the pH input pH: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use EC Measurement Select Measurement (Input, Function) Measurement from the EC input Electrical Conductivity: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Output Options Output: pH Dose Raise (Base) Select Channel (Output_Channels) Select an output to raise the pH Output: pH Dose Lower (Acid) Select Channel (Output_Channels) Select an output to lower the pH pH Output Type Select(Options: [ Duration (seconds) | Volume (ml)] (Default in bold ) Select the output type for the selected Output Channel pH Output Amount Decimal - Default Value: 2.0 The amount to send to the pH dosing pumps (duration or volume) Output: EC Dose Nutrient A Select Channel (Output_Channels) Select an output to dose nutrient A Nutrient A Output Type Select(Options: [ Duration (seconds) | Volume (ml)] (Default in bold ) Select the output type for the selected Output Channel Nutrient A Output Amount Decimal - Default Value: 2.0 The amount to send to the Nutrient A dosing pump (duration or volume) Output: EC Dose Nutrient B Select Channel (Output_Channels) Select an output to dose nutrient B Nutrient B Output Type Select(Options: [ Duration (seconds) | Volume (ml)] (Default in bold ) Select the output type for the selected Output Channel Nutrient B Output Amount Decimal - Default Value: 2.0 The amount to send to the Nutrient B dosing pump (duration or volume) Output: EC Dose Nutrient C Select Channel (Output_Channels) Select an output to dose nutrient C Nutrient C Output Type Select(Options: [ Duration (seconds) | Volume (ml)] (Default in bold ) Select the output type for the selected Output Channel Nutrient C Output Amount Decimal - Default Value: 2.0 The amount to send to the Nutrient C dosing pump (duration or volume) Output: EC Dose Nutrient D Select Channel (Output_Channels) Select an output to dose nutrient D Nutrient D Output Type Select(Options: [ Duration (seconds) | Volume (ml)] (Default in bold ) Select the output type for the selected Output Channel Nutrient D Output Amount Decimal - Default Value: 2.0 The amount to send to the Nutrient D dosing pump (duration or volume) Setpoint Options pH Setpoint Decimal - Default Value: 5.85 The desired pH setpoint pH Hysteresis Decimal - Default Value: 0.35 The hysteresis to determine the pH range EC Setpoint Decimal - Default Value: 150.0 The desired electrical conductivity setpoint EC Hysteresis Decimal - Default Value: 50.0 The hysteresis to determine the EC range pH Danger Range (High Value) Decimal - Default Value: 7.0 This high pH value for the danger range pH Danger Range (Low Value) Decimal - Default Value: 5.0 This low pH value for the danger range Alert Notification Options Notification E-Mail Text E-mail to notify when there is an issue (blank to disable) E-Mail Timer Duration (Hours) Decimal - Default Value: 12.0 How long to wait between sending e-mail notifications Commands Each e-mail notification timer can be manually reset before the expiration. Reset EC E-mail Timer Button Reset pH E-mail Timer Button Reset Measurement Issue E-mail Timer Button Reset All E-Mail Timers Button Each total duration and volume can be manually reset. Reset All Totals Button Reset Total Raise pH Duration Button Reset Total Lower pH Duration Button Reset Total Raise pH Volume Button Reset Total Lower pH Volume Button Reset Total EC A Duration Button Reset Total EC A Volume Button Reset Total EC B Duration Button Reset Total EC B Volume Button Reset Total EC C Duration Button Reset Total EC C Volume Button Reset Total EC D Duration Button Reset Total EC D Volume Button Spacer ~ A spacer to organize Functions. Option Type Description Color Text - Default Value: #000000 The color of the name text Statistics (Last, Multiple) ~ This function acquires multiple measurements, calculates statistics, and stores the resulting values as the selected unit. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Measurements to perform statistics on Halt on Missing Measurement Boolean Don't calculate statistics if >= 1 measurement is not found within Max Age Statistics (Past, Single) ~ This function acquires multiple values from a single measurement, calculates statistics, and stores the resulting values as the selected unit. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Select Measurement (Input, Function) Measurement to perform statistics on Sum (Last, Multiple) ~ This function acquires the last measurement of those that are selected, sums them, then stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Measurement to replace \"x\" in the equation Sum (Past, Single) ~ This function acquires the past measurements (within Max Age) for the selected measurement, sums them, then stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Measurement Select Measurement (Input, Function, Output) Measurement to replace \"x\" in the equation Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Vapor Pressure Deficit ~ This function calculates the vapor pressure deficit based on leaf temperature and humidity. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Temperature Select Measurement (Input, Function) Temperature measurement Temperature: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Humidity Select Measurement (Input, Function) Humidity measurement Humidity: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Verification ~ This function acquires 2 measurements, calculates the difference, and if the difference is not larger than the set threshold, the Measurement A value is stored. This enables verifying one sensor's measurement with another sensor's measurement. Only when they are both in agreement is a measurement stored. This stored measurement can be used in functions such as Conditional Functions that will notify the user if no measurement is available to indicate there may be an issue with a sensor. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Measurement A Select Measurement (Input, Function) Measurement A Measurement A: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement B Select Measurement (Input, Function) Measurement B Measurement B: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Maximum Difference Decimal - Default Value: 10.0 The maximum allowed difference between the measurements Average Measurements Boolean Store the average of the measurements in the database","title":"Supported Functions"},{"location":"Supported-Functions/#built-in-functions","text":"","title":"Built-In Functions"},{"location":"Supported-Functions/#average-last-multiple","text":"This function acquires the last measurement of those that are selected, averages them, then stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Measurement to replace \"x\" in the equation","title":"Average (Last, Multiple)"},{"location":"Supported-Functions/#average-past-single","text":"This function acquires the past measurements (within Max Age) for the selected measurement, averages them, then stores the resulting value as the selected measurement and unit. Note: There is a bug in InfluxDB 1.8.10 that prevents the mean() function from working properly. Therefore, if you are using Influxdb v1.x, the median() function will be used. InfluxDB 2.x is unaffected and uses mean(). To get the true mean, upgrade to InfluxDB 2.x. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Measurement Select Measurement (Input, Function) Measurement to replace \"x\" in the equation Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use","title":"Average (Past, Single)"},{"location":"Supported-Functions/#backup-to-remote-host-rsync","text":"Dependencies: rsync This function will use rsync to back up assets on this system to a remote system. Your remote system needs to have an SSH server running and rsync installed. This system will need rsync installed and be able to access your remote system via SSH keyfile (login without a password). You can do this by creating an SSH key on this system running Mycodo with \"ssh-keygen\" (leave the password field empty), then run \"ssh-copy-id -i ~/.ssh/id_rsa.pub pi@REMOTE_HOST_IP\" to transfer your public SSH key to your remote system (changing pi and REMOTE_HOST_IP to the appropriate user and host of your remote system). You can test if this worked by trying to connect to your remote system with \"ssh pi@REMOTE_HOST_IP\" and you should log in without being asked for a password. Be careful not to set the Period too low, which could cause the function to begin running before the previous operation(s) complete. Therefore, it is recommended to set a relatively long Period (greater than 10 minutes). The default Period is 15 days. Note that the Period will reset if the system or the Mycodo daemon restarts and the Function will run, generating new settings and measurement archives that will be synced. There are two common ways to use this Function: 1) A short period (1 hour), only have Backup Camera Directories enabled, and use the Backup Settings Now and Backup Measurements Now buttons manually to perform a backup, and 2) A long period (15 days), only have Backup Settings and Backup Measurements enabled. You can even create two of these Functions with one set up to perform long-Period settings and measurement backups and the other set up to perform short-Period camera backups. Option Type Description Period (Seconds) Decimal - Default Value: 1296000 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 300 The duration to wait before the first operation Local User Text - Default Value: pi The user on this system that will run rsync Remote User Text - Default Value: pi The user to log in to the remote host Remote Host Text - Default Value: 192.168.0.50 The IP or host address to send the backup to Remote Backup Path Text - Default Value: /home/pi/backup_mycodo The path to backup to on the remote host Rsync Timeout (Seconds) Integer - Default Value: 3600 How long to allow rsync to complete Local Backup Path Text A local path to backup (leave blank to disable) Backup Settings Export File Boolean - Default Value: True Create and backup exported settings file Remove Local Settings Backups Boolean Remove local settings backups after successful transfer to remote host Backup Measurements Boolean - Default Value: True Backup all influxdb measurements Remove Local Measurements Backups Boolean Remove local measurements backups after successful transfer to remote host Backup Camera Directories Boolean - Default Value: True Backup all camera directories Remove Local Camera Images Boolean Remove local camera images after successful transfer to remote host SSH Port Integer - Default Value: 22 Specify a nonstandard SSH port Commands Backup of settings are only created if the Mycodo version or database versions change. This is due to this Function running periodically- if it created a new backup every Period, there would soon be many identical backups. Therefore, if you want to induce the backup of settings, measurements, or camera directories and sync them to your remote system, use the buttons below. Backup Settings Now Button Backup Measurements Now Button Backup Camera Directories Now Button","title":"Backup to Remote Host (rsync)"},{"location":"Supported-Functions/#bang-bang-hysteretic-onoff-raiselower","text":"A simple bang-bang control for controlling one output from one input. Select an input, an output, enter a setpoint and a hysteresis, and select a direction. The output will turn on when the input is below (lower = setpoint - hysteresis) and turn off when the input is above (higher = setpoint + hysteresis). This is the behavior when Raise is selected, such as when heating. Lower direction has the opposite behavior - it will try to turn the output on in order to drive the input lower. Option Type Description Measurement Select Measurement (Input, Function) Select a measurement the selected output will affect Measurement: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Output Select Device, Measurement, and Channel (Output) Select an output to control that will affect the measurement Setpoint Decimal - Default Value: 50 The desired setpoint Hysteresis Decimal - Default Value: 1 The amount above and below the setpoint that defines the control band Direction Select(Options: [ Raise | Lower] (Default in bold ) Raise means the measurement will increase when the control is on (heating). Lower means the measurement will decrease when the output is on (cooling) Period (Seconds) Decimal - Default Value: 5 The duration between measurements or actions","title":"Bang-Bang Hysteretic (On/Off) (Raise/Lower)"},{"location":"Supported-Functions/#bang-bang-hysteretic-onoff-raiselowerboth","text":"A simple bang-bang control for controlling one or two outputs from one input. Select an input, a raise and/or lower output, enter a setpoint and a hysteresis, and select a direction. The output will turn on when the input is below (lower = setpoint - hysteresis) and turn off when the input is above (higher = setpoint + hysteresis). This is the behavior when Raise is selected, such as when heating. Lower direction has the opposite behavior - it will try to turn the output on in order to drive the input lower. The Both option will raise and lower. Note: This output will only work with On/Off Outputs. Option Type Description Measurement Select Measurement (Input, Function) Select a measurement the selected output will affect Measurement: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Output (Raise) Select Device, Measurement, and Channel (Output) Select an output to control that will raise the measurement Output (Lower) Select Device, Measurement, and Channel (Output) Select an output to control that will lower the measurement Setpoint Decimal - Default Value: 50 The desired setpoint Hysteresis Decimal - Default Value: 1 The amount above and below the setpoint that defines the control band Direction Select(Options: [Raise | Lower | Both ] (Default in bold ) Raise means the measurement will increase when the control is on (heating). Lower means the measurement will decrease when the output is on (cooling) Period (Seconds) Decimal - Default Value: 5 The duration between measurements or actions","title":"Bang-Bang Hysteretic (On/Off) (Raise/Lower/Both)"},{"location":"Supported-Functions/#bang-bang-hysteretic-pwm-raiselowerboth","text":"A simple bang-bang control for controlling one PWM output from one input. Select an input, a PWM output, enter a setpoint and a hysteresis, and select a direction. The output will turn on when the input is below below (lower = setpoint - hysteresis) and turn off when the input is above (higher = setpoint + hysteresis). This is the behavior when Raise is selected, such as when heating. Lower direction has the opposite behavior - it will try to turn the output on in order to drive the input lower. The Both option will raise and lower. Note: This output will only work with PWM Outputs. Option Type Description Measurement Select Measurement (Input, Function) Select a measurement the selected output will affect Measurement: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Output Select Device, Measurement, and Channel (Output) Select an output to control that will affect the measurement Setpoint Decimal - Default Value: 50 The desired setpoint Hysteresis Decimal - Default Value: 1 The amount above and below the setpoint that defines the control band Direction Select(Options: [Raise | Lower | Both ] (Default in bold ) Raise means the measurement will increase when the control is on (heating). Lower means the measurement will decrease when the output is on (cooling) Period (Seconds) Decimal - Default Value: 5 The duration between measurements or actions Duty Cycle (increase) Decimal - Default Value: 90 The duty cycle to increase the measurement Duty Cycle (maintain) Decimal - Default Value: 55 The duty cycle to maintain the measurement Duty Cycle (decrease) Decimal - Default Value: 20 The duty cycle to decrease the measurement Duty Cycle (shutdown) Decimal The duty cycle to set when the function shuts down","title":"Bang-Bang Hysteretic (PWM) (Raise/Lower/Both)"},{"location":"Supported-Functions/#camera-libcamera-imagevideo","text":"Dependencies: libcamera-apps , ffmpeg NOTE: THIS IS CURRENTLY EXPERIMENTAL - USE AT YOUR OWN RISK UNTIL THIS NOTICE IS REMOVED. Capture images and videos from a camera using libcamera-still and libcamera-vid. The Function must be activated in order to capture still and timelapse images and use the Camera Widget. Option Type Description Status Period (seconds) Integer - Default Value: 60 The duration (seconds) to update the Function status on the UI Image options. Custom Image Path Text Set a non-default path for still images to be saved Custom Timelapse Path Text Set a non-default path for timelapse images to be saved Image Extension Select(Options: [ JPG | PNG | BMP | RGB | YUV420] (Default in bold ) The file type/format to save images Image: Resolution: Width Integer - Default Value: 720 The width of still images Image: Resolution: Height Integer - Default Value: 480 The height of still images Brightness Decimal The brightness of still images (-1 to 1) Image: Contrast Decimal - Default Value: 1.0 The contrast of still images. Larger values produce images with more contrast. Saturation Decimal - Default Value: 1.0 The saturation of still images. Larger values produce more saturated colours; 0.0 produces a greyscale image. Sharpness Decimal The sharpness of still images. Larger values produce more saturated colours; 0.0 produces a greyscale image. Shutter Speed (Microseconds) Integer The shutter speed, in microseconds. 0 disables and returns to auto exposure. Gain Decimal - Default Value: 1.0 The gain of still images. White Balance: Auto Select(Options: [ Auto | Incandescent | Tungsten | Fluorescent | Indoor | Daylight | Cloudy | Custom] (Default in bold ) The white balance of images White Balance: Red Gain Decimal The red gain of white balance for still images (disabled Auto White Balance if red and blue are not set to 0) White Balance: Blue Gain Decimal The red gain of white balance for still images (disabled Auto White Balance if red and blue are not set to 0) Flip Horizontally Boolean Flip the image horizontally. Flip Vertically Boolean Flip the image vertically. Rotate (Degrees) Integer Rotate the image. Custom libcamera-still Options Text Pass custom options to the libcamera-still command. Video options. Custom Video Path Text Set a non-default path for videos to be saved Video Extension Select(Options: [ H264 -> MP4 (with ffmpeg) | H264 | MJPEG | YUV420] (Default in bold ) The file type/format to save videos Video: Resolution: Width Integer - Default Value: 720 The width of videos Video: Resolution: Height Integer - Default Value: 480 The height of videos Custom libcamera-vid Options Text Pass custom options to the libcamera-vid command. Commands Capture Image Button To capture a video, enter the duration and press Capture Video. Video Duration (Seconds) Integer - Default Value: 5 How long to record the video Capture Video Button To start a timelapse, enter the duration and period and press Start Timelapse. Timelapse Duration (Seconds) Integer - Default Value: 2592000 How long the timelapse will run Timelapse Period (Seconds) Integer - Default Value: 600 How often to take a timelapse photo Start Timelapse Button To stop an active timelapse, press Stop Timelapse. Stop Timelapse Button To pause or resume an active timelapse, press Pause Timelapse or Resume Timelapse. Pause Timelapse Button Resume Timelapse Button","title":"Camera: libcamera: Image/Video"},{"location":"Supported-Functions/#difference","text":"This function acquires 2 measurements, calculates the difference, and stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Measurement: A Select Measurement (Input, Function) Measurement A: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement: B Select Measurement (Input, Function) Measurement B: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Reverse Order Boolean Reverse the order in the calculation Absolute Difference Boolean Return the absolute value of the difference","title":"Difference"},{"location":"Supported-Functions/#display-generic-lcd-16x2-i2c","text":"Dependencies: smbus2 This Function outputs to a generic 16x2 LCD display via I2C. Since this display can show 2 lines at a time, channels are added in sets of 2 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first 2 lines that are displayed are channels 0 and 1, then 2 and 3, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x20 I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Commands Backlight On Button Backlight Off Button Backlight Flashing On Button Backlight Flashing Off Button","title":"Display: Generic LCD 16x2 (I2C)"},{"location":"Supported-Functions/#display-generic-lcd-20x4-i2c","text":"Dependencies: smbus2 This Function outputs to a generic 20x4 LCD display via I2C. Since this display can show 4 lines at a time, channels are added in sets of 4 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first 4 lines that are displayed are channels 0, 1, 2, and 3, then 4, 5, 6, and 7, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x20 I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Commands Backlight On Button Backlight Off Button","title":"Display: Generic LCD 20x4 (I2C)"},{"location":"Supported-Functions/#display-grove-lcd-16x2-i2c","text":"Dependencies: smbus2 This Function outputs to the Grove 16x2 LCD display via I2C. Since this display can show 2 lines at a time, channels are added in sets of 2 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first 2 lines that are displayed are channels 0 and 1, then 2 and 3, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3e I2C Bus Integer - Default Value: 1 Backlight I2C Address Text - Default Value: 0x62 I2C address to control the backlight Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Backlight Red (0 - 255) Integer - Default Value: 255 Set the red color value of the backlight on startup. Backlight Green (0 - 255) Integer - Default Value: 255 Set the green color value of the backlight on startup. Backlight Blue (0 - 255) Integer - Default Value: 255 Set the blue color value of the backlight on startup. Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available) Commands Backlight On Button Backlight Off Button Color (RGB) Text - Default Value: 255,0,0 Color as R,G,B values (e.g. \"255,0,0\" without quotes) Set Backlight Color Button","title":"Display: Grove LCD 16x2 (I2C)"},{"location":"Supported-Functions/#display-ssd1306-oled-128x32-2-lines-i2c","text":"Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x32 SSD1306 OLED display via I2C. This display Function will show 2 lines at a time, so channels are added in sets of 2 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 1, then 2 - 3, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3c I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Reset Pin Integer - Default Value: 17 The pin (BCM numbering) connected to RST of the display Characters Per Line Integer - Default Value: 17 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 12 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available)","title":"Display: SSD1306 OLED 128x32 [2 Lines] (I2C)"},{"location":"Supported-Functions/#display-ssd1306-oled-128x32-2-lines-spi","text":"Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-GPIO , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x32 SSD1306 OLED display via SPI. This display Function will show 2 lines at a time, so channels are added in sets of 2 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 1, then 2 - 3, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD SPI Device Integer The SPI device SPI Bus Integer The SPI bus DC Pin Integer - Default Value: 16 The pin (BCM numbering) connected to DC of the display Reset Pin Integer - Default Value: 19 The pin (BCM numbering) connected to RST of the display CS Pin Integer - Default Value: 17 The pin (BCM numbering) connected to CS of the display Characters Per Line Integer - Default Value: 17 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 12 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available)","title":"Display: SSD1306 OLED 128x32 [2 Lines] (SPI)"},{"location":"Supported-Functions/#display-ssd1306-oled-128x32-4-lines-i2c","text":"Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x32 SSD1306 OLED display via I2C. This display Function will show 4 lines at a time, so channels are added in sets of 4 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 3, then 4 - 7, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3c I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Reset Pin Integer - Default Value: 17 The pin (BCM numbering) connected to RST of the display Characters Per Line Integer - Default Value: 21 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 10 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available)","title":"Display: SSD1306 OLED 128x32 [4 Lines] (I2C)"},{"location":"Supported-Functions/#display-ssd1306-oled-128x32-4-lines-spi","text":"Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-GPIO , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x32 SSD1306 OLED display via SPI. This display Function will show 4 lines at a time, so channels are added in sets of 4 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 3, then 4 - 7, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD SPI Device Integer The SPI device SPI Bus Integer The SPI bus DC Pin Integer - Default Value: 16 The pin (BCM numbering) connected to DC of the display Reset Pin Integer - Default Value: 19 The pin (BCM numbering) connected to RST of the display CS Pin Integer - Default Value: 17 The pin (BCM numbering) connected to CS of the display Characters Per Line Integer - Default Value: 21 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 10 The size of the font, in points Display Unit Boolean - Default Value: True Display the measurement unit (if available) Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available)","title":"Display: SSD1306 OLED 128x32 [4 Lines] (SPI)"},{"location":"Supported-Functions/#display-ssd1306-oled-128x64-4-lines-i2c","text":"Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x64 SSD1306 OLED display via I2C. This display Function will show 4 lines at a time, so channels are added in sets of 4 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 3, then 4 - 7, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3c I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Reset Pin Integer - Default Value: 17 The pin (BCM numbering) connected to RST of the display Characters Per Line Integer - Default Value: 17 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 12 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available)","title":"Display: SSD1306 OLED 128x64 [4 Lines] (I2C)"},{"location":"Supported-Functions/#display-ssd1306-oled-128x64-4-lines-spi","text":"Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-GPIO , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x64 SSD1306 OLED display via SPI. This display Function will show 4 lines at a time, so channels are added in sets of 4 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 3, then 4 - 7, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD SPI Device Integer The SPI device SPI Bus Integer The SPI bus DC Pin Integer - Default Value: 16 The pin (BCM numbering) connected to DC of the display Reset Pin Integer - Default Value: 19 The pin (BCM numbering) connected to RST of the display CS Pin Integer - Default Value: 17 The pin (BCM numbering) connected to CS of the display Characters Per Line Integer - Default Value: 17 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 12 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available)","title":"Display: SSD1306 OLED 128x64 [4 Lines] (SPI)"},{"location":"Supported-Functions/#display-ssd1306-oled-128x64-8-lines-i2c","text":"Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x64 SSD1306 OLED display via I2C. This display Function will show 8 lines at a time, so channels are added in sets of 8 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 7, then 8 - 15, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3c I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Reset Pin Integer - Default Value: 17 The pin (BCM numbering) connected to RST of the display Characters Per Line Integer - Default Value: 21 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 10 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available)","title":"Display: SSD1306 OLED 128x64 [8 Lines] (I2C)"},{"location":"Supported-Functions/#display-ssd1306-oled-128x64-8-lines-spi","text":"Dependencies: libjpeg-dev , Pillow , pyusb , Adafruit-GPIO , Adafruit-extended-bus , adafruit-circuitpython-framebuf , adafruit-circuitpython-ssd1306 This Function outputs to a 128x64 SSD1306 OLED display via SPI. This display Function will show 8 lines at a time, so channels are added in sets of 8 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 7, then 8 - 15, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD SPI Device Integer The SPI device SPI Bus Integer The SPI bus DC Pin Integer - Default Value: 16 The pin (BCM numbering) connected to DC of the display Reset Pin Integer - Default Value: 19 The pin (BCM numbering) connected to RST of the display CS Pin Integer - Default Value: 17 The pin (BCM numbering) connected to CS of the display Characters Per Line Integer - Default Value: 21 The maximum number of characters to display per line Use Non-Default Font Boolean Don't use the default font. Enable to specify the path to a font to use. Non-Default Font Path Text - Default Value: /usr/share/fonts/truetype/dejavu//DejaVuSans.ttf The path to the non-default font to use Font Size (pt) Integer - Default Value: 10 The size of the font, in points Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available)","title":"Display: SSD1306 OLED 128x64 [8 Lines] (SPI)"},{"location":"Supported-Functions/#display-ssd1309-oled-128x64-8-lines-i2c","text":"Dependencies: pyusb , luma.oled , Pillow , libjpeg-dev , zlib1g-dev , libfreetype6-dev , liblcms2-dev , libopenjp2-7 , libtiff5 This Function outputs to a 128x64 SSD1309 OLED display via I2C. This display Function will show 8 lines at a time, so channels are added in sets of 8 when Number of Line Sets is modified. Every Period, the LCD will refresh and display the next set of lines. Therefore, the first set of lines that are displayed are channels 0 - 7, then 8 - 15, and so on. After all channels have been displayed, it will cycle back to the beginning. Option Type Description Period (Seconds) Decimal - Default Value: 10 The duration between measurements or actions I2C Address Text - Default Value: 0x3c I2C Bus Integer - Default Value: 1 Number of Line Sets Integer - Default Value: 1 How many sets of lines to cycle on the LCD Reset Pin Integer - Default Value: 17 The pin (BCM numbering) connected to RST of the display Channel Options Line Display Type Select What to display on the line Measurement Select Measurement (Input, Function, Output, PID) Measurement to display on the line Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Label Text Set to overwrite the default measurement label Measurement Decimal Integer - Default Value: 1 The number of digits after the decimal Text Text - Default Value: Text Text to display Display Unit Boolean - Default Value: True Display the measurement unit (if available)","title":"Display: SSD1309 OLED 128x64 [8 Lines] (I2C)"},{"location":"Supported-Functions/#equation-multi-measure","text":"This function acquires two measurements and uses them within a user-set equation and stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Measurement: A Select Measurement (Input, Output, Function) Measurement to replace a Measurement A: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement: B Select Measurement (Input, Output, Function) Measurement to replace b Measurement B: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Equation Text - Default Value: a*(2+b) Equation using measurements a and b","title":"Equation (Multi-Measure)"},{"location":"Supported-Functions/#equation-single-measure","text":"This function acquires a measurement and uses it within a user-set equation and stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Measurement Select Measurement (Input, Output, Function) Measurement to replace \"x\" in the equation Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Equation Text - Default Value: x*5+2 Equation using the measurement","title":"Equation (Single-Measure)"},{"location":"Supported-Functions/#example-generic","text":"Dependencies: build-essential This is an example Function Module that showcases all the different type of UI options. It is not useful beyond showing how to develop new custom Function modules.This message will appear above the Function options. It will retrieve the last selected measurement, turn the selected output on for 15 seconds, then deactivate itself. Study the code to develop your own Function Module that can be imported on the Function Import page. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions The following fields are for text, integers, and decimal inputs. This message will automatically create a new line for the options that come after it. Alternatively, a new line can be created instead without a message, which are what separates each of the following three inputs. Text Input Text - Default Value: Text_1 Type in text Integer Input Integer - Default Value: 100 Type in an Integer Devimal Input Decimal - Default Value: 50.2 Type in a decimal value A boolean value can be made using a checkbox. Boolean Value Boolean - Default Value: True Set to either True (checked) or False (Unchecked) A dropdown selection can be made of any user-defined options, with any of the options selected by default when the Function is added by the user. Select Option Select(Options: [First Option Selected | Second Option Selected | Third Option Selected] (Default in bold ) Select an option from the dropdown A specific measurement from an Input, Function, or PID Controller can be selected. The following dropdown will be populated if at least one Input, Function, or PID Controller has been created (as long as the Function has measurements, e.g. Statistics Function). Controller Measurement Select Measurement (Input, Function, PID) Select a controller Measurement An output channel measurement can be selected that will return the Output ID, Channel ID, and Measurement ID. This is useful if you need more than just the Output and Channel IDs and require the user to select the specific Measurement of a channel. Output Channel Measurement Select Device, Measurement, and Channel (Output) Select an output channel and measurement An output can be selected that will return the Output ID if only the output ID is needed. Output Device Select Device Select an Output device An Input, Output, Function, PID, or Trigger can be selected that will return the ID if only the controller ID is needed (e.g. for activating/deactivating a controller) Controller Device Select Device Select an Input/Output/Function/PID/Trigger controller Commands Button One will pass the Button One Value to the button_one() function of this module. This allows functions to be executed with user-specified inputs. These can be text, integers, decimals, or boolean values. Button One Value Integer - Default Value: 650 Value for button one. Button One Button Here is another action with another user input that will be passed to the function. Note that Button One Value will also be passed to this second function, so be sure to use unique ids for each input. Button Two Value Integer - Default Value: 1500 Value for button two. Button Two Button","title":"Example: Generic"},{"location":"Supported-Functions/#humidity-wetdry-bulb","text":"This function calculates the humidity based on wet and dry bulb temperature measurements. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Dry Bulb Temperature Select Measurement (Input, Function) Dry Bulb temperature measurement Dry Bulb: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Wet Bulb Temperature Select Measurement (Input, Function) Wet Bulb temperature measurement Wet Bulb: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Pressure Select Measurement (Input, Function) Pressure measurement Pressure: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use","title":"Humidity (Wet/Dry-Bulb)"},{"location":"Supported-Functions/#neokey-4x1-neopixel-keyboard-execute-actions","text":"Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-neokey This Function executes actions when a key is pressed. Add actions at the bottom of this module, then enter one or more short action IDs for each key, separated by commas. The Action ID is found next to the Action (for example, the Action \"[Action 0559689e] Controller: Activate\" has an Action ID of 0559689e. When entering Action ID(s), separate multiple IDs by commas (for example, \"asdf1234\" or \"asdf1234,qwer5678,zxcv0987\"). Actions will be executed in the order they are entered in the text string. Enter Action IDs to execute those actions when the key is pressed. If enable Toggling Actions, every other key press will execute Actions listed in Toggled Action IDs. The LED color of the key before being pressed, after being pressed, and while the last action is running. Color is an RGB string, with 0-255 for each color. For example, red is \"255, 0, 0\" and blue is \"0, 0, 255\". Option Type Description I2C Address Text - Default Value: 0x30 I2C Bus Integer - Default Value: 1 LED Brightness (0.0-1.0) Decimal - Default Value: 0.2 The brightness of the LEDs LED Flash Period (Seconds) Decimal - Default Value: 1.0 Set the period if the LED begins flashing Channel Options Name Text A name to distinguish this from others LED Delay (Seconds) Decimal - Default Value: 1.5 How long to leave the LED on after the last action executes. Action ID(s) Text Set which action(s) execute when the key is pressed. Enter one or more Action IDs, separated by commas Enable Toggling Actions Boolean Alternate between executing two sets of Actions Toggled Action ID(s) Text Set which action(s) execute when the key is pressed on even presses. Enter one or more Action IDs, separated by commas Resting LED Color (RGB) Text - Default Value: 0, 0, 0 The RGB color while no actions are running (e.g 10, 0, 0) Actions Running LED Color: (RGB) Text - Default Value: 0, 255, 0 The RGB color while all but the last action is running (e.g 10, 0, 0) Last Action LED Color (RGB) Text - Default Value: 0, 0, 255 The RGB color while the last action is running (e.g 10, 0, 0) Shutdown LED Color (RGB) Text - Default Value: 0, 0, 0 The RGB color when the Function is disabled (e.g 10, 0, 0)","title":"Neokey 4x1 Neopixel Keyboard (Execute Actions)"},{"location":"Supported-Functions/#pid-autotune","text":"This function will attempt to perform a PID controller autotune. That is, an output will be powered and the response measured from a sensor several times to calculate the P, I, and D gains. Updates about the operation will be sent to the Daemon log. If the autotune successfully completes, a summary will be sent to the Daemon log as well. Currently, only raising a Measurement is supported, but lowering should be possible with some modification to the function controller code. It is recommended to create a graph on a dashboard with the Measurement and Output to monitor that the Output is successfully raising the Measurement beyond the Setpoint. Note: Autotune is an experimental feature, it is not well-developed, and it has a high likelihood of failing to generate PID gains. Do not rely on it for accurately tuning your PID controller. Option Type Description Measurement Select Measurement (Input, Function) Select a measurement the selected output will affect Output Select Device, Measurement, and Channel (Output) Select an output to modulate that will affect the measurement Period Integer - Default Value: 30 The period between powering the output Setpoint Decimal - Default Value: 50 A value sufficiently far from the current measured value that the output is capable of pushing the measurement toward Noise Band Decimal - Default Value: 0.5 The amount above the setpoint the measurement must reach Outstep Decimal - Default Value: 10 How many seconds the output will turn on every Period Currently, only autotuning to raise a condition (measurement) is supported. Direction Select(Options: [ Raise ] (Default in bold ) The direction the Output will push the Measurement","title":"PID Autotune"},{"location":"Supported-Functions/#redundancy","text":"This function stores the first available measurement. This is useful if you have multiple sensors that you want to serve as backups in case one stops working, you can set them up in the order of importance. This function will check if a measurement exits, starting with the first measurement. If it doesn't, the next is checked, until a measurement is found. Once a measurement is found, it is stored in the database with the user-set measurement and unit. The output of this function can be used as an input throughout Mycodo. If you need more than 3 measurements to be checked, you can string multiple Redundancy Functions by creating a second Function and setting the first Function's output as the second Function's input. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Measurement A Select Measurement (Input, Function) Measurement to replace a Measurement A: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement B Select Measurement (Input, Function) Measurement to replace b Measurement B: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement C Select Measurement (Input, Function) Measurement to replace C Measurement C: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use","title":"Redundancy"},{"location":"Supported-Functions/#regulate-ph-and-electrical-conductivity","text":"This function regulates pH with 2 pumps (acid and base solutions) and electrical conductivity (EC) with up to 4 pumps (nutrient solutions A, B, C, and D). Set only the nutrient solution outputs you want to use. Any outputs not set will not dispense when EC is being adjusted, allowing as few as 1 pump or as many as 4 pumps. Outputs can be instructed to turn on for durations (seconds) or volumes (ml). Set each Output Type to the correct type for each selected Output Channel (only select on/off Output Channels for durations and volume Output Channels for volumes). The ratio of nutrient solutions being dispensed is defined by the duration or volume set for each EC output. If an e-mail address (or multiple addresses separated by commas) is entered into the E-Mail Notification field, a notification e-mail will be sent if 1) pH is outside the set danger range, 2) EC is too high and water needs to be added to the reservoir, or 3) a measurement could not be found in the database for the specific Max Age. Each e-mail notification type has its own timer that prevents e-mail spam, and will only allow sending for each notification type every set E-Mail Timer Duration. After this duration, the timer will automatically reset to allow new notifications to be sent. You may also manually reset e-mail timers at any time with the Custom Commands, below. When the Function is active, Status text will appear below indicating the regulation information and total duration/volume for each output. Option Type Description Period (Seconds) Decimal - Default Value: 300 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Status Period (seconds) Integer - Default Value: 60 The duration (seconds) to update the Function status on the UI Measurement Options pH Measurement Select Measurement (Input, Function) Measurement from the pH input pH: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use EC Measurement Select Measurement (Input, Function) Measurement from the EC input Electrical Conductivity: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Output Options Output: pH Dose Raise (Base) Select Channel (Output_Channels) Select an output to raise the pH Output: pH Dose Lower (Acid) Select Channel (Output_Channels) Select an output to lower the pH pH Output Type Select(Options: [ Duration (seconds) | Volume (ml)] (Default in bold ) Select the output type for the selected Output Channel pH Output Amount Decimal - Default Value: 2.0 The amount to send to the pH dosing pumps (duration or volume) Output: EC Dose Nutrient A Select Channel (Output_Channels) Select an output to dose nutrient A Nutrient A Output Type Select(Options: [ Duration (seconds) | Volume (ml)] (Default in bold ) Select the output type for the selected Output Channel Nutrient A Output Amount Decimal - Default Value: 2.0 The amount to send to the Nutrient A dosing pump (duration or volume) Output: EC Dose Nutrient B Select Channel (Output_Channels) Select an output to dose nutrient B Nutrient B Output Type Select(Options: [ Duration (seconds) | Volume (ml)] (Default in bold ) Select the output type for the selected Output Channel Nutrient B Output Amount Decimal - Default Value: 2.0 The amount to send to the Nutrient B dosing pump (duration or volume) Output: EC Dose Nutrient C Select Channel (Output_Channels) Select an output to dose nutrient C Nutrient C Output Type Select(Options: [ Duration (seconds) | Volume (ml)] (Default in bold ) Select the output type for the selected Output Channel Nutrient C Output Amount Decimal - Default Value: 2.0 The amount to send to the Nutrient C dosing pump (duration or volume) Output: EC Dose Nutrient D Select Channel (Output_Channels) Select an output to dose nutrient D Nutrient D Output Type Select(Options: [ Duration (seconds) | Volume (ml)] (Default in bold ) Select the output type for the selected Output Channel Nutrient D Output Amount Decimal - Default Value: 2.0 The amount to send to the Nutrient D dosing pump (duration or volume) Setpoint Options pH Setpoint Decimal - Default Value: 5.85 The desired pH setpoint pH Hysteresis Decimal - Default Value: 0.35 The hysteresis to determine the pH range EC Setpoint Decimal - Default Value: 150.0 The desired electrical conductivity setpoint EC Hysteresis Decimal - Default Value: 50.0 The hysteresis to determine the EC range pH Danger Range (High Value) Decimal - Default Value: 7.0 This high pH value for the danger range pH Danger Range (Low Value) Decimal - Default Value: 5.0 This low pH value for the danger range Alert Notification Options Notification E-Mail Text E-mail to notify when there is an issue (blank to disable) E-Mail Timer Duration (Hours) Decimal - Default Value: 12.0 How long to wait between sending e-mail notifications Commands Each e-mail notification timer can be manually reset before the expiration. Reset EC E-mail Timer Button Reset pH E-mail Timer Button Reset Measurement Issue E-mail Timer Button Reset All E-Mail Timers Button Each total duration and volume can be manually reset. Reset All Totals Button Reset Total Raise pH Duration Button Reset Total Lower pH Duration Button Reset Total Raise pH Volume Button Reset Total Lower pH Volume Button Reset Total EC A Duration Button Reset Total EC A Volume Button Reset Total EC B Duration Button Reset Total EC B Volume Button Reset Total EC C Duration Button Reset Total EC C Volume Button Reset Total EC D Duration Button Reset Total EC D Volume Button","title":"Regulate pH and Electrical Conductivity"},{"location":"Supported-Functions/#spacer","text":"A spacer to organize Functions. Option Type Description Color Text - Default Value: #000000 The color of the name text","title":"Spacer"},{"location":"Supported-Functions/#statistics-last-multiple","text":"This function acquires multiple measurements, calculates statistics, and stores the resulting values as the selected unit. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Measurements to perform statistics on Halt on Missing Measurement Boolean Don't calculate statistics if >= 1 measurement is not found within Max Age","title":"Statistics (Last, Multiple)"},{"location":"Supported-Functions/#statistics-past-single","text":"This function acquires multiple values from a single measurement, calculates statistics, and stores the resulting values as the selected unit. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Select Measurement (Input, Function) Measurement to perform statistics on","title":"Statistics (Past, Single)"},{"location":"Supported-Functions/#sum-last-multiple","text":"This function acquires the last measurement of those that are selected, sums them, then stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement Measurement to replace \"x\" in the equation","title":"Sum (Last, Multiple)"},{"location":"Supported-Functions/#sum-past-single","text":"This function acquires the past measurements (within Max Age) for the selected measurement, sums them, then stores the resulting value as the selected measurement and unit. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Measurement Select Measurement (Input, Function, Output) Measurement to replace \"x\" in the equation Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use","title":"Sum (Past, Single)"},{"location":"Supported-Functions/#vapor-pressure-deficit","text":"This function calculates the vapor pressure deficit based on leaf temperature and humidity. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Start Offset (Seconds) Integer - Default Value: 10 The duration to wait before the first operation Temperature Select Measurement (Input, Function) Temperature measurement Temperature: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Humidity Select Measurement (Input, Function) Humidity measurement Humidity: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use","title":"Vapor Pressure Deficit"},{"location":"Supported-Functions/#verification","text":"This function acquires 2 measurements, calculates the difference, and if the difference is not larger than the set threshold, the Measurement A value is stored. This enables verifying one sensor's measurement with another sensor's measurement. Only when they are both in agreement is a measurement stored. This stored measurement can be used in functions such as Conditional Functions that will notify the user if no measurement is available to indicate there may be an issue with a sensor. Option Type Description Period (Seconds) Decimal - Default Value: 60 The duration between measurements or actions Measurement A Select Measurement (Input, Function) Measurement A Measurement A: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Measurement B Select Measurement (Input, Function) Measurement B Measurement B: Max Age (Seconds) Integer - Default Value: 360 The maximum age of the measurement to use Maximum Difference Decimal - Default Value: 10.0 The maximum allowed difference between the measurements Average Measurements Boolean Store the average of the measurements in the database","title":"Verification"},{"location":"Supported-Inputs-By-Measurement/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Measurements Acceleration Acceleration (X) Acceleration (Y) Acceleration (Z) ADC Altitude Angle Battery Boolean Carbon Dioxide Color (Y) Color (Blue) Color (Green) Color (Red) Color (x) Color (y) CPU Load (15 Minutes) CPU Load (1 Minute) CPU Load (5 Minutes) Dewpoint Direction Disk Dissolved Oxygen Duration Duty Cycle GPIO Edge Electrical Conductivity Electrical Current Electrical Potential Energy Frequency GPIO State Humidity Ion Concentration Length Light Magnetic Flux Density Methane Moisture Oxygen Oxidation Reduction Potential PM10 PM1 PM2.5 Power Apparent Power Power Factor Reactive Power Pressure Pulse Width Volume Flow Rate Resistance Revolutions Salinity Specific Gravity Speed Temperature Total Dissolved Solids Vapor Pressure Deficit Version VOC Volume Acceleration ~ Ruuvi: RuuviTag ~ Acceleration (X) ~ Analog Devices: ADXL34x (343, 344, 345, 346) ~ Raspberry Pi Foundation: Sense HAT ~ Ruuvi: RuuviTag ~ Acceleration (Y) ~ Analog Devices: ADXL34x (343, 344, 345, 346) ~ Raspberry Pi Foundation: Sense HAT ~ Ruuvi: RuuviTag ~ Acceleration (Z) ~ Analog Devices: ADXL34x (343, 344, 345, 346) ~ Raspberry Pi Foundation: Sense HAT ~ Ruuvi: RuuviTag ~ ADC ~ AMS: AS7262 ~ Altitude ~ BOSCH: BME280 (Adafruit_BME280) ~ BOSCH: BME280 (Adafruit_CircuitPython_BME280) ~ BOSCH: BME280 (RPi.bme280) ~ BOSCH: BME680 (Adafruit_CircuitPython_BME680) ~ BOSCH: BME680 (bme680) ~ BOSCH: BMP180 ~ BOSCH: BMP280 (Adafruit_GPIO) ~ BOSCH: BMP280 (bmp280-python) ~ Senseair: K96 ~ Angle ~ Raspberry Pi Foundation: Sense HAT ~ Battery ~ Ruuvi: RuuviTag ~ Sensorion: SHT31 Smart Gadget ~ Xiaomi: Miflora ~ Xiaomi: Mijia LYWSD03MMC (ATC and non-ATC modes) ~ Boolean ~ Mycodo: Output State (On/Off) ~ Mycodo: Server Ping ~ Mycodo: Server Port Open ~ Carbon Dioxide ~ AMS: CCS811 (with Temperature) ~ AMS: CCS811 (without Temperature) ~ Atlas Scientific: Atlas CO2 (Carbon Dioxide Gas) ~ CO2Meter: K30 ~ Cozir: Cozir CO2 ~ Senseair: K96 ~ Sensirion: SCD-4x (40, 41) ~ Sensirion: SCD30 (Adafruit_CircuitPython_SCD30) ~ Sensirion: SCD30 (scd30_i2c) ~ Winsen: MH-Z14A ~ Winsen: MH-Z16 ~ Winsen: MH-Z19 ~ Winsen: MH-Z19B ~ Color (Y) ~ Atlas Scientific: Atlas Color ~ Color (Blue) ~ Atlas Scientific: Atlas Color ~ Color (Green) ~ Atlas Scientific: Atlas Color ~ Color (Red) ~ Atlas Scientific: Atlas Color ~ Color (x) ~ Atlas Scientific: Atlas Color ~ Color (y) ~ Atlas Scientific: Atlas Color ~ CPU Load (15 Minutes) ~ Mycodo: CPU Load ~ CPU Load (1 Minute) ~ Mycodo: CPU Load ~ CPU Load (5 Minutes) ~ Mycodo: CPU Load ~ Dewpoint ~ AOSONG: AM2315/AM2320 ~ AOSONG: DHT11 ~ AOSONG: DHT20 ~ AOSONG: DHT22 ~ Atlas Scientific: Atlas Humidity ~ BOSCH: BME280 (Adafruit_BME280) ~ BOSCH: BME280 (Adafruit_CircuitPython_BME280) ~ BOSCH: BME280 (RPi.bme280) ~ BOSCH: BME680 (Adafruit_CircuitPython_BME680) ~ BOSCH: BME680 (bme680) ~ Cozir: Cozir CO2 ~ Ruuvi: RuuviTag ~ Seeedstudio: DHT11/22 ~ Senseair: K96 ~ Sensirion: SCD-4x (40, 41) ~ Sensirion: SCD30 (Adafruit_CircuitPython_SCD30) ~ Sensirion: SCD30 (scd30_i2c) ~ Sensirion: SHT1x/7x ~ Sensirion: SHT2x (sht20) ~ Sensirion: SHT2x (smbus2) ~ Sensirion: SHT31-D ~ Sensirion: SHT3x (30, 31, 35) ~ Sensirion: SHT4X ~ Sensirion: SHTC3 ~ Sensorion: SHT31 Smart Gadget ~ Silicon Labs: Si7021 ~ Sonoff: TH16/10 (Tasmota firmware) with AM2301/Si7021 ~ Sonoff: TH16/10 (Tasmota firmware) with AM2301 ~ TE Connectivity: HTU21D (Adafruit_CircuitPython_HTU21D) ~ TE Connectivity: HTU21D (pigpio) ~ Texas Instruments: HDC1000 ~ Weather: OpenWeatherMap (City, Current) ~ Weather: OpenWeatherMap (Lat/Lon, Current/Future) ~ Direction ~ Raspberry Pi Foundation: Sense HAT ~ Weather: OpenWeatherMap (City, Current) ~ Weather: OpenWeatherMap (Lat/Lon, Current/Future) ~ Disk ~ Mycodo: Free Space ~ Mycodo: System and Mycodo RAM ~ Dissolved Oxygen ~ Atlas Scientific: Atlas DO ~ Duration ~ Mycodo: Uptime ~ Weather: OpenWeatherMap (Lat/Lon, Current/Future) ~ Duty Cycle ~ Raspberry Pi: Signal (PWM) ~ GPIO Edge ~ Raspberry Pi: Edge Detection ~ Electrical Conductivity ~ AnyLeaf: AnyLeaf EC ~ Atlas Scientific: Atlas EC ~ Texas Instruments: ADS1115: Generic Analog pH/EC ~ Texas Instruments: ADS1256: Generic Analog pH/EC ~ Xiaomi: Miflora ~ Electrical Current ~ Power Monitor: RPi Power Monitor (6 Channels) ~ TP-Link: Kasa WiFi Power Plug/Strip Energy Statistics ~ Tasmota: Tasmota Outlet Energy Monitor (HTTP) ~ Texas Instruments: INA219x ~ Electrical Potential ~ Microchip: MCP3008 (Adafruit_CircuitPython_MCP3xxx) ~ Microchip: MCP3008 (Adafruit_MCP3008) ~ Microchip: MCP3208 ~ Microchip: MCP342x (x=2,3,4,6,7,8) ~ Power Monitor: RPi Power Monitor (6 Channels) ~ TP-Link: Kasa WiFi Power Plug/Strip Energy Statistics ~ Tasmota: Tasmota Outlet Energy Monitor (HTTP) ~ Texas Instruments: ADS1015 ~ Texas Instruments: ADS1115 ~ Texas Instruments: ADS1256: Generic Analog pH/EC ~ Texas Instruments: ADS1256 ~ Texas Instruments: ADS1x15 ~ Texas Instruments: INA219x ~ Energy ~ TP-Link: Kasa WiFi Power Plug/Strip Energy Statistics ~ Tasmota: Tasmota Outlet Energy Monitor (HTTP) ~ Frequency ~ Raspberry Pi: Signal (PWM) ~ GPIO State ~ Raspberry Pi: GPIO State ~ Humidity ~ AOSONG: AM2315/AM2320 ~ AOSONG: DHT11 ~ AOSONG: DHT20 ~ AOSONG: DHT22 ~ ASAIR: AHTx0 ~ Atlas Scientific: Atlas Humidity ~ BOSCH: BME280 (Adafruit_BME280) ~ BOSCH: BME280 (Adafruit_CircuitPython_BME280) ~ BOSCH: BME280 (RPi.bme280) ~ BOSCH: BME680 (Adafruit_CircuitPython_BME680) ~ BOSCH: BME680 (bme680) ~ Cozir: Cozir CO2 ~ Raspberry Pi Foundation: Sense HAT ~ Ruuvi: RuuviTag ~ Seeedstudio: DHT11/22 ~ Senseair: K96 ~ Sensirion: SCD-4x (40, 41) ~ Sensirion: SCD30 (Adafruit_CircuitPython_SCD30) ~ Sensirion: SCD30 (scd30_i2c) ~ Sensirion: SHT1x/7x ~ Sensirion: SHT2x (sht20) ~ Sensirion: SHT2x (smbus2) ~ Sensirion: SHT31-D ~ Sensirion: SHT3x (30, 31, 35) ~ Sensirion: SHT4X ~ Sensirion: SHTC3 ~ Sensorion: SHT31 Smart Gadget ~ Silicon Labs: Si7021 ~ Sonoff: TH16/10 (Tasmota firmware) with AM2301/Si7021 ~ Sonoff: TH16/10 (Tasmota firmware) with AM2301 ~ TE Connectivity: HTU21D (Adafruit_CircuitPython_HTU21D) ~ TE Connectivity: HTU21D (pigpio) ~ Texas Instruments: HDC1000 ~ Weather: OpenWeatherMap (City, Current) ~ Weather: OpenWeatherMap (Lat/Lon, Current/Future) ~ Xiaomi: Mijia LYWSD03MMC (ATC and non-ATC modes) ~ Ion Concentration ~ AnyLeaf: AnyLeaf pH ~ Atlas Scientific: Atlas pH ~ Texas Instruments: ADS1115: Generic Analog pH/EC ~ Texas Instruments: ADS1256: Generic Analog pH/EC ~ Length ~ Atlas Scientific: Atlas Color ~ Multiple Manufacturers: HC-SR04 ~ STMicroelectronics: VL53L0X ~ STMicroelectronics: VL53L1X ~ STMicroelectronics: VL53L4CD ~ Silicon Labs: SI1145 ~ Light ~ AMS: TSL2561 ~ AMS: TSL2591 ~ Atlas Scientific: Atlas Color ~ Catnip Electronics: Chirp ~ ROHM: BH1750 ~ Silicon Labs: SI1145 ~ Xiaomi: Miflora ~ ams: AS7341 ~ Magnetic Flux Density ~ Melexis: MLX90393 ~ Raspberry Pi Foundation: Sense HAT ~ Methane ~ Senseair: K96 ~ Moisture ~ Adafruit: I2C Capacitive Moisture Sensor ~ Catnip Electronics: Chirp ~ Xiaomi: Miflora ~ Oxygen ~ Atlas Scientific: Atlas O2 (Oxygen Gas) ~ Oxidation Reduction Potential ~ AnyLeaf: AnyLeaf ORP ~ Atlas Scientific: Atlas ORP ~ PM10 ~ Winsen: ZH03B ~ PM1 ~ Winsen: ZH03B ~ PM2.5 ~ Winsen: ZH03B ~ Power ~ Power Monitor: RPi Power Monitor (6 Channels) ~ TP-Link: Kasa WiFi Power Plug/Strip Energy Statistics ~ Tasmota: Tasmota Outlet Energy Monitor (HTTP) ~ Apparent Power ~ Tasmota: Tasmota Outlet Energy Monitor (HTTP) ~ Power Factor ~ Power Monitor: RPi Power Monitor (6 Channels) ~ Tasmota: Tasmota Outlet Energy Monitor (HTTP) ~ Reactive Power ~ Tasmota: Tasmota Outlet Energy Monitor (HTTP) ~ Pressure ~ Atlas Scientific: Atlas Pressure ~ BOSCH: BME280 (Adafruit_BME280) ~ BOSCH: BME280 (Adafruit_CircuitPython_BME280) ~ BOSCH: BME280 (RPi.bme280) ~ BOSCH: BME680 (Adafruit_CircuitPython_BME680) ~ BOSCH: BME680 (bme680) ~ BOSCH: BMP180 ~ BOSCH: BMP280 (Adafruit_GPIO) ~ BOSCH: BMP280 (bmp280-python) ~ Infineon: DPS310 ~ Raspberry Pi Foundation: Sense HAT ~ Ruuvi: RuuviTag ~ Senseair: K96 ~ Weather: OpenWeatherMap (City, Current) ~ Weather: OpenWeatherMap (Lat/Lon, Current/Future) ~ Pulse Width ~ Raspberry Pi: Signal (PWM) ~ Volume Flow Rate ~ Atlas Scientific: Atlas Flow Meter ~ Generic: Hall Flow Meter ~ Resistance ~ BOSCH: BME680 (Adafruit_CircuitPython_BME680) ~ BOSCH: BME680 (bme680) ~ Revolutions ~ Raspberry Pi: Signal (Revolutions) (pigpio method #1) ~ Raspberry Pi: Signal (Revolutions) (pigpio method #2) ~ Salinity ~ Atlas Scientific: Atlas EC ~ Specific Gravity ~ Atlas Scientific: Atlas EC ~ Speed ~ Weather: OpenWeatherMap (City, Current) ~ Weather: OpenWeatherMap (Lat/Lon, Current/Future) ~ Temperature ~ AMS: CCS811 (with Temperature) ~ AOSONG: AM2315/AM2320 ~ AOSONG: DHT11 ~ AOSONG: DHT20 ~ AOSONG: DHT22 ~ ASAIR: AHTx0 ~ Adafruit: I2C Capacitive Moisture Sensor ~ Analog Devices: ADT7410 ~ Atlas Scientific: Atlas Humidity ~ Atlas Scientific: Atlas PT-1000 ~ BOSCH: BME280 (Adafruit_BME280) ~ BOSCH: BME280 (Adafruit_CircuitPython_BME280) ~ BOSCH: BME280 (RPi.bme280) ~ BOSCH: BME680 (Adafruit_CircuitPython_BME680) ~ BOSCH: BME680 (bme680) ~ BOSCH: BMP180 ~ BOSCH: BMP280 (Adafruit_GPIO) ~ BOSCH: BMP280 (bmp280-python) ~ Catnip Electronics: Chirp ~ Cozir: Cozir CO2 ~ Infineon: DPS310 ~ MAXIM: DS1822 ~ MAXIM: DS1825 ~ MAXIM: DS18B20 (ow-shell) ~ MAXIM: DS18B20 (w1thermsensor) ~ MAXIM: DS18S20 ~ MAXIM: DS28EA00 ~ MAXIM: MAX31850K ~ MAXIM: MAX31855 (Gravity PT100) (smbus2) ~ MAXIM: MAX31855 (Gravity PT100) (wiringpi) ~ MAXIM: MAX31855 (Adafruit_MAX31855) ~ MAXIM: MAX31855 (adafruit-circuitpython-max31855) ~ MAXIM: MAX31856 ~ MAXIM: MAX31865 (Adafruit-CircuitPython-MAX31865) ~ MAXIM: MAX31865 (RPi.GPIO) ~ Melexis: MLX90614 ~ Microchip: MCP9808 ~ Panasonic: AMG8833 ~ Raspberry Pi Foundation: Sense HAT ~ Raspberry Pi: CPU/GPU Temperature ~ Ruuvi: RuuviTag ~ Seeedstudio: DHT11/22 ~ Senseair: K96 ~ Sensirion: SCD-4x (40, 41) ~ Sensirion: SCD30 (Adafruit_CircuitPython_SCD30) ~ Sensirion: SCD30 (scd30_i2c) ~ Sensirion: SHT1x/7x ~ Sensirion: SHT2x (sht20) ~ Sensirion: SHT2x (smbus2) ~ Sensirion: SHT31-D ~ Sensirion: SHT3x (30, 31, 35) ~ Sensirion: SHT4X ~ Sensirion: SHTC3 ~ Sensorion: SHT31 Smart Gadget ~ Silicon Labs: Si7021 ~ Sonoff: TH16/10 (Tasmota firmware) with AM2301/Si7021 ~ Sonoff: TH16/10 (Tasmota firmware) with AM2301 ~ Sonoff: TH16/10 (Tasmota firmware) with DS18B20 ~ TE Connectivity: HTU21D (Adafruit_CircuitPython_HTU21D) ~ TE Connectivity: HTU21D (pigpio) ~ Texas Instruments: HDC1000 ~ Texas Instruments: TMP006 ~ Weather: OpenWeatherMap (City, Current) ~ Weather: OpenWeatherMap (Lat/Lon, Current/Future) ~ Xiaomi: Miflora ~ Xiaomi: Mijia LYWSD03MMC (ATC and non-ATC modes) ~ Total Dissolved Solids ~ Atlas Scientific: Atlas EC ~ Vapor Pressure Deficit ~ AOSONG: AM2315/AM2320 ~ AOSONG: DHT11 ~ AOSONG: DHT20 ~ AOSONG: DHT22 ~ BOSCH: BME280 (Adafruit_BME280) ~ BOSCH: BME280 (Adafruit_CircuitPython_BME280) ~ BOSCH: BME280 (RPi.bme280) ~ BOSCH: BME680 (Adafruit_CircuitPython_BME680) ~ BOSCH: BME680 (bme680) ~ Ruuvi: RuuviTag ~ Seeedstudio: DHT11/22 ~ Senseair: K96 ~ Sensirion: SCD-4x (40, 41) ~ Sensirion: SCD30 (Adafruit_CircuitPython_SCD30) ~ Sensirion: SCD30 (scd30_i2c) ~ Sensirion: SHT1x/7x ~ Sensirion: SHT2x (sht20) ~ Sensirion: SHT2x (smbus2) ~ Sensirion: SHT31-D ~ Sensirion: SHT3x (30, 31, 35) ~ Sensirion: SHT4X ~ Sensirion: SHTC3 ~ Sensorion: SHT31 Smart Gadget ~ Silicon Labs: Si7021 ~ Sonoff: TH16/10 (Tasmota firmware) with AM2301/Si7021 ~ Sonoff: TH16/10 (Tasmota firmware) with AM2301 ~ TE Connectivity: HTU21D (Adafruit_CircuitPython_HTU21D) ~ TE Connectivity: HTU21D (pigpio) ~ Texas Instruments: HDC1000 ~ Version ~ Mycodo: Mycodo Version ~ VOC ~ AMS: CCS811 (with Temperature) ~ AMS: CCS811 (without Temperature) ~ Volume ~ Atlas Scientific: Atlas Flow Meter ~ Generic: Hall Flow Meter ~","title":"Inputs Sorted by Measurement"},{"location":"Supported-Inputs-By-Measurement/#acceleration","text":"","title":"Acceleration"},{"location":"Supported-Inputs-By-Measurement/#ruuvi-ruuvitag","text":"","title":"Ruuvi: RuuviTag"},{"location":"Supported-Inputs-By-Measurement/#acceleration-x","text":"","title":"Acceleration (X)"},{"location":"Supported-Inputs-By-Measurement/#analog-devices-adxl34x-343-344-345-346","text":"","title":"Analog Devices: ADXL34x (343, 344, 345, 346)"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-foundation-sense-hat","text":"","title":"Raspberry Pi Foundation: Sense HAT"},{"location":"Supported-Inputs-By-Measurement/#ruuvi-ruuvitag_1","text":"","title":"Ruuvi: RuuviTag"},{"location":"Supported-Inputs-By-Measurement/#acceleration-y","text":"","title":"Acceleration (Y)"},{"location":"Supported-Inputs-By-Measurement/#analog-devices-adxl34x-343-344-345-346_1","text":"","title":"Analog Devices: ADXL34x (343, 344, 345, 346)"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-foundation-sense-hat_1","text":"","title":"Raspberry Pi Foundation: Sense HAT"},{"location":"Supported-Inputs-By-Measurement/#ruuvi-ruuvitag_2","text":"","title":"Ruuvi: RuuviTag"},{"location":"Supported-Inputs-By-Measurement/#acceleration-z","text":"","title":"Acceleration (Z)"},{"location":"Supported-Inputs-By-Measurement/#analog-devices-adxl34x-343-344-345-346_2","text":"","title":"Analog Devices: ADXL34x (343, 344, 345, 346)"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-foundation-sense-hat_2","text":"","title":"Raspberry Pi Foundation: Sense HAT"},{"location":"Supported-Inputs-By-Measurement/#ruuvi-ruuvitag_3","text":"","title":"Ruuvi: RuuviTag"},{"location":"Supported-Inputs-By-Measurement/#adc","text":"","title":"ADC"},{"location":"Supported-Inputs-By-Measurement/#ams-as7262","text":"","title":"AMS: AS7262"},{"location":"Supported-Inputs-By-Measurement/#altitude","text":"","title":"Altitude"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_bme280","text":"","title":"BOSCH: BME280 (Adafruit_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_circuitpython_bme280","text":"","title":"BOSCH: BME280 (Adafruit_CircuitPython_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-rpibme280","text":"","title":"BOSCH: BME280 (RPi.bme280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-adafruit_circuitpython_bme680","text":"","title":"BOSCH: BME680 (Adafruit_CircuitPython_BME680)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-bme680","text":"","title":"BOSCH: BME680 (bme680)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bmp180","text":"","title":"BOSCH: BMP180"},{"location":"Supported-Inputs-By-Measurement/#bosch-bmp280-adafruit_gpio","text":"","title":"BOSCH: BMP280 (Adafruit_GPIO)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bmp280-bmp280-python","text":"","title":"BOSCH: BMP280 (bmp280-python)"},{"location":"Supported-Inputs-By-Measurement/#senseair-k96","text":"","title":"Senseair: K96"},{"location":"Supported-Inputs-By-Measurement/#angle","text":"","title":"Angle"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-foundation-sense-hat_3","text":"","title":"Raspberry Pi Foundation: Sense HAT"},{"location":"Supported-Inputs-By-Measurement/#battery","text":"","title":"Battery"},{"location":"Supported-Inputs-By-Measurement/#ruuvi-ruuvitag_4","text":"","title":"Ruuvi: RuuviTag"},{"location":"Supported-Inputs-By-Measurement/#sensorion-sht31-smart-gadget","text":"","title":"Sensorion: SHT31 Smart Gadget"},{"location":"Supported-Inputs-By-Measurement/#xiaomi-miflora","text":"","title":"Xiaomi: Miflora"},{"location":"Supported-Inputs-By-Measurement/#xiaomi-mijia-lywsd03mmc-atc-and-non-atc-modes","text":"","title":"Xiaomi: Mijia LYWSD03MMC (ATC and non-ATC modes)"},{"location":"Supported-Inputs-By-Measurement/#boolean","text":"","title":"Boolean"},{"location":"Supported-Inputs-By-Measurement/#mycodo-output-state-onoff","text":"","title":"Mycodo: Output State (On/Off)"},{"location":"Supported-Inputs-By-Measurement/#mycodo-server-ping","text":"","title":"Mycodo: Server Ping"},{"location":"Supported-Inputs-By-Measurement/#mycodo-server-port-open","text":"","title":"Mycodo: Server Port Open"},{"location":"Supported-Inputs-By-Measurement/#carbon-dioxide","text":"","title":"Carbon Dioxide"},{"location":"Supported-Inputs-By-Measurement/#ams-ccs811-with-temperature","text":"","title":"AMS: CCS811 (with Temperature)"},{"location":"Supported-Inputs-By-Measurement/#ams-ccs811-without-temperature","text":"","title":"AMS: CCS811 (without Temperature)"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-co2-carbon-dioxide-gas","text":"","title":"Atlas Scientific: Atlas CO2 (Carbon Dioxide Gas)"},{"location":"Supported-Inputs-By-Measurement/#co2meter-k30","text":"","title":"CO2Meter: K30"},{"location":"Supported-Inputs-By-Measurement/#cozir-cozir-co2","text":"","title":"Cozir: Cozir CO2"},{"location":"Supported-Inputs-By-Measurement/#senseair-k96_1","text":"","title":"Senseair: K96"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd-4x-40-41","text":"","title":"Sensirion: SCD-4x (40, 41)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd30-adafruit_circuitpython_scd30","text":"","title":"Sensirion: SCD30 (Adafruit_CircuitPython_SCD30)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd30-scd30_i2c","text":"","title":"Sensirion: SCD30 (scd30_i2c)"},{"location":"Supported-Inputs-By-Measurement/#winsen-mh-z14a","text":"","title":"Winsen: MH-Z14A"},{"location":"Supported-Inputs-By-Measurement/#winsen-mh-z16","text":"","title":"Winsen: MH-Z16"},{"location":"Supported-Inputs-By-Measurement/#winsen-mh-z19","text":"","title":"Winsen: MH-Z19"},{"location":"Supported-Inputs-By-Measurement/#winsen-mh-z19b","text":"","title":"Winsen: MH-Z19B"},{"location":"Supported-Inputs-By-Measurement/#color-y","text":"","title":"Color (Y)"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-color","text":"","title":"Atlas Scientific: Atlas Color"},{"location":"Supported-Inputs-By-Measurement/#color-blue","text":"","title":"Color (Blue)"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-color_1","text":"","title":"Atlas Scientific: Atlas Color"},{"location":"Supported-Inputs-By-Measurement/#color-green","text":"","title":"Color (Green)"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-color_2","text":"","title":"Atlas Scientific: Atlas Color"},{"location":"Supported-Inputs-By-Measurement/#color-red","text":"","title":"Color (Red)"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-color_3","text":"","title":"Atlas Scientific: Atlas Color"},{"location":"Supported-Inputs-By-Measurement/#color-x","text":"","title":"Color (x)"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-color_4","text":"","title":"Atlas Scientific: Atlas Color"},{"location":"Supported-Inputs-By-Measurement/#color-y_1","text":"","title":"Color (y)"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-color_5","text":"","title":"Atlas Scientific: Atlas Color"},{"location":"Supported-Inputs-By-Measurement/#cpu-load-15-minutes","text":"","title":"CPU Load (15 Minutes)"},{"location":"Supported-Inputs-By-Measurement/#mycodo-cpu-load","text":"","title":"Mycodo: CPU Load"},{"location":"Supported-Inputs-By-Measurement/#cpu-load-1-minute","text":"","title":"CPU Load (1 Minute)"},{"location":"Supported-Inputs-By-Measurement/#mycodo-cpu-load_1","text":"","title":"Mycodo: CPU Load"},{"location":"Supported-Inputs-By-Measurement/#cpu-load-5-minutes","text":"","title":"CPU Load (5 Minutes)"},{"location":"Supported-Inputs-By-Measurement/#mycodo-cpu-load_2","text":"","title":"Mycodo: CPU Load"},{"location":"Supported-Inputs-By-Measurement/#dewpoint","text":"","title":"Dewpoint"},{"location":"Supported-Inputs-By-Measurement/#aosong-am2315am2320","text":"","title":"AOSONG: AM2315/AM2320"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht11","text":"","title":"AOSONG: DHT11"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht20","text":"","title":"AOSONG: DHT20"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht22","text":"","title":"AOSONG: DHT22"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-humidity","text":"","title":"Atlas Scientific: Atlas Humidity"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_bme280_1","text":"","title":"BOSCH: BME280 (Adafruit_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_circuitpython_bme280_1","text":"","title":"BOSCH: BME280 (Adafruit_CircuitPython_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-rpibme280_1","text":"","title":"BOSCH: BME280 (RPi.bme280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-adafruit_circuitpython_bme680_1","text":"","title":"BOSCH: BME680 (Adafruit_CircuitPython_BME680)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-bme680_1","text":"","title":"BOSCH: BME680 (bme680)"},{"location":"Supported-Inputs-By-Measurement/#cozir-cozir-co2_1","text":"","title":"Cozir: Cozir CO2"},{"location":"Supported-Inputs-By-Measurement/#ruuvi-ruuvitag_5","text":"","title":"Ruuvi: RuuviTag"},{"location":"Supported-Inputs-By-Measurement/#seeedstudio-dht1122","text":"","title":"Seeedstudio: DHT11/22"},{"location":"Supported-Inputs-By-Measurement/#senseair-k96_2","text":"","title":"Senseair: K96"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd-4x-40-41_1","text":"","title":"Sensirion: SCD-4x (40, 41)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd30-adafruit_circuitpython_scd30_1","text":"","title":"Sensirion: SCD30 (Adafruit_CircuitPython_SCD30)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd30-scd30_i2c_1","text":"","title":"Sensirion: SCD30 (scd30_i2c)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht1x7x","text":"","title":"Sensirion: SHT1x/7x"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht2x-sht20","text":"","title":"Sensirion: SHT2x (sht20)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht2x-smbus2","text":"","title":"Sensirion: SHT2x (smbus2)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht31-d","text":"","title":"Sensirion: SHT31-D"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht3x-30-31-35","text":"","title":"Sensirion: SHT3x (30, 31, 35)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht4x","text":"","title":"Sensirion: SHT4X"},{"location":"Supported-Inputs-By-Measurement/#sensirion-shtc3","text":"","title":"Sensirion: SHTC3"},{"location":"Supported-Inputs-By-Measurement/#sensorion-sht31-smart-gadget_1","text":"","title":"Sensorion: SHT31 Smart Gadget"},{"location":"Supported-Inputs-By-Measurement/#silicon-labs-si7021","text":"","title":"Silicon Labs: Si7021"},{"location":"Supported-Inputs-By-Measurement/#sonoff-th1610-tasmota-firmware-with-am2301si7021","text":"","title":"Sonoff: TH16/10 (Tasmota firmware) with AM2301/Si7021"},{"location":"Supported-Inputs-By-Measurement/#sonoff-th1610-tasmota-firmware-with-am2301","text":"","title":"Sonoff: TH16/10 (Tasmota firmware) with AM2301"},{"location":"Supported-Inputs-By-Measurement/#te-connectivity-htu21d-adafruit_circuitpython_htu21d","text":"","title":"TE Connectivity: HTU21D (Adafruit_CircuitPython_HTU21D)"},{"location":"Supported-Inputs-By-Measurement/#te-connectivity-htu21d-pigpio","text":"","title":"TE Connectivity: HTU21D (pigpio)"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-hdc1000","text":"","title":"Texas Instruments: HDC1000"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-city-current","text":"","title":"Weather: OpenWeatherMap (City, Current)"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-latlon-currentfuture","text":"","title":"Weather: OpenWeatherMap (Lat/Lon, Current/Future)"},{"location":"Supported-Inputs-By-Measurement/#direction","text":"","title":"Direction"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-foundation-sense-hat_4","text":"","title":"Raspberry Pi Foundation: Sense HAT"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-city-current_1","text":"","title":"Weather: OpenWeatherMap (City, Current)"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-latlon-currentfuture_1","text":"","title":"Weather: OpenWeatherMap (Lat/Lon, Current/Future)"},{"location":"Supported-Inputs-By-Measurement/#disk","text":"","title":"Disk"},{"location":"Supported-Inputs-By-Measurement/#mycodo-free-space","text":"","title":"Mycodo: Free Space"},{"location":"Supported-Inputs-By-Measurement/#mycodo-system-and-mycodo-ram","text":"","title":"Mycodo: System and Mycodo RAM"},{"location":"Supported-Inputs-By-Measurement/#dissolved-oxygen","text":"","title":"Dissolved Oxygen"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-do","text":"","title":"Atlas Scientific: Atlas DO"},{"location":"Supported-Inputs-By-Measurement/#duration","text":"","title":"Duration"},{"location":"Supported-Inputs-By-Measurement/#mycodo-uptime","text":"","title":"Mycodo: Uptime"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-latlon-currentfuture_2","text":"","title":"Weather: OpenWeatherMap (Lat/Lon, Current/Future)"},{"location":"Supported-Inputs-By-Measurement/#duty-cycle","text":"","title":"Duty Cycle"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-signal-pwm","text":"","title":"Raspberry Pi: Signal (PWM)"},{"location":"Supported-Inputs-By-Measurement/#gpio-edge","text":"","title":"GPIO Edge"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-edge-detection","text":"","title":"Raspberry Pi: Edge Detection"},{"location":"Supported-Inputs-By-Measurement/#electrical-conductivity","text":"","title":"Electrical Conductivity"},{"location":"Supported-Inputs-By-Measurement/#anyleaf-anyleaf-ec","text":"","title":"AnyLeaf: AnyLeaf EC"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-ec","text":"","title":"Atlas Scientific: Atlas EC"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-ads1115-generic-analog-phec","text":"","title":"Texas Instruments: ADS1115: Generic Analog pH/EC"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-ads1256-generic-analog-phec","text":"","title":"Texas Instruments: ADS1256: Generic Analog pH/EC"},{"location":"Supported-Inputs-By-Measurement/#xiaomi-miflora_1","text":"","title":"Xiaomi: Miflora"},{"location":"Supported-Inputs-By-Measurement/#electrical-current","text":"","title":"Electrical Current"},{"location":"Supported-Inputs-By-Measurement/#power-monitor-rpi-power-monitor-6-channels","text":"","title":"Power Monitor: RPi Power Monitor (6 Channels)"},{"location":"Supported-Inputs-By-Measurement/#tp-link-kasa-wifi-power-plugstrip-energy-statistics","text":"","title":"TP-Link: Kasa WiFi Power Plug/Strip Energy Statistics"},{"location":"Supported-Inputs-By-Measurement/#tasmota-tasmota-outlet-energy-monitor-http","text":"","title":"Tasmota: Tasmota Outlet Energy Monitor (HTTP)"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-ina219x","text":"","title":"Texas Instruments: INA219x"},{"location":"Supported-Inputs-By-Measurement/#electrical-potential","text":"","title":"Electrical Potential"},{"location":"Supported-Inputs-By-Measurement/#microchip-mcp3008-adafruit_circuitpython_mcp3xxx","text":"","title":"Microchip: MCP3008 (Adafruit_CircuitPython_MCP3xxx)"},{"location":"Supported-Inputs-By-Measurement/#microchip-mcp3008-adafruit_mcp3008","text":"","title":"Microchip: MCP3008 (Adafruit_MCP3008)"},{"location":"Supported-Inputs-By-Measurement/#microchip-mcp3208","text":"","title":"Microchip: MCP3208"},{"location":"Supported-Inputs-By-Measurement/#microchip-mcp342x-x234678","text":"","title":"Microchip: MCP342x (x=2,3,4,6,7,8)"},{"location":"Supported-Inputs-By-Measurement/#power-monitor-rpi-power-monitor-6-channels_1","text":"","title":"Power Monitor: RPi Power Monitor (6 Channels)"},{"location":"Supported-Inputs-By-Measurement/#tp-link-kasa-wifi-power-plugstrip-energy-statistics_1","text":"","title":"TP-Link: Kasa WiFi Power Plug/Strip Energy Statistics"},{"location":"Supported-Inputs-By-Measurement/#tasmota-tasmota-outlet-energy-monitor-http_1","text":"","title":"Tasmota: Tasmota Outlet Energy Monitor (HTTP)"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-ads1015","text":"","title":"Texas Instruments: ADS1015"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-ads1115","text":"","title":"Texas Instruments: ADS1115"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-ads1256-generic-analog-phec_1","text":"","title":"Texas Instruments: ADS1256: Generic Analog pH/EC"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-ads1256","text":"","title":"Texas Instruments: ADS1256"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-ads1x15","text":"","title":"Texas Instruments: ADS1x15"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-ina219x_1","text":"","title":"Texas Instruments: INA219x"},{"location":"Supported-Inputs-By-Measurement/#energy","text":"","title":"Energy"},{"location":"Supported-Inputs-By-Measurement/#tp-link-kasa-wifi-power-plugstrip-energy-statistics_2","text":"","title":"TP-Link: Kasa WiFi Power Plug/Strip Energy Statistics"},{"location":"Supported-Inputs-By-Measurement/#tasmota-tasmota-outlet-energy-monitor-http_2","text":"","title":"Tasmota: Tasmota Outlet Energy Monitor (HTTP)"},{"location":"Supported-Inputs-By-Measurement/#frequency","text":"","title":"Frequency"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-signal-pwm_1","text":"","title":"Raspberry Pi: Signal (PWM)"},{"location":"Supported-Inputs-By-Measurement/#gpio-state","text":"","title":"GPIO State"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-gpio-state","text":"","title":"Raspberry Pi: GPIO State"},{"location":"Supported-Inputs-By-Measurement/#humidity","text":"","title":"Humidity"},{"location":"Supported-Inputs-By-Measurement/#aosong-am2315am2320_1","text":"","title":"AOSONG: AM2315/AM2320"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht11_1","text":"","title":"AOSONG: DHT11"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht20_1","text":"","title":"AOSONG: DHT20"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht22_1","text":"","title":"AOSONG: DHT22"},{"location":"Supported-Inputs-By-Measurement/#asair-ahtx0","text":"","title":"ASAIR: AHTx0"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-humidity_1","text":"","title":"Atlas Scientific: Atlas Humidity"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_bme280_2","text":"","title":"BOSCH: BME280 (Adafruit_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_circuitpython_bme280_2","text":"","title":"BOSCH: BME280 (Adafruit_CircuitPython_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-rpibme280_2","text":"","title":"BOSCH: BME280 (RPi.bme280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-adafruit_circuitpython_bme680_2","text":"","title":"BOSCH: BME680 (Adafruit_CircuitPython_BME680)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-bme680_2","text":"","title":"BOSCH: BME680 (bme680)"},{"location":"Supported-Inputs-By-Measurement/#cozir-cozir-co2_2","text":"","title":"Cozir: Cozir CO2"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-foundation-sense-hat_5","text":"","title":"Raspberry Pi Foundation: Sense HAT"},{"location":"Supported-Inputs-By-Measurement/#ruuvi-ruuvitag_6","text":"","title":"Ruuvi: RuuviTag"},{"location":"Supported-Inputs-By-Measurement/#seeedstudio-dht1122_1","text":"","title":"Seeedstudio: DHT11/22"},{"location":"Supported-Inputs-By-Measurement/#senseair-k96_3","text":"","title":"Senseair: K96"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd-4x-40-41_2","text":"","title":"Sensirion: SCD-4x (40, 41)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd30-adafruit_circuitpython_scd30_2","text":"","title":"Sensirion: SCD30 (Adafruit_CircuitPython_SCD30)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd30-scd30_i2c_2","text":"","title":"Sensirion: SCD30 (scd30_i2c)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht1x7x_1","text":"","title":"Sensirion: SHT1x/7x"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht2x-sht20_1","text":"","title":"Sensirion: SHT2x (sht20)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht2x-smbus2_1","text":"","title":"Sensirion: SHT2x (smbus2)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht31-d_1","text":"","title":"Sensirion: SHT31-D"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht3x-30-31-35_1","text":"","title":"Sensirion: SHT3x (30, 31, 35)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht4x_1","text":"","title":"Sensirion: SHT4X"},{"location":"Supported-Inputs-By-Measurement/#sensirion-shtc3_1","text":"","title":"Sensirion: SHTC3"},{"location":"Supported-Inputs-By-Measurement/#sensorion-sht31-smart-gadget_2","text":"","title":"Sensorion: SHT31 Smart Gadget"},{"location":"Supported-Inputs-By-Measurement/#silicon-labs-si7021_1","text":"","title":"Silicon Labs: Si7021"},{"location":"Supported-Inputs-By-Measurement/#sonoff-th1610-tasmota-firmware-with-am2301si7021_1","text":"","title":"Sonoff: TH16/10 (Tasmota firmware) with AM2301/Si7021"},{"location":"Supported-Inputs-By-Measurement/#sonoff-th1610-tasmota-firmware-with-am2301_1","text":"","title":"Sonoff: TH16/10 (Tasmota firmware) with AM2301"},{"location":"Supported-Inputs-By-Measurement/#te-connectivity-htu21d-adafruit_circuitpython_htu21d_1","text":"","title":"TE Connectivity: HTU21D (Adafruit_CircuitPython_HTU21D)"},{"location":"Supported-Inputs-By-Measurement/#te-connectivity-htu21d-pigpio_1","text":"","title":"TE Connectivity: HTU21D (pigpio)"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-hdc1000_1","text":"","title":"Texas Instruments: HDC1000"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-city-current_2","text":"","title":"Weather: OpenWeatherMap (City, Current)"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-latlon-currentfuture_3","text":"","title":"Weather: OpenWeatherMap (Lat/Lon, Current/Future)"},{"location":"Supported-Inputs-By-Measurement/#xiaomi-mijia-lywsd03mmc-atc-and-non-atc-modes_1","text":"","title":"Xiaomi: Mijia LYWSD03MMC (ATC and non-ATC modes)"},{"location":"Supported-Inputs-By-Measurement/#ion-concentration","text":"","title":"Ion Concentration"},{"location":"Supported-Inputs-By-Measurement/#anyleaf-anyleaf-ph","text":"","title":"AnyLeaf: AnyLeaf pH"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-ph","text":"","title":"Atlas Scientific: Atlas pH"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-ads1115-generic-analog-phec_1","text":"","title":"Texas Instruments: ADS1115: Generic Analog pH/EC"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-ads1256-generic-analog-phec_2","text":"","title":"Texas Instruments: ADS1256: Generic Analog pH/EC"},{"location":"Supported-Inputs-By-Measurement/#length","text":"","title":"Length"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-color_6","text":"","title":"Atlas Scientific: Atlas Color"},{"location":"Supported-Inputs-By-Measurement/#multiple-manufacturers-hc-sr04","text":"","title":"Multiple Manufacturers: HC-SR04"},{"location":"Supported-Inputs-By-Measurement/#stmicroelectronics-vl53l0x","text":"","title":"STMicroelectronics: VL53L0X"},{"location":"Supported-Inputs-By-Measurement/#stmicroelectronics-vl53l1x","text":"","title":"STMicroelectronics: VL53L1X"},{"location":"Supported-Inputs-By-Measurement/#stmicroelectronics-vl53l4cd","text":"","title":"STMicroelectronics: VL53L4CD"},{"location":"Supported-Inputs-By-Measurement/#silicon-labs-si1145","text":"","title":"Silicon Labs: SI1145"},{"location":"Supported-Inputs-By-Measurement/#light","text":"","title":"Light"},{"location":"Supported-Inputs-By-Measurement/#ams-tsl2561","text":"","title":"AMS: TSL2561"},{"location":"Supported-Inputs-By-Measurement/#ams-tsl2591","text":"","title":"AMS: TSL2591"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-color_7","text":"","title":"Atlas Scientific: Atlas Color"},{"location":"Supported-Inputs-By-Measurement/#catnip-electronics-chirp","text":"","title":"Catnip Electronics: Chirp"},{"location":"Supported-Inputs-By-Measurement/#rohm-bh1750","text":"","title":"ROHM: BH1750"},{"location":"Supported-Inputs-By-Measurement/#silicon-labs-si1145_1","text":"","title":"Silicon Labs: SI1145"},{"location":"Supported-Inputs-By-Measurement/#xiaomi-miflora_2","text":"","title":"Xiaomi: Miflora"},{"location":"Supported-Inputs-By-Measurement/#ams-as7341","text":"","title":"ams: AS7341"},{"location":"Supported-Inputs-By-Measurement/#magnetic-flux-density","text":"","title":"Magnetic Flux Density"},{"location":"Supported-Inputs-By-Measurement/#melexis-mlx90393","text":"","title":"Melexis: MLX90393"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-foundation-sense-hat_6","text":"","title":"Raspberry Pi Foundation: Sense HAT"},{"location":"Supported-Inputs-By-Measurement/#methane","text":"","title":"Methane"},{"location":"Supported-Inputs-By-Measurement/#senseair-k96_4","text":"","title":"Senseair: K96"},{"location":"Supported-Inputs-By-Measurement/#moisture","text":"","title":"Moisture"},{"location":"Supported-Inputs-By-Measurement/#adafruit-i2c-capacitive-moisture-sensor","text":"","title":"Adafruit: I2C Capacitive Moisture Sensor"},{"location":"Supported-Inputs-By-Measurement/#catnip-electronics-chirp_1","text":"","title":"Catnip Electronics: Chirp"},{"location":"Supported-Inputs-By-Measurement/#xiaomi-miflora_3","text":"","title":"Xiaomi: Miflora"},{"location":"Supported-Inputs-By-Measurement/#oxygen","text":"","title":"Oxygen"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-o2-oxygen-gas","text":"","title":"Atlas Scientific: Atlas O2 (Oxygen Gas)"},{"location":"Supported-Inputs-By-Measurement/#oxidation-reduction-potential","text":"","title":"Oxidation Reduction Potential"},{"location":"Supported-Inputs-By-Measurement/#anyleaf-anyleaf-orp","text":"","title":"AnyLeaf: AnyLeaf ORP"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-orp","text":"","title":"Atlas Scientific: Atlas ORP"},{"location":"Supported-Inputs-By-Measurement/#pm10","text":"","title":"PM10"},{"location":"Supported-Inputs-By-Measurement/#winsen-zh03b","text":"","title":"Winsen: ZH03B"},{"location":"Supported-Inputs-By-Measurement/#pm1","text":"","title":"PM1"},{"location":"Supported-Inputs-By-Measurement/#winsen-zh03b_1","text":"","title":"Winsen: ZH03B"},{"location":"Supported-Inputs-By-Measurement/#pm25","text":"","title":"PM2.5"},{"location":"Supported-Inputs-By-Measurement/#winsen-zh03b_2","text":"","title":"Winsen: ZH03B"},{"location":"Supported-Inputs-By-Measurement/#power","text":"","title":"Power"},{"location":"Supported-Inputs-By-Measurement/#power-monitor-rpi-power-monitor-6-channels_2","text":"","title":"Power Monitor: RPi Power Monitor (6 Channels)"},{"location":"Supported-Inputs-By-Measurement/#tp-link-kasa-wifi-power-plugstrip-energy-statistics_3","text":"","title":"TP-Link: Kasa WiFi Power Plug/Strip Energy Statistics"},{"location":"Supported-Inputs-By-Measurement/#tasmota-tasmota-outlet-energy-monitor-http_3","text":"","title":"Tasmota: Tasmota Outlet Energy Monitor (HTTP)"},{"location":"Supported-Inputs-By-Measurement/#apparent-power","text":"","title":"Apparent Power"},{"location":"Supported-Inputs-By-Measurement/#tasmota-tasmota-outlet-energy-monitor-http_4","text":"","title":"Tasmota: Tasmota Outlet Energy Monitor (HTTP)"},{"location":"Supported-Inputs-By-Measurement/#power-factor","text":"","title":"Power Factor"},{"location":"Supported-Inputs-By-Measurement/#power-monitor-rpi-power-monitor-6-channels_3","text":"","title":"Power Monitor: RPi Power Monitor (6 Channels)"},{"location":"Supported-Inputs-By-Measurement/#tasmota-tasmota-outlet-energy-monitor-http_5","text":"","title":"Tasmota: Tasmota Outlet Energy Monitor (HTTP)"},{"location":"Supported-Inputs-By-Measurement/#reactive-power","text":"","title":"Reactive Power"},{"location":"Supported-Inputs-By-Measurement/#tasmota-tasmota-outlet-energy-monitor-http_6","text":"","title":"Tasmota: Tasmota Outlet Energy Monitor (HTTP)"},{"location":"Supported-Inputs-By-Measurement/#pressure","text":"","title":"Pressure"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-pressure","text":"","title":"Atlas Scientific: Atlas Pressure"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_bme280_3","text":"","title":"BOSCH: BME280 (Adafruit_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_circuitpython_bme280_3","text":"","title":"BOSCH: BME280 (Adafruit_CircuitPython_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-rpibme280_3","text":"","title":"BOSCH: BME280 (RPi.bme280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-adafruit_circuitpython_bme680_3","text":"","title":"BOSCH: BME680 (Adafruit_CircuitPython_BME680)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-bme680_3","text":"","title":"BOSCH: BME680 (bme680)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bmp180_1","text":"","title":"BOSCH: BMP180"},{"location":"Supported-Inputs-By-Measurement/#bosch-bmp280-adafruit_gpio_1","text":"","title":"BOSCH: BMP280 (Adafruit_GPIO)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bmp280-bmp280-python_1","text":"","title":"BOSCH: BMP280 (bmp280-python)"},{"location":"Supported-Inputs-By-Measurement/#infineon-dps310","text":"","title":"Infineon: DPS310"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-foundation-sense-hat_7","text":"","title":"Raspberry Pi Foundation: Sense HAT"},{"location":"Supported-Inputs-By-Measurement/#ruuvi-ruuvitag_7","text":"","title":"Ruuvi: RuuviTag"},{"location":"Supported-Inputs-By-Measurement/#senseair-k96_5","text":"","title":"Senseair: K96"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-city-current_3","text":"","title":"Weather: OpenWeatherMap (City, Current)"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-latlon-currentfuture_4","text":"","title":"Weather: OpenWeatherMap (Lat/Lon, Current/Future)"},{"location":"Supported-Inputs-By-Measurement/#pulse-width","text":"","title":"Pulse Width"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-signal-pwm_2","text":"","title":"Raspberry Pi: Signal (PWM)"},{"location":"Supported-Inputs-By-Measurement/#volume-flow-rate","text":"","title":"Volume Flow Rate"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-flow-meter","text":"","title":"Atlas Scientific: Atlas Flow Meter"},{"location":"Supported-Inputs-By-Measurement/#generic-hall-flow-meter","text":"","title":"Generic: Hall Flow Meter"},{"location":"Supported-Inputs-By-Measurement/#resistance","text":"","title":"Resistance"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-adafruit_circuitpython_bme680_4","text":"","title":"BOSCH: BME680 (Adafruit_CircuitPython_BME680)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-bme680_4","text":"","title":"BOSCH: BME680 (bme680)"},{"location":"Supported-Inputs-By-Measurement/#revolutions","text":"","title":"Revolutions"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-signal-revolutions-pigpio-method-1","text":"","title":"Raspberry Pi: Signal (Revolutions) (pigpio method #1)"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-signal-revolutions-pigpio-method-2","text":"","title":"Raspberry Pi: Signal (Revolutions) (pigpio method #2)"},{"location":"Supported-Inputs-By-Measurement/#salinity","text":"","title":"Salinity"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-ec_1","text":"","title":"Atlas Scientific: Atlas EC"},{"location":"Supported-Inputs-By-Measurement/#specific-gravity","text":"","title":"Specific Gravity"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-ec_2","text":"","title":"Atlas Scientific: Atlas EC"},{"location":"Supported-Inputs-By-Measurement/#speed","text":"","title":"Speed"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-city-current_4","text":"","title":"Weather: OpenWeatherMap (City, Current)"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-latlon-currentfuture_5","text":"","title":"Weather: OpenWeatherMap (Lat/Lon, Current/Future)"},{"location":"Supported-Inputs-By-Measurement/#temperature","text":"","title":"Temperature"},{"location":"Supported-Inputs-By-Measurement/#ams-ccs811-with-temperature_1","text":"","title":"AMS: CCS811 (with Temperature)"},{"location":"Supported-Inputs-By-Measurement/#aosong-am2315am2320_2","text":"","title":"AOSONG: AM2315/AM2320"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht11_2","text":"","title":"AOSONG: DHT11"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht20_2","text":"","title":"AOSONG: DHT20"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht22_2","text":"","title":"AOSONG: DHT22"},{"location":"Supported-Inputs-By-Measurement/#asair-ahtx0_1","text":"","title":"ASAIR: AHTx0"},{"location":"Supported-Inputs-By-Measurement/#adafruit-i2c-capacitive-moisture-sensor_1","text":"","title":"Adafruit: I2C Capacitive Moisture Sensor"},{"location":"Supported-Inputs-By-Measurement/#analog-devices-adt7410","text":"","title":"Analog Devices: ADT7410"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-humidity_2","text":"","title":"Atlas Scientific: Atlas Humidity"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-pt-1000","text":"","title":"Atlas Scientific: Atlas PT-1000"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_bme280_4","text":"","title":"BOSCH: BME280 (Adafruit_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_circuitpython_bme280_4","text":"","title":"BOSCH: BME280 (Adafruit_CircuitPython_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-rpibme280_4","text":"","title":"BOSCH: BME280 (RPi.bme280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-adafruit_circuitpython_bme680_5","text":"","title":"BOSCH: BME680 (Adafruit_CircuitPython_BME680)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-bme680_5","text":"","title":"BOSCH: BME680 (bme680)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bmp180_2","text":"","title":"BOSCH: BMP180"},{"location":"Supported-Inputs-By-Measurement/#bosch-bmp280-adafruit_gpio_2","text":"","title":"BOSCH: BMP280 (Adafruit_GPIO)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bmp280-bmp280-python_2","text":"","title":"BOSCH: BMP280 (bmp280-python)"},{"location":"Supported-Inputs-By-Measurement/#catnip-electronics-chirp_2","text":"","title":"Catnip Electronics: Chirp"},{"location":"Supported-Inputs-By-Measurement/#cozir-cozir-co2_3","text":"","title":"Cozir: Cozir CO2"},{"location":"Supported-Inputs-By-Measurement/#infineon-dps310_1","text":"","title":"Infineon: DPS310"},{"location":"Supported-Inputs-By-Measurement/#maxim-ds1822","text":"","title":"MAXIM: DS1822"},{"location":"Supported-Inputs-By-Measurement/#maxim-ds1825","text":"","title":"MAXIM: DS1825"},{"location":"Supported-Inputs-By-Measurement/#maxim-ds18b20-ow-shell","text":"","title":"MAXIM: DS18B20 (ow-shell)"},{"location":"Supported-Inputs-By-Measurement/#maxim-ds18b20-w1thermsensor","text":"","title":"MAXIM: DS18B20 (w1thermsensor)"},{"location":"Supported-Inputs-By-Measurement/#maxim-ds18s20","text":"","title":"MAXIM: DS18S20"},{"location":"Supported-Inputs-By-Measurement/#maxim-ds28ea00","text":"","title":"MAXIM: DS28EA00"},{"location":"Supported-Inputs-By-Measurement/#maxim-max31850k","text":"","title":"MAXIM: MAX31850K"},{"location":"Supported-Inputs-By-Measurement/#maxim-max31855-gravity-pt100-smbus2","text":"","title":"MAXIM: MAX31855 (Gravity PT100) (smbus2)"},{"location":"Supported-Inputs-By-Measurement/#maxim-max31855-gravity-pt100-wiringpi","text":"","title":"MAXIM: MAX31855 (Gravity PT100) (wiringpi)"},{"location":"Supported-Inputs-By-Measurement/#maxim-max31855-adafruit_max31855","text":"","title":"MAXIM: MAX31855 (Adafruit_MAX31855)"},{"location":"Supported-Inputs-By-Measurement/#maxim-max31855-adafruit-circuitpython-max31855","text":"","title":"MAXIM: MAX31855 (adafruit-circuitpython-max31855)"},{"location":"Supported-Inputs-By-Measurement/#maxim-max31856","text":"","title":"MAXIM: MAX31856"},{"location":"Supported-Inputs-By-Measurement/#maxim-max31865-adafruit-circuitpython-max31865","text":"","title":"MAXIM: MAX31865 (Adafruit-CircuitPython-MAX31865)"},{"location":"Supported-Inputs-By-Measurement/#maxim-max31865-rpigpio","text":"","title":"MAXIM: MAX31865 (RPi.GPIO)"},{"location":"Supported-Inputs-By-Measurement/#melexis-mlx90614","text":"","title":"Melexis: MLX90614"},{"location":"Supported-Inputs-By-Measurement/#microchip-mcp9808","text":"","title":"Microchip: MCP9808"},{"location":"Supported-Inputs-By-Measurement/#panasonic-amg8833","text":"","title":"Panasonic: AMG8833"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-foundation-sense-hat_8","text":"","title":"Raspberry Pi Foundation: Sense HAT"},{"location":"Supported-Inputs-By-Measurement/#raspberry-pi-cpugpu-temperature","text":"","title":"Raspberry Pi: CPU/GPU Temperature"},{"location":"Supported-Inputs-By-Measurement/#ruuvi-ruuvitag_8","text":"","title":"Ruuvi: RuuviTag"},{"location":"Supported-Inputs-By-Measurement/#seeedstudio-dht1122_2","text":"","title":"Seeedstudio: DHT11/22"},{"location":"Supported-Inputs-By-Measurement/#senseair-k96_6","text":"","title":"Senseair: K96"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd-4x-40-41_3","text":"","title":"Sensirion: SCD-4x (40, 41)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd30-adafruit_circuitpython_scd30_3","text":"","title":"Sensirion: SCD30 (Adafruit_CircuitPython_SCD30)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd30-scd30_i2c_3","text":"","title":"Sensirion: SCD30 (scd30_i2c)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht1x7x_2","text":"","title":"Sensirion: SHT1x/7x"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht2x-sht20_2","text":"","title":"Sensirion: SHT2x (sht20)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht2x-smbus2_2","text":"","title":"Sensirion: SHT2x (smbus2)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht31-d_2","text":"","title":"Sensirion: SHT31-D"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht3x-30-31-35_2","text":"","title":"Sensirion: SHT3x (30, 31, 35)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht4x_2","text":"","title":"Sensirion: SHT4X"},{"location":"Supported-Inputs-By-Measurement/#sensirion-shtc3_2","text":"","title":"Sensirion: SHTC3"},{"location":"Supported-Inputs-By-Measurement/#sensorion-sht31-smart-gadget_3","text":"","title":"Sensorion: SHT31 Smart Gadget"},{"location":"Supported-Inputs-By-Measurement/#silicon-labs-si7021_2","text":"","title":"Silicon Labs: Si7021"},{"location":"Supported-Inputs-By-Measurement/#sonoff-th1610-tasmota-firmware-with-am2301si7021_2","text":"","title":"Sonoff: TH16/10 (Tasmota firmware) with AM2301/Si7021"},{"location":"Supported-Inputs-By-Measurement/#sonoff-th1610-tasmota-firmware-with-am2301_2","text":"","title":"Sonoff: TH16/10 (Tasmota firmware) with AM2301"},{"location":"Supported-Inputs-By-Measurement/#sonoff-th1610-tasmota-firmware-with-ds18b20","text":"","title":"Sonoff: TH16/10 (Tasmota firmware) with DS18B20"},{"location":"Supported-Inputs-By-Measurement/#te-connectivity-htu21d-adafruit_circuitpython_htu21d_2","text":"","title":"TE Connectivity: HTU21D (Adafruit_CircuitPython_HTU21D)"},{"location":"Supported-Inputs-By-Measurement/#te-connectivity-htu21d-pigpio_2","text":"","title":"TE Connectivity: HTU21D (pigpio)"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-hdc1000_2","text":"","title":"Texas Instruments: HDC1000"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-tmp006","text":"","title":"Texas Instruments: TMP006"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-city-current_5","text":"","title":"Weather: OpenWeatherMap (City, Current)"},{"location":"Supported-Inputs-By-Measurement/#weather-openweathermap-latlon-currentfuture_6","text":"","title":"Weather: OpenWeatherMap (Lat/Lon, Current/Future)"},{"location":"Supported-Inputs-By-Measurement/#xiaomi-miflora_4","text":"","title":"Xiaomi: Miflora"},{"location":"Supported-Inputs-By-Measurement/#xiaomi-mijia-lywsd03mmc-atc-and-non-atc-modes_2","text":"","title":"Xiaomi: Mijia LYWSD03MMC (ATC and non-ATC modes)"},{"location":"Supported-Inputs-By-Measurement/#total-dissolved-solids","text":"","title":"Total Dissolved Solids"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-ec_3","text":"","title":"Atlas Scientific: Atlas EC"},{"location":"Supported-Inputs-By-Measurement/#vapor-pressure-deficit","text":"","title":"Vapor Pressure Deficit"},{"location":"Supported-Inputs-By-Measurement/#aosong-am2315am2320_3","text":"","title":"AOSONG: AM2315/AM2320"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht11_3","text":"","title":"AOSONG: DHT11"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht20_3","text":"","title":"AOSONG: DHT20"},{"location":"Supported-Inputs-By-Measurement/#aosong-dht22_3","text":"","title":"AOSONG: DHT22"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_bme280_5","text":"","title":"BOSCH: BME280 (Adafruit_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-adafruit_circuitpython_bme280_5","text":"","title":"BOSCH: BME280 (Adafruit_CircuitPython_BME280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme280-rpibme280_5","text":"","title":"BOSCH: BME280 (RPi.bme280)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-adafruit_circuitpython_bme680_6","text":"","title":"BOSCH: BME680 (Adafruit_CircuitPython_BME680)"},{"location":"Supported-Inputs-By-Measurement/#bosch-bme680-bme680_6","text":"","title":"BOSCH: BME680 (bme680)"},{"location":"Supported-Inputs-By-Measurement/#ruuvi-ruuvitag_9","text":"","title":"Ruuvi: RuuviTag"},{"location":"Supported-Inputs-By-Measurement/#seeedstudio-dht1122_3","text":"","title":"Seeedstudio: DHT11/22"},{"location":"Supported-Inputs-By-Measurement/#senseair-k96_7","text":"","title":"Senseair: K96"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd-4x-40-41_4","text":"","title":"Sensirion: SCD-4x (40, 41)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd30-adafruit_circuitpython_scd30_4","text":"","title":"Sensirion: SCD30 (Adafruit_CircuitPython_SCD30)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-scd30-scd30_i2c_4","text":"","title":"Sensirion: SCD30 (scd30_i2c)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht1x7x_3","text":"","title":"Sensirion: SHT1x/7x"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht2x-sht20_3","text":"","title":"Sensirion: SHT2x (sht20)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht2x-smbus2_3","text":"","title":"Sensirion: SHT2x (smbus2)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht31-d_3","text":"","title":"Sensirion: SHT31-D"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht3x-30-31-35_3","text":"","title":"Sensirion: SHT3x (30, 31, 35)"},{"location":"Supported-Inputs-By-Measurement/#sensirion-sht4x_3","text":"","title":"Sensirion: SHT4X"},{"location":"Supported-Inputs-By-Measurement/#sensirion-shtc3_3","text":"","title":"Sensirion: SHTC3"},{"location":"Supported-Inputs-By-Measurement/#sensorion-sht31-smart-gadget_4","text":"","title":"Sensorion: SHT31 Smart Gadget"},{"location":"Supported-Inputs-By-Measurement/#silicon-labs-si7021_3","text":"","title":"Silicon Labs: Si7021"},{"location":"Supported-Inputs-By-Measurement/#sonoff-th1610-tasmota-firmware-with-am2301si7021_3","text":"","title":"Sonoff: TH16/10 (Tasmota firmware) with AM2301/Si7021"},{"location":"Supported-Inputs-By-Measurement/#sonoff-th1610-tasmota-firmware-with-am2301_3","text":"","title":"Sonoff: TH16/10 (Tasmota firmware) with AM2301"},{"location":"Supported-Inputs-By-Measurement/#te-connectivity-htu21d-adafruit_circuitpython_htu21d_3","text":"","title":"TE Connectivity: HTU21D (Adafruit_CircuitPython_HTU21D)"},{"location":"Supported-Inputs-By-Measurement/#te-connectivity-htu21d-pigpio_3","text":"","title":"TE Connectivity: HTU21D (pigpio)"},{"location":"Supported-Inputs-By-Measurement/#texas-instruments-hdc1000_3","text":"","title":"Texas Instruments: HDC1000"},{"location":"Supported-Inputs-By-Measurement/#version","text":"","title":"Version"},{"location":"Supported-Inputs-By-Measurement/#mycodo-mycodo-version","text":"","title":"Mycodo: Mycodo Version"},{"location":"Supported-Inputs-By-Measurement/#voc","text":"","title":"VOC"},{"location":"Supported-Inputs-By-Measurement/#ams-ccs811-with-temperature_2","text":"","title":"AMS: CCS811 (with Temperature)"},{"location":"Supported-Inputs-By-Measurement/#ams-ccs811-without-temperature_1","text":"","title":"AMS: CCS811 (without Temperature)"},{"location":"Supported-Inputs-By-Measurement/#volume","text":"","title":"Volume"},{"location":"Supported-Inputs-By-Measurement/#atlas-scientific-atlas-flow-meter_1","text":"","title":"Atlas Scientific: Atlas Flow Meter"},{"location":"Supported-Inputs-By-Measurement/#generic-hall-flow-meter_1","text":"","title":"Generic: Hall Flow Meter"},{"location":"Supported-Inputs/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Built-In Inputs (System) ~ Linux: Bash Command ~ Manufacturer: Linux Measurements: Return Value Interfaces: Mycodo This Input will execute a command in the shell and store the output as a float value. Perform any unit conversions within your script or command. A measurement/unit is required to be selected. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Command Timeout Integer - Default Value: 60 How long to wait for the command to finish before killing the process. User Text - Default Value: mycodo The user to execute the command Current Working Directory Text - Default Value: /home/pi The current working directory of the shell environment. Linux: Python 3 Code (v1.0) ~ Manufacturer: Linux Measurements: Store Value(s) Interfaces: Mycodo Dependencies: pylint All channels require a Measurement Unit to be selected and saved in order to store values to the database. Your code is executed from the same Python virtual environment that Mycodo runs from. Therefore, you must install Python libraries to this environment if you want them to be available to your code. This virtualenv is located at /opt/Mycodo/env and if you wanted to install a library, for example \"my_library\" using pip, you would execute \"sudo /opt/Mycodo/env/bin/pip install my_library\". Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Analyze Python Code with Pylint Boolean - Default Value: True Analyze your Python code with pylint when saving Linux: Python 3 Code (v2.0) ~ Manufacturer: Linux Measurements: Store Value(s) Interfaces: Mycodo Dependencies: pylint This is an alternate Python 3 Code Input that uses a different method for storing values to the database. This was created because the Python 3 Code v1.0 Input does not allow the use of Input Actions. This method does allow the use of Input Actions. (11/21/2023 Update: The Python 3 Code (v1.0) Input now allows the execution of Actions). All channels require a Measurement Unit to be selected and saved in order to store values to the database. Your code is executed from the same Python virtual environment that Mycodo runs from. Therefore, you must install Python libraries to this environment if you want them to be available to your code. This virtualenv is located at /opt/Mycodo/env and if you wanted to install a library, for example \"my_library\" using pip, you would execute \"sudo /opt/Mycodo/env/bin/pip install my_library\". Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Python 3 Code The code to execute. Must return a value. Analyze Python Code with Pylint Boolean - Default Value: True Analyze your Python code with pylint when saving Mycodo: CPU Load ~ Manufacturer: Mycodo Measurements: CPULoad Libraries: os.getloadavg() Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Mycodo: Free Space ~ Manufacturer: Mycodo Measurements: Unallocated Disk Space Libraries: os.statvfs() Option Type Description Period (Seconds) Decimal The duration between measurements or actions Mycodo: Mycodo Version ~ Manufacturer: Mycodo Measurements: Version as Major.Minor.Revision Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Mycodo: Output State (On/Off) ~ Manufacturer: Mycodo Measurements: Boolean This Input stores a 0 (off) or 1 (on) for the selected On/Off Output. Option Type Description Period (Seconds) Decimal The duration between measurements or actions On/Off Output Channel Select Channel (Output_Channels) Select an output to measure Mycodo: Server Ping ~ Manufacturer: Mycodo Measurements: Boolean Libraries: ping This Input executes the bash command \"ping -c [times] -w [deadline] [host]\" to determine if the host can be pinged. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Mycodo: Server Port Open ~ Manufacturer: Mycodo Measurements: Boolean Libraries: nc This Input executes the bash command \"nc -zv [host] [port]\" to determine if the host at a particular port is accessible. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Mycodo: Spacer ~ Manufacturer: Mycodo A spacer to organize Inputs. Option Type Description Color Text - Default Value: #000000 The color of the name text Mycodo: System and Mycodo RAM ~ Manufacturer: Mycodo Measurements: RAM Allocation Libraries: psutil, resource.getrusage() Dependencies: psutil Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Mycodo Frontend RAM Endpoint Text - Default Value: https://127.0.0.1/ram The endpoint to get Mycodo frontend ram usage Mycodo: Test Input: Save your own measurement value ~ Manufacturer: Mycodo Measurements: Variable measurements This is a simple test Input that allows you to save any value as a measurement, that will be stored in the measurement database. It can be useful for testing other parts of Mycodo, such as PIDs, Bang-Bang, and Conditional Functions, since you can be completely in control of what values the input provides to the Functions. Note 1: Select and save the Name and Measurement Unit for each channel. Once the unit has been saved, you can convert to other units in the Convert Measurement section. Note 2: Activate the Input before storing measurements. Option Type Description Measurements Enabled Multi-Select The measurements to record Channel Options Name Text A name to distinguish this from others Commands Enter the Value you want to store as a measurement, then press Store Measurement. Channel Integer This is the channel to save the measurement value to Value Decimal - Default Value: 10.0 This is the measurement value to save for this Input Store Measurement Button Mycodo: Uptime ~ Manufacturer: Mycodo Measurements: Seconds Since System Startup Option Type Description Period (Seconds) Decimal The duration between measurements or actions Raspberry Pi: CPU/GPU Temperature ~ Manufacturer: Raspberry Pi Measurements: Temperature Interfaces: RPi The internal CPU and GPU temperature of the Raspberry Pi. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Path for CPU Temperature Text - Default Value: /sys/class/thermal/thermal_zone0/temp Reads the CPU temperature from this file Path to vcgencmd Text - Default Value: /usr/bin/vcgencmd Reads the GPU from vcgencmd Raspberry Pi: Edge Detection ~ Manufacturer: Raspberry Pi Measurements: Rising/Falling Edge Interfaces: GPIO Libraries: RPi.GPIO Dependencies: RPi.GPIO Option Type Description Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Pin Mode Select(Options: [ Floating | Pull Down | Pull Up] (Default in bold ) Enables or disables the pull-up or pull-down resistor Raspberry Pi: GPIO State ~ Manufacturer: Raspberry Pi Measurements: GPIO State Interfaces: GPIO Libraries: RPi.GPIO Dependencies: RPi.GPIO Measures the state of a GPIO pin, returning either 0 (low) or 1 (high). Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Pin Mode Select(Options: [ Floating | Pull Down | Pull Up] (Default in bold ) Enables or disables the pull-up or pull-down resistor Raspberry Pi: Signal (PWM) ~ Manufacturer: Raspberry Pi Measurements: Frequency/Pulse Width/Duty Cycle Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Raspberry Pi: Signal (Revolutions) (pigpio method #1) ~ Manufacturer: Raspberry Pi Measurements: RPM Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio This calculates RPM from pulses on a pin using pigpio, but has been found to be less accurate than the method #2 module. This is typically used to measure the speed of a fan from a tachometer pin, however this can be used to measure any 3.3-volt pulses from a wire. Use a resistor to pull the measurement pin to 3.3 volts, set pigpio to the lowest latency (1 ms) on the Configure -> Raspberry Pi page. Note 1: Not setting pigpio to the lowest latency will hinder accuracy. Note 2: accuracy decreases as RPM increases. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Raspberry Pi: Signal (Revolutions) (pigpio method #2) ~ Manufacturer: Raspberry Pi Measurements: RPM Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio This is an alternate method to calculate RPM from pulses on a pin using pigpio, and has been found to be more accurate than the method #1 module. This is typically used to measure the speed of a fan from a tachometer pin, however this can be used to measure any 3.3-volt pulses from a wire. Use a resistor to pull the measurement pin to 3.3 volts, set pigpio to the lowest latency (1 ms) on the Configure -> Raspberry Pi page. Note 1: Not setting pigpio to the lowest latency will hinder accuracy. Note 2: accuracy decreases as RPM increases. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Pin: GPIO (BCM) Integer The pin to measure pulses from Sample Time (Seconds) Decimal - Default Value: 5.0 The duration of time to sample Pulses Per Rev Decimal - Default Value: 15.8 The number of pulses per revolution to calculate revolutions per minute (RPM) Built-In Inputs (Devices) ~ AMS: AS7262 ~ Manufacturer: AMS Measurements: Light at 450, 500, 550, 570, 600, 650 nm Interfaces: I 2 C Libraries: as7262 Dependencies: as7262 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Gain Select(Options: [1x | 3.7x | 16x | 64x ] (Default in bold ) Set the sensor gain Illumination LED Current Select(Options: [ 12.5 mA | 25 mA | 50 mA | 100 mA] (Default in bold ) Set the illumination LED current (milliamps) Illumination LED Mode Select(Options: [ On | Off] (Default in bold ) Turn the illumination LED on or off during a measurement Indicator LED Current Select(Options: [ 1 mA | 2 mA | 4 mA | 8 mA] (Default in bold ) Set the indicator LED current (milliamps) Indicator LED Mode Select(Options: [ On | Off] (Default in bold ) Turn the indicator LED on or off during a measurement Integration Time Decimal - Default Value: 15.0 The integration time (0 - ~91 ms) AMS: CCS811 (with Temperature) ~ Manufacturer: AMS Measurements: CO2/VOC/Temperature Interfaces: I 2 C Libraries: Adafruit_CCS811 Dependencies: Adafruit_CCS811 , Adafruit-GPIO Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete AMS: CCS811 (without Temperature) ~ Manufacturer: AMS Measurements: CO2/VOC Interfaces: I 2 C Libraries: Adafruit_CircuitPython_CCS811 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-ccs811 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Additional URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete AMS: TSL2561 ~ Manufacturer: AMS Measurements: Light Interfaces: I 2 C Libraries: tsl2561 Dependencies: Adafruit-GPIO , Adafruit-PureIO , tsl2561 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete AMS: TSL2591 ~ Manufacturer: AMS Measurements: Light Interfaces: I 2 C Libraries: maxlklaxl/python-tsl2591 Dependencies: tsl2591 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete AOSONG: AM2315/AM2320 ~ Manufacturer: AOSONG Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: quick2wire-api Dependencies: quick2wire-api Datasheet URL: Link Product URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete AOSONG: DHT11 ~ Manufacturer: AOSONG Measurements: Humidity/Temperature Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio Datasheet URL: Link Product URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete AOSONG: DHT20 ~ Manufacturer: AOSONG Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete AOSONG: DHT22 ~ Manufacturer: AOSONG Measurements: Humidity/Temperature Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio Datasheet URL: Link Product URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete ASAIR: AHTx0 ~ Manufacturer: ASAIR Measurements: Temperature/Humidity Interfaces: I 2 C Libraries: Adafruit_CircuitPython_AHTx0 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-ahtx0 Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Adafruit: I2C Capacitive Moisture Sensor ~ Manufacturer: Adafruit Measurements: Moisture/Temperature Interfaces: I 2 C Libraries: adafruit_seesaw Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-seesaw Manufacturer URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Analog Devices: ADT7410 ~ Manufacturer: Analog Devices Measurements: Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_ADT7410 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-adt7410 Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Analog Devices: ADXL34x (343, 344, 345, 346) ~ Manufacturer: Analog Devices Measurements: Acceleration Interfaces: I 2 C Libraries: Adafruit_CircuitPython_ADXL34x Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-adxl34x Datasheet URLs: Link 1 , Link 2 , Link 3 , Link 4 Product URLs: Link 1 , Link 2 , Link 3 , Link 4 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Range Select(Options: [\u00b12 g (\u00b119.6 m/s/s) | \u00b14 g (\u00b139.2 m/s/s) | \u00b18 g (\u00b178.4 m/s/s) | \u00b116 g (\u00b1156.9 m/s/s) ] (Default in bold ) Set the measurement range AnyLeaf: AnyLeaf EC ~ Manufacturer: AnyLeaf Measurements: Electrical Conductivity Interfaces: UART Libraries: anyleaf Dependencies: libjpeg-dev , zlib1g-dev , Pillow , scipy , pyusb , Adafruit-extended-bus , anyleaf Manufacturer URL: Link Datasheet URL: Link Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Conductivity Constant Decimal - Default Value: 1.0 Conductivity constant K AnyLeaf: AnyLeaf ORP ~ Manufacturer: AnyLeaf Measurements: Oxidation Reduction Potential Interfaces: I 2 C Libraries: anyleaf Dependencies: libjpeg-dev , zlib1g-dev , Pillow , scipy , pyusb , Adafruit-extended-bus , anyleaf Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Calibrate: Voltage (Internal) Decimal - Default Value: 0.4 Calibration data: internal voltage Calibrate: ORP (Internal) Decimal - Default Value: 400.0 Calibration data: internal ORP Commands Calibrate: Buffer ORP (mV) Decimal - Default Value: 400.0 This is the nominal ORP of the calibration buffer in mV, usually labelled on the bottle. Calibrate Button Clear Calibration Slots Button AnyLeaf: AnyLeaf pH ~ Manufacturer: AnyLeaf Measurements: Ion concentration Interfaces: I 2 C Libraries: anyleaf Dependencies: libjpeg-dev , zlib1g-dev , Pillow , scipy , pyusb , Adafruit-extended-bus , anyleaf Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Cal data: V1 (internal) Decimal Calibration data: Voltage Cal data: pH1 (internal) Decimal - Default Value: 7.0 Calibration data: pH Cal data: T1 (internal) Decimal - Default Value: 23.0 Calibration data: Temperature Cal data: V2 (internal) Decimal - Default Value: 0.17 Calibration data: Voltage Cal data: pH2 (internal) Decimal - Default Value: 4.0 Calibration data: pH Cal data: T2 (internal) Decimal - Default Value: 23.0 Calibration data: Temperature Cal data: V3 (internal) Decimal Calibration data: Voltage Cal data: pH3 (internal) Decimal Calibration data: pH Cal data: T3 (internal) Decimal Calibration data: Temperature Commands Calibration buffer pH Decimal - Default Value: 7.0 This is the nominal pH of the calibration buffer, usually labelled on the bottle. Calibrate, slot 1 Button Calibrate, slot 2 Button Calibrate, slot 3 Button Clear Calibration Slots Button Atlas Scientific: Atlas CO2 (Carbon Dioxide Gas) ~ Manufacturer: Atlas Scientific Measurements: CO2 Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands A one- or two-point calibration can be performed. After exposing the probe to a concentration of CO2 between 3,000 and 5,000 ppmv until readings stabilize, press Calibrate (High). You can place the probe in a 0 CO2 environment until readings stabilize, then press Calibrate (Zero). You can also clear the currently-saved calibration by pressing Clear Calibration, returning to the factory-set calibration. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. High Point CO2 Integer - Default Value: 3000 The high CO2 calibration point (3000 - 5000 ppmv) Calibrate (High) Button Calibrate (Zero) Button Clear Calibration Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x69 The new I2C to set the device to Set I2C Address Button Atlas Scientific: Atlas Color ~ Manufacturer: Atlas Scientific Measurements: RGB, CIE, LUX, Proximity Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete LED Only For Measure Boolean - Default Value: True Turn the LED on only during the measurement LED Percentage Integer - Default Value: 30 What percentage of power to supply to the LEDs during measurement Gamma Correction Decimal - Default Value: 1.0 Gamma correction between 0.01 and 4.99 (default is 1.0) Commands The EZO-RGB color sensor is designed to be calibrated to a white object at the maximum brightness the object will be viewed under. In order to get the best results, Atlas Scientific strongly recommends that the sensor is mounted into a fixed location. Holding the sensor in your hand during calibration will decrease performance. 1. Embed the EZO-RGB color sensor into its intended use location. 2. Set LED brightness to the desired level. 3. Place a white object in front of the target object and press the Calibration button. 4. A single color reading will be taken and the device will be fully calibrated. Calibrate Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x70 The new I2C to set the device to Set I2C Address Button Atlas Scientific: Atlas DO ~ Manufacturer: Atlas Scientific Measurements: Dissolved Oxygen Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Commands A one- or two-point calibration can be performed. After exposing the probe to air for 30 seconds until readings stabilize, press Calibrate (Air). If you require accuracy below 1.0 mg/L, you can place the probe in a 0 mg/L solution for 30 to 90 seconds until readings stabilize, then press Calibrate (0 mg/L). You can also clear the currently-saved calibration by pressing Clear Calibration. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. Calibrate (Air) Button Calibrate (0 mg/L) Button Clear Calibration Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x66 The new I2C to set the device to Set I2C Address Button Atlas Scientific: Atlas EC ~ Manufacturer: Atlas Scientific Measurements: Electrical Conductivity Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Commands Calibration: a one- or two-point calibration can be performed. It's a good idea to clear the calibration before calibrating. Always perform a dry calibration with the probe in the air (not in any fluid). Then perform either a one- or two-point calibration with calibrated solutions. If performing a one-point calibration, use the Single Point Calibration field and button. If performing a two-point calibration, use the Low and High Point Calibration fields and buttons. Allow a minute or two after submerging your probe in a calibration solution for the measurements to equilibrate before calibrating to that solution. The EZO EC circuit default temperature compensation is set to 25 \u00b0C. If the temperature of the calibration solution is +/- 2 \u00b0C from 25 \u00b0C, consider setting the temperature compensation first. Note that at no point should you change the temperature compensation value during calibration. Therefore, if you have previously enabled temperature compensation, allow at least one measurement to occur (to set the compensation value), then disable the temperature compensation measurement while you calibrate. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. Clear Calibration Button Calibrate Dry Button Single Point EC (\u00b5S) Integer - Default Value: 84 The EC (\u00b5S) of the single point calibration solution Calibrate Single Point Button Low Point EC (\u00b5S) Integer - Default Value: 12880 The EC (\u00b5S) of the low point calibration solution Calibrate Low Point Button High Point EC (\u00b5S) Integer - Default Value: 80000 The EC (\u00b5S) of the high point calibration solution Calibrate High Point Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x64 The new I2C to set the device to Set I2C Address Button Atlas Scientific: Atlas Flow Meter ~ Manufacturer: Atlas Scientific Measurements: Total Volume, Flow Rate Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Set the Measurement Time Base to a value most appropriate for your anticipated flow (it will affect accuracy). This flow rate time base that is set and returned from the sensor will be converted to liters per minute, which is the default unit for this input module. If you desire a different rate to be stored in the database (such as liters per second or hour), then use the Convert to Unit option. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Flow Meter Type Select(Options: [ Atlas Scientific 3/8\" Flow Meter | Atlas Scientific 1/4\" Flow Meter | Atlas Scientific 1/2\" Flow Meter | Atlas Scientific 3/4\" Flow Meter | Non-Atlas Scientific Flow Meter] (Default in bold ) Set the type of flow meter used Atlas Meter Time Base Select(Options: [Liters per Second | Liters per Minute | Liters per Hour] (Default in bold ) If using an Atlas Scientific flow meter, set the flow rate/time base Internal Resistor Select(Options: [ Use Atlas Scientific Flow Meter | Disable Internal Resistor | 1 K \u03a9 Pull-Up | 1 K \u03a9 Pull-Down | 10 K \u03a9 Pull-Up | 10 K \u03a9 Pull-Down | 100 K \u03a9 Pull-Up | 100 K \u03a9 Pull-Down] (Default in bold ) Set an internal resistor for the flow meter Custom K Value(s) Text If using a non-Atlas Scientific flow meter, enter the meter's K value(s). For a single K value, enter '[volume per pulse],[number of pulses]'. For multiple K values (up to 16), enter '[volume at frequency],[frequency in Hz];[volume at frequency],[frequency in Hz];...'. Leave blank to disable. K Value Time Base Select(Options: [ Use Atlas Scientific Flow Meter | Liters per Second | Liters per Minute | Liters per Hour] (Default in bold ) If using a non-Atlas Scientific flow meter, set the flow rate/time base for the custom K values entered. Commands The total volume can be cleared with the following button or with the Clear Total Volume Function Action. Clear Total: Volume Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x68 The new I2C to set the device to Set I2C Address Button Atlas Scientific: Atlas Humidity ~ Manufacturer: Atlas Scientific Measurements: Humidity/Temperature Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete LED Mode Select(Options: [ Always On | Always Off | Only On During Measure] (Default in bold ) When to turn the LED on Commands New I2C Address Text - Default Value: 0x6f The new I2C to set the device to Set I2C Address Button Atlas Scientific: Atlas O2 (Oxygen Gas) ~ Manufacturer: Atlas Scientific Measurements: O2 Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Temperature Compensation: Manual Decimal - Default Value: 20.0 If not using a measurement, set the temperature to compensate LED Mode Select(Options: [ Always On | Always Off | Only On During Measure] (Default in bold ) When to turn the LED on Commands A one- or two-point calibration can be performed. After exposing the probe to a specific concentration of O2 until readings stabilize, press Calibrate (High). You can place the probe in a 0% O2 environment until readings stabilize, then press Calibrate (Zero). You can also clear the currently-saved calibration by pressing Clear Calibration, returning to the factory-set calibration. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. High Point O2 Decimal - Default Value: 20.95 The high O2 calibration point (percent) Calibrate (High) Button Calibrate (Zero) Button Clear Calibration Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x69 The new I2C to set the device to Set I2C Address Button Atlas Scientific: Atlas ORP ~ Manufacturer: Atlas Scientific Measurements: Oxidation Reduction Potential Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Commands A one-point calibration can be performed. Enter the solution's mV, set the probe in the solution, then press Calibrate. You can also clear the currently-saved calibration by pressing Clear Calibration. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. Calibration Solution mV Integer - Default Value: 225 The value of the calibration solution, in mV Calibrate Button Clear Calibration Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x62 The new I2C to set the device to Set I2C Address Button Atlas Scientific: Atlas PT-1000 ~ Manufacturer: Atlas Scientific Measurements: Temperature Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands New I2C Address Text - Default Value: 0x66 The new I2C to set the device to Set I2C Address Button Temperature (\u00b0C) Decimal - Default Value: 100.0 Temperature for single point calibration Calibrate Button Clear Calibration Button Atlas Scientific: Atlas Pressure ~ Manufacturer: Atlas Scientific Measurements: Pressure Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete LED Mode Select(Options: [ Always On | Always Off | Only On During Measure] (Default in bold ) When to turn the LED on Commands New I2C Address Text - Default Value: 0x6a The new I2C to set the device to Set I2C Address Button Atlas Scientific: Atlas pH ~ Manufacturer: Atlas Scientific Measurements: Ion Concentration Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Calibration Measurement is an optional setting that provides a temperature measurement (in Celsius) of the water that the pH is being measured from. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Commands Calibration: a one-, two- or three-point calibration can be performed. It's a good idea to clear the calibration before calibrating. The first calibration must be the Mid point. The second must be the Low point. And the third must be the High point. You can perform a one-, two- or three-point calibration, but they must be performed in this order. Allow a minute or two after submerging your probe in a calibration solution for the measurements to equilibrate before calibrating to that solution. The EZO pH circuit default temperature compensation is set to 25 \u00b0C. If the temperature of the calibration solution is +/- 2 \u00b0C from 25 \u00b0C, consider setting the temperature compensation first. Note that if you have a Temperature Compensation Measurement selected from the Options, this will overwrite the manual Temperature Compensation set here, so be sure to disable this option if you would like to specify the temperature to compensate with. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. Compensation Temperature (\u00b0C) Decimal - Default Value: 25.0 The temperature of the calibration solutions Set Temperature Compensation Button Clear Calibration Button Mid Point pH Decimal - Default Value: 7.0 The pH of the mid point calibration solution Calibrate Mid Button Low Point pH Decimal - Default Value: 4.0 The pH of the low point calibration solution Calibrate Low Button High Point pH Decimal - Default Value: 10.0 The pH of the high point calibration solution Calibrate High Button Calibration Export/Import: Export calibration to a series of strings. These can later be imported to restore the calibration. Watch the Daemon Log for the output. Export Calibration Button Calibration String Text The calibration string to import Import Calibration Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x63 The new I2C to set the device to Set I2C Address Button BOSCH: BME280 (Adafruit_BME280) ~ Manufacturer: BOSCH Measurements: Pressure/Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_BME280 Dependencies: Adafruit-GPIO , Adafruit_BME280 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete BOSCH: BME280 (Adafruit_CircuitPython_BME280) ~ Manufacturer: BOSCH Measurements: Pressure/Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_BME280 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-bme280 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete BOSCH: BME280 (RPi.bme280) ~ Manufacturer: BOSCH Measurements: Pressure/Humidity/Temperature Interfaces: I 2 C Libraries: RPi.bme280 Dependencies: RPi.bme280 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete BOSCH: BME680 (Adafruit_CircuitPython_BME680) ~ Manufacturer: BOSCH Measurements: Temperature/Humidity/Pressure/Gas Interfaces: I 2 C Libraries: Adafruit_CircuitPython_BME680 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-bme680 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Humidity Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. Temperature Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. Pressure Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. IIR Filter Size Select(Options: [0 | 1 | 3 | 7 | 15 | 31 | 63 | 127] (Default in bold ) Optionally remove short term fluctuations from the temperature and pressure readings, increasing their resolution but reducing their bandwidth. Temperature Offset Decimal The amount to offset the temperature, either negative or positive Sea Level Pressure (ha) Decimal - Default Value: 1013.25 The pressure at sea level for the sensor location BOSCH: BME680 (bme680) ~ Manufacturer: BOSCH Measurements: Temperature/Humidity/Pressure/Gas Interfaces: I 2 C Libraries: bme680 Dependencies: bme680 , smbus2 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Humidity Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. Temperature Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. Pressure Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. IIR Filter Size Select(Options: [0 | 1 | 3 | 7 | 15 | 31 | 63 | 127] (Default in bold ) Optionally remove short term fluctuations from the temperature and pressure readings, increasing their resolution but reducing their bandwidth. Gas Heater Temperature (\u00b0C) Integer - Default Value: 320 What temperature to set Gas Heater Duration (ms) Integer - Default Value: 150 How long of a duration to heat. 20-30 ms are necessary for the heater to reach the intended target temperature. Gas Heater Profile Select Select one of the 10 configured heating durations/set points Temperature Offset Decimal The amount to offset the temperature, either negative or positive BOSCH: BMP180 ~ Manufacturer: BOSCH Measurements: Pressure/Temperature Interfaces: I 2 C Libraries: Adafruit_BMP Dependencies: Adafruit-BMP , Adafruit-GPIO Datasheet URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete BOSCH: BMP280 (Adafruit_GPIO) ~ Manufacturer: BOSCH Measurements: Pressure/Temperature Interfaces: I 2 C Libraries: Adafruit_GPIO Dependencies: Adafruit-GPIO Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete BOSCH: BMP280 (bmp280-python) ~ Manufacturer: BOSCH Measurements: Pressure/Temperature Interfaces: I 2 C Libraries: bmp280-python Dependencies: smbus2 , bmp280 Manufacturer URL: Link Datasheet URL: Link Product URL: Link This is similar to the other BMP280 Input, except it uses a different library, whcih includes the ability to set forced mode. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Enable Forced Mode Boolean Enable heater to evaporate condensation. Turn on heater x seconds every y measurements. CO2Meter: K30 ~ Manufacturer: CO2Meter Measurements: CO2 Interfaces: I 2 C, UART Libraries: serial (UART) Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Catnip Electronics: Chirp ~ Manufacturer: Catnip Electronics Measurements: Light/Moisture/Temperature Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x20 The new I2C to set the device to Set I2C Address Button Cozir: Cozir CO2 ~ Manufacturer: Cozir Measurements: CO2/Humidity/Temperature Interfaces: UART Libraries: pierre-haessig/pycozir Dependencies: cozir Manufacturer URL: Link Datasheet URL: Link Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Generic: Hall Flow Meter ~ Manufacturer: Generic Measurements: Flow Rate, Total Volume Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Pulses per Liter Decimal - Default Value: 1.0 Enter the conversion factor for this meter (pulses to Liter). Commands Clear Total: Volume Button Infineon: DPS310 ~ Manufacturer: Infineon Measurements: Pressure/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_DPS310 Dependencies: Adafruit-extended-bus , adafruit-circuitpython-dps310 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete MAXIM: DS1822 ~ Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button MAXIM: DS1825 ~ Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button MAXIM: DS18B20 (ow-shell) ~ Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: ow-shell Dependencies: ow-shell , owfs Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Additional URL: Link Warning: Counterfeit DS18B20 sensors are common and can cause a host of issues. Review the Additional URL for more information about how to determine if your sensor is authentic. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete MAXIM: DS18B20 (w1thermsensor) ~ Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Additional URL: Link Warning: Counterfeit DS18B20 sensors are common and can cause a host of issues. Review the Additional URL for more information about how to determine if your sensor is authentic. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Offset Decimal The temperature offset (degrees Celsius) to apply Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button MAXIM: DS18S20 ~ Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button MAXIM: DS28EA00 ~ Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button MAXIM: MAX31850K ~ Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button MAXIM: MAX31855 (Gravity PT100) (smbus2) ~ Manufacturer: MAXIM Measurements: Temperature Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete MAXIM: MAX31855 (Gravity PT100) (wiringpi) ~ Manufacturer: MAXIM Measurements: Temperature Interfaces: I 2 C Libraries: wiringpi Dependencies: wiringpi Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete MAXIM: MAX31855 (Adafruit_MAX31855) ~ Manufacturer: MAXIM Measurements: Temperature (Object/Die) Interfaces: UART Libraries: Adafruit_MAX31855 Dependencies: Adafruit_MAX31855 , Adafruit-GPIO Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete MAXIM: MAX31855 (adafruit-circuitpython-max31855) ~ Manufacturer: MAXIM Measurements: Temperature (Object/Die) Interfaces: SPI Libraries: adafruit-circuitpython-max31855 Dependencies: adafruit-circuitpython-max31855 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Chip Select Pin Integer - Default Value: 5 Enter the GPIO Chip Select Pin for your device. MAXIM: MAX31856 ~ Manufacturer: MAXIM Measurements: Temperature (Object/Die) Interfaces: UART Libraries: RPi.GPIO Dependencies: RPi.GPIO Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete MAXIM: MAX31865 (Adafruit-CircuitPython-MAX31865) ~ Manufacturer: MAXIM Measurements: Temperature Interfaces: SPI Libraries: Adafruit-CircuitPython-MAX31865 Dependencies: adafruit-circuitpython-max31865 Manufacturer URL: Link Datasheet URL: Link Product URL: Link This module was added to allow support for multiple sensors to be connected at the same time, which the original MAX31865 module was not designed for. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Chip Select Pin Integer - Default Value: 8 Enter the GPIO Chip Select Pin for your device. Number of wires Select(Options: [ 2 Wires | 3 Wires | 4 Wires] (Default in bold ) Select the number of wires your thermocouple has. MAXIM: MAX31865 (RPi.GPIO) ~ Manufacturer: MAXIM Measurements: Temperature Interfaces: UART Libraries: RPi.GPIO Dependencies: RPi.GPIO Manufacturer URL: Link Datasheet URL: Link Product URL: Link Note: This module does not allow for multiple sensors to be connected at the same time. For multi-sensor support, use the MAX31865 CircuitPython Input. Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete MQTT: MQTT Subscribe (JSON payload) ~ Manufacturer: MQTT Measurements: Variable measurements Interfaces: Mycodo Libraries: paho-mqtt, jmespath Dependencies: paho-mqtt , jmespath A single topic is subscribed to and the returned JSON payload contains one or more key/value pairs. The given JSON Key is used as a JMESPATH expression to find the corresponding value that will be stored for that channel. Be sure you select and save the Measurement Unit for each channel. Once the unit has been saved, you can convert to other units in the Convert Measurement section. Example expressions for jmespath (https://jmespath.org) include temperature , sensors[0].temperature , and bathroom.temperature which refer to the temperature as a direct key within the first entry of sensors or as a subkey of bathroom, respectively. Jmespath elements and keys that contain special characters have to be enclosed in double quotes, e.g. \"sensor-1\".temperature . Warning: If using multiple MQTT Inputs or Functions, ensure the Client IDs are unique. Option Type Description Measurements Enabled Multi-Select The measurements to record Host Text - Default Value: localhost Host or IP address Port Integer - Default Value: 1883 Host port number Topic Text - Default Value: mqtt/test/input The topic to subscribe to Keep Alive Integer - Default Value: 60 Maximum amount of time between received signals. Set to 0 to disable. Client ID Text - Default Value: client_FGIg092m Unique client ID for connecting to the server Use Login Boolean Send login credentials Use TLS Boolean Send login credentials using TLS Username Text - Default Value: user Username for connecting to the server Password Text Password for connecting to the server. Leave blank to disable. Use Websockets Boolean Use websockets to connect to the server. Channel Options Name Text A name to distinguish this from others JMESPATH Expression Text JMESPATH expression to find value in JSON response MQTT: MQTT Subscribe (Value payload) ~ Manufacturer: MQTT Measurements: Variable measurements Interfaces: Mycodo Libraries: paho-mqtt Dependencies: paho-mqtt A topic is subscribed to for each channel Subscription Topic and the returned payload value will be stored for that channel. Be sure you select and save the Measurement Unit for each of the channels. Once the unit has been saved, you can convert to other units in the Convert Measurement section. Warning: If using multiple MQTT Inputs or Functions, ensure the Client IDs are unique. Option Type Description Measurements Enabled Multi-Select The measurements to record Host Text - Default Value: localhost Host or IP address Port Integer - Default Value: 1883 Host port number Keep Alive Integer - Default Value: 60 Maximum amount of time between received signals. Set to 0 to disable. Client ID Text - Default Value: client_mqUgXLvM Unique client ID for connecting to the server Use Login Boolean Send login credentials Use TLS Boolean Send login credentials using TLS Username Text - Default Value: user Username for connecting to the server Password Text Password for connecting to the server. Leave blank to disable. Use Websockets Boolean Use websockets to connect to the server. Channel Options Name Text A name to distinguish this from others Subscription Topic Text The MQTT topic to subscribe to Melexis: MLX90393 ~ Manufacturer: Melexis Measurements: Magnetic Flux Interfaces: I 2 C Libraries: Adafruit_CircuitPython_MLX90393 Dependencies: Adafruit-extended-bus , adafruit-circuitpython-mlx90393 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Melexis: MLX90614 ~ Manufacturer: Melexis Measurements: Temperature (Ambient/Object) Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Microchip: MCP3008 (Adafruit_CircuitPython_MCP3xxx) ~ Manufacturer: Microchip Measurements: Voltage (Analog-to-Digital Converter) Interfaces: UART Libraries: Adafruit_CircuitPython_MCP3xxx Dependencies: adafruit-circuitpython-mcp3xxx Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete VREF (volts) Decimal - Default Value: 3.3 Set the VREF voltage Microchip: MCP3008 (Adafruit_MCP3008) ~ Manufacturer: Microchip Measurements: Voltage (Analog-to-Digital Converter) Interfaces: UART Libraries: Adafruit_MCP3008 Dependencies: Adafruit-MCP3008 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete VREF (volts) Decimal - Default Value: 3.3 Set the VREF voltage Microchip: MCP3208 ~ Manufacturer: Microchip Measurements: Voltage (Analog-to-Digital Converter) Interfaces: SPI Libraries: MCP3208 Dependencies: Adafruit-GPIO Manufacturer URL: Link Datasheet URL: Link Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete SPI Bus Integer The SPI bus ID. SPI Device Integer The SPI device ID. VREF (volts) Decimal - Default Value: 3.3 Set the VREF voltage Microchip: MCP342x (x=2,3,4,6,7,8) ~ Manufacturer: Microchip Measurements: Voltage (Analog-to-Digital Converter) Interfaces: I 2 C Libraries: MCP342x Dependencies: smbus2 , MCP342x Manufacturer URLs: Link 1 , Link 2 , Link 3 , Link 4 , Link 5 Datasheet URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Microchip: MCP9808 ~ Manufacturer: Microchip Measurements: Temperature Interfaces: I 2 C Libraries: Adafruit_MCP9808 Dependencies: Adafruit-GPIO , Adafruit_MCP9808 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Multiple Manufacturers: HC-SR04 ~ Manufacturer: Multiple Manufacturers Measurements: Ultrasonic Distance Interfaces: GPIO Libraries: Adafruit_CircuitPython_HCSR04 Dependencies: libgpiod-dev , pyusb , adafruit-circuitpython-hcsr04 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Additional URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Trigger Pin Integer Enter the GPIO Trigger Pin for your device (BCM numbering). Echo Pin Integer Enter the GPIO Echo Pin for your device (BCM numbering). Panasonic: AMG8833 ~ Manufacturer: Panasonic Measurements: 8x8 Temperature Grid Interfaces: I 2 C Libraries: Adafruit_AMG88xx/Pillow/colour Dependencies: libjpeg-dev , zlib1g-dev , colour , Pillow , Adafruit_AMG88xx Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Power Monitor: RPi Power Monitor (6 Channels) ~ Manufacturer: Power Monitor Measurements: AC Voltage, Power, Current, Power Factor Libraries: rpi-power-monitor Dependencies: rpi_power_monitor Manufacturer URL: Link Product URL: Link See https://github.com/David00/rpi-power-monitor/wiki/Calibrating-for-Accuracy for calibration procedures. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Grid Voltage Decimal - Default Value: 124.2 The AC voltage measured at the outlet Transformer Voltage Decimal - Default Value: 10.2 The AC voltage measured at the barrel plug of the 9 VAC transformer CT1 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT1 CT2 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT2 CT3 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT3 CT4 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT4 CT5 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT5 CT6 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT6 CT1 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT1 CT2 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT2 CT3 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT3 CT4 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT4 CT5 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT5 CT6 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT6 AC Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for AC ROHM: BH1750 ~ Manufacturer: ROHM Measurements: Light Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Raspberry Pi Foundation: Sense HAT ~ Manufacturer: Raspberry Pi Foundation Measurements: hum/temp/press/compass/magnet/accel/gyro Interfaces: I 2 C Libraries: sense-hat Dependencies: git , Bash Commands (see Module for details), sense-hat Manufacturer URL: Link This module acquires measurements from the Raspberry Pi Sense HAT sensors, which include the LPS25H, LSM9DS1, and HTS221. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Ruuvi: RuuviTag ~ Manufacturer: Ruuvi Measurements: Acceleration/Humidity/Pressure/Temperature Interfaces: BT Libraries: ruuvitag_sensor Dependencies: psutil , bluez , bluez-hcidump , ruuvitag-sensor Manufacturer URL: Link Datasheet URL: Link Option Type Description Bluetooth MAC (XX:XX:XX:XX:XX:XX) Text The Hci location of the Bluetooth device. Bluetooth Adapter (hci[X]) Text The adapter of the Bluetooth device. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete STMicroelectronics: VL53L0X ~ Manufacturer: STMicroelectronics Measurements: Millimeter (Time-of-Flight Distance) Interfaces: I 2 C Libraries: VL53L0X_rasp_python Dependencies: VL53L0X Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Accuracy Select(Options: [ Good Accuracy (33 ms, 1.2 m range) | Better Accuracy (66 ms, 1.2 m range) | Best Accuracy (200 ms, 1.2 m range) | Long Range (33 ms, 2 m) | High Speed, Low Accuracy (20 ms, 1.2 m)] (Default in bold ) Set the accuracy. A longer measurement duration yields a more accurate measurement Commands New I2C Address Text - Default Value: 0x52 The new I2C to set the device to Set I2C Address Button STMicroelectronics: VL53L1X ~ Manufacturer: STMicroelectronics Measurements: Millimeter (Time-of-Flight Distance) Interfaces: I 2 C Libraries: VL53L1X Dependencies: smbus2 , vl53l1x Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Notes when setting a custom timing budget: A higher timing budget results in greater measurement accuracy, but also a higher power consumption. The inter measurement period must be >= the timing budget, otherwise it will be double the expected value. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Range Select(Options: [ Short Range | Medium Range | Long Range | Custom Timing Budget] (Default in bold ) Select a range or select to set a custom Timing Budget and Inter Measurement Period. Timing Budget (microseconds) Integer - Default Value: 66000 Set the timing budget. Must be less than or equal to the Inter Measurement Period. Inter Measurement Period (milliseconds) Integer - Default Value: 70 Set the Inter Measurement Period STMicroelectronics: VL53L4CD ~ Manufacturer: STMicroelectronics Measurements: Millimeter (Time-of-Flight Distance) Interfaces: I 2 C Libraries: Adafruit-CircuitPython-VL53l4CD Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-vl53l4cd Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Timing Budget (ms) Integer - Default Value: 50 Set the timing budget between 10 to 200 ms. A longer duration yields a more accurate measurement. Inter-Measurement Period (ms) Integer Valid range between Timing Budget and 5000 ms (0 to disable) Commands The I2C address of the sensor can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate the Input and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x29 The new I2C to set the device to Set I2C Address Button Seeedstudio: DHT11/22 ~ Manufacturer: Seeedstudio Measurements: Humidity/Temperature Interfaces: GROVE Libraries: grovepi Dependencies: libatlas-base-dev , grovepi Manufacturer URLs: Link 1 , Link 2 Enter the Grove Pi+ GPIO pin connected to the sensor and select the sensor type. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Sensor Type Select(Options: [ DHT11 (Blue) | DHT22 (White)] (Default in bold ) Sensor type Senseair: K96 ~ Manufacturer: Senseair Measurements: Methane/Moisture/CO2/Pressure/Humidity/Temperature Interfaces: UART Libraries: Serial Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Sensirion: SCD-4x (40, 41) ~ Manufacturer: Sensirion Measurements: CO2/Temperature/Humidity Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SCD4x Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-scd4x Manufacturer URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Offset Decimal - Default Value: 4.0 Set the sensor temperature offset Altitude (m) Integer Set the sensor altitude (meters) Automatic Self-Calibration Boolean Set the sensor automatic self-calibration Persist Settings Boolean - Default Value: True Settings will persist after powering off Commands You can force the CO2 calibration for a specific CO2 concentration value (in ppmv). The sensor needs to be active for at least 3 minutes prior to calibration. CO2 Concentration (ppmv) Decimal - Default Value: 400.0 Calibrate to this CO2 concentration that the sensor is being exposed to (in ppmv) Calibrate CO2 Button Sensirion: SCD30 (Adafruit_CircuitPython_SCD30) ~ Manufacturer: Sensirion Measurements: CO2/Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SCD30 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitPython-scd30 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete I2C Frequency: The SCD-30 has temperamental I2C with clock stretching. The datasheet recommends starting at 50,000 Hz. I2C Frequency (Hz) Integer - Default Value: 50000 Automatic Self Ccalibration (ASC): To work correctly, the sensor must be on and active for 7 days after enabling ASC, and exposed to fresh air for at least 1 hour per day. Consult the manufacturer\u2019s documentation for more information. Enable Automatic Self Calibration Boolean Temperature Offset: Specifies the offset to be added to the reported measurements to account for a bias in the measured signal. Must be a positive value, and will reduce the recorded temperature by that amount. Give the sensor adequate time to acclimate after setting this value. Value is in degrees Celsius with a resolution of 0.01 degrees and a maximum value of 655.35 C. Temperature Offset Decimal Ambient Air Pressure (mBar): Specify the ambient air pressure at the measurement location in mBar. Setting this value adjusts the CO2 measurement calculations to account for the air pressure\u2019s effect on readings. Values must be in mBar, from 700 to 1200 mBar. Ambient Air Pressure (mBar) Integer - Default Value: 1200 Altitude: Specifies the altitude at the measurement location in meters above sea level. Setting this value adjusts the CO2 measurement calculations to account for the air pressure\u2019s effect on readings. Altitude (m) Integer - Default Value: 100 Commands A soft reset restores factory default values. Soft Reset Button Forced Re-Calibration: The SCD-30 is placed in an environment with a known CO2 concentration, this concentration value is entered in the CO2 Concentration (ppmv) field, then the Foce Calibration button is pressed. But how do you come up with that known value? That is a caveat of this approach and Sensirion suggests three approaches: 1. Using a separate secondary calibrated CO2 sensor to provide the value. 2. Exposing the SCD-30 to a controlled environment with a known value. 3. Exposing the SCD-30 to fresh outside air and using a value of 400 ppm. CO2 Concentration (ppmv) Integer - Default Value: 800 The CO2 concentration of the sensor environment when forcing calibration Force Recalibration Button Sensirion: SCD30 (scd30_i2c) ~ Manufacturer: Sensirion Measurements: CO2/Humidity/Temperature Interfaces: I 2 C Libraries: scd30_i2c Dependencies: scd30-i2c Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Automatic Self Ccalibration (ASC): To work correctly, the sensor must be on and active for 7 days after enabling ASC, and exposed to fresh air for at least 1 hour per day. Consult the manufacturer\u2019s documentation for more information. Enable Automatic Self Calibration Boolean Commands A soft reset restores factory default values. Soft Reset Button Sensirion: SHT1x/7x ~ Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: GPIO Libraries: sht_sensor Dependencies: sht-sensor Manufacturer URLs: Link 1 , Link 2 Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Sensirion: SHT2x (sht20) ~ Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: sht20 Dependencies: sht20 Manufacturer URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Resolution Select(Options: [11-bit | 12-bit | 13-bit | 14-bit ] (Default in bold ) The resolution of the temperature measurement Sensirion: SHT2x (smbus2) ~ Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Sensirion: SHT31-D ~ Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SHT31 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-sht31d Manufacturer URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Offset Decimal The temperature offset (degrees Celsius) to apply Sensirion: SHT3x (30, 31, 35) ~ Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_SHT31 Dependencies: Adafruit-GPIO , Adafruit-SHT31 Manufacturer URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Enable Heater Boolean Enable heater to evaporate condensation. Turn on heater x seconds every y measurements Heater On Seconds (Seconds) Decimal - Default Value: 1.0 How long to turn the heater on Heater On Period Integer - Default Value: 10 After how many measurements to turn the heater on. This will repeat Sensirion: SHT4X ~ Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SHT4X Dependencies: pyusb , Adafruit-extended-bus , adafruit_circuitpython_sht4x Manufacturer URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Sensirion: SHTC3 ~ Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SHT3C Dependencies: pyusb , Adafruit-extended-bus , adafruit_circuitpython_shtc3 Manufacturer URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Sensorion: SHT31 Smart Gadget ~ Manufacturer: Sensorion Measurements: Humidity/Temperature Interfaces: BT Libraries: bluepy Dependencies: pi-bluetooth , libglib2.0-dev , bluepy Manufacturer URL: Link Option Type Description Bluetooth MAC (XX:XX:XX:XX:XX:XX) Text The Hci location of the Bluetooth device. Bluetooth Adapter (hci[X]) Text The adapter of the Bluetooth device. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Download Stored Data Boolean - Default Value: True Download the data logged to the device. Set Logging Interval (Seconds) Integer - Default Value: 600 Set the logging interval the device will store measurements on its internal memory. Silicon Labs: SI1145 ~ Manufacturer: Silicon Labs Measurements: Light (UV/Visible/IR), Proximity (cm) Interfaces: I 2 C Libraries: si1145 Dependencies: SI1145 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Silicon Labs: Si7021 ~ Manufacturer: Silicon Labs Measurements: Temperature/Humidity Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SI7021 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-si7021 Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Sonoff: TH16/10 (Tasmota firmware) with AM2301/Si7021 ~ Manufacturer: Sonoff Measurements: Humidity/Temperature Libraries: requests Dependencies: requests Manufacturer URL: Link This Input module allows the use of any temperature/humidity sensor with the TH10/TH16. Changing the Sensor Name option changes the key that's queried from the returned dictionary of measurements. If you would like to use this module with a version of this device that uses the AM2301, change Sensor Name to AM2301. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete IP Address Text - Default Value: 192.168.0.100 The IP address of the device Sensor Name Text - Default Value: SI7021 The name of the sensor connected to the device (specific key name in the returned dictionary) Sonoff: TH16/10 (Tasmota firmware) with AM2301 ~ Manufacturer: Sonoff Measurements: Humidity/Temperature Libraries: requests Dependencies: requests Manufacturer URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete IP Address Text - Default Value: 192.168.0.100 The IP address of the device Sonoff: TH16/10 (Tasmota firmware) with DS18B20 ~ Manufacturer: Sonoff Measurements: Temperature Libraries: requests Dependencies: requests Manufacturer URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete IP Address Text - Default Value: 192.168.0.100 The IP address of the device TE Connectivity: HTU21D (Adafruit_CircuitPython_HTU21D) ~ Manufacturer: TE Connectivity Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_HTU21D Dependencies: Adafruit-extended-bus , adafruit-circuitpython-HTU21D Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Offset Decimal The temperature offset (degrees Celsius) to apply TE Connectivity: HTU21D (pigpio) ~ Manufacturer: TE Connectivity Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: pigpio Dependencies: pigpio, pigpio Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete TP-Link: Kasa WiFi Power Plug/Strip Energy Statistics ~ Manufacturer: TP-Link Measurements: kilowatt hours Interfaces: IP Libraries: python-kasa Dependencies: python-kasa , aio_msgpack_rpc Manufacturer URL: Link This measures from several Kasa power devices (plugs/strips) capable of measuring energy consumption. These include, but are not limited to the KP115 and HS600. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Device Type Select The type of Kasa device Host Text - Default Value: 0.0.0.0 Host or IP address Asyncio RPC Port Integer - Default Value: 18108 The port to start the asyncio RPC server. Must be unique from other Kasa Outputs. Commands The total kWh can be cleared with the following button or with the Clear Total kWh Function Action. This will also clear all energy stats on the device, not just the total kWh. Clear Total: Kilowatt-hour Button Tasmota: Tasmota Outlet Energy Monitor (HTTP) ~ Manufacturer: Tasmota Measurements: Total Energy, Amps, Watts Interfaces: HTTP Libraries: requests Manufacturer URL: Link Product URL: Link This input queries the energy usage information from a WiFi outlet that is running the tasmota firmware. There are many WiFi outlets that support tasmota, and many of of those have energy monitoring capabilities. When used with an MQTT Output, you can both control your tasmota outlets as well as mionitor their energy usage. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Host Text - Default Value: 192.168.0.50 Host or IP address Texas Instruments: ADS1015 ~ Manufacturer: Texas Instruments Measurements: Voltage (Analog-to-Digital Converter) Interfaces: I 2 C Libraries: Adafruit_CircuitPython_ADS1x15 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-ads1x15 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Measurements to Average Integer - Default Value: 5 The number of times to measure each channel. An average of the measurements will be stored. Texas Instruments: ADS1115: Generic Analog pH/EC ~ Manufacturer: Texas Instruments Measurements: Ion Concentration/Electrical Conductivity Interfaces: I 2 C Libraries: Adafruit_CircuitPython_ADS1x15 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-ads1x15 This input relies on an ADS1115 analog-to-digital converter (ADC) to measure pH and/or electrical conductivity (EC) from analog sensors. You can enable or disable either measurement if you want to only connect a pH sensor or an EC sensor by selecting which measurements you want to under Measurements Enabled. Select which channel each sensor is connected to on the ADC. There are default calibration values initially set for the Input. There are also functions to allow you to easily calibrate your sensors with calibration solutions. If you use the Calibrate Slot actions, these values will be calculated and will replace the currently-set values. You can use the Clear Calibration action to delete the database values and return to using the default values. If you delete the Input or create a new Input to use your ADC/sensors with, you will need to recalibrate in order to store new calibration data. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete ADC Channel: pH Select(Options: [ Channel 0 | Channel 1 | Channel 2 | Channel 3] (Default in bold ) The ADC channel the pH sensor is connected ADC Channel: EC Select(Options: [Channel 0 | Channel 1 | Channel 2 | Channel 3] (Default in bold ) The ADC channel the EC sensor is connected Temperature Compensation Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use pH Calibration Data Cal data: V1 (internal) Decimal - Default Value: 1.5 Calibration data: Voltage Cal data: pH1 (internal) Decimal - Default Value: 7.0 Calibration data: pH Cal data: T1 (internal) Decimal - Default Value: 25.0 Calibration data: Temperature Cal data: V2 (internal) Decimal - Default Value: 2.032 Calibration data: Voltage Cal data: pH2 (internal) Decimal - Default Value: 4.0 Calibration data: pH Cal data: T2 (internal) Decimal - Default Value: 25.0 Calibration data: Temperature EC Calibration Data EC cal data: V1 (internal) Decimal - Default Value: 0.232 EC calibration data: Voltage EC cal data: EC1 (internal) Decimal - Default Value: 1413.0 EC calibration data: EC EC cal data: T1 (internal) Decimal - Default Value: 25.0 EC calibration data: EC EC cal data: V2 (internal) Decimal - Default Value: 2.112 EC calibration data: Voltage EC cal data: EC2 (internal) Decimal - Default Value: 12880.0 EC calibration data: EC EC cal data: T2 (internal) Decimal - Default Value: 25.0 EC calibration data: EC Commands pH Calibration Actions: Place your probe in a solution of known pH. Set the known pH value in the \"Calibration buffer pH\" field, and press \"Calibrate pH, slot 1\". Repeat with a second buffer, and press \"Calibrate pH, slot 2\". You don't need to change the values under \"Custom Options\". Calibration buffer pH Decimal - Default Value: 7.0 This is the nominal pH of the calibration buffer, usually labelled on the bottle. Calibrate pH, slot 1 Button Calibrate pH, slot 2 Button Clear pH Calibration Slots Button EC Calibration Actions: Place your probe in a solution of known EC. Set the known EC value in the \"Calibration standard EC\" field, and press \"Calibrate EC, slot 1\". Repeat with a second standard, and press \"Calibrate EC, slot 2\". You don't need to change the values under \"Custom Options\". Calibration standard EC Decimal - Default Value: 1413.0 This is the nominal EC of the calibration standard, usually labelled on the bottle. Calibrate EC, slot 1 Button Calibrate EC, slot 2 Button Clear EC Calibration Slots Button Texas Instruments: ADS1115 ~ Manufacturer: Texas Instruments Measurements: Voltage (Analog-to-Digital Converter) Interfaces: I 2 C Libraries: Adafruit_CircuitPython_ADS1x15 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-ads1x15 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Measurements to Average Integer - Default Value: 5 The number of times to measure each channel. An average of the measurements will be stored. Texas Instruments: ADS1256: Generic Analog pH/EC ~ Manufacturer: Texas Instruments Measurements: Ion Concentration/Electrical Conductivity Interfaces: UART Libraries: wiringpi, kizniche/PiPyADC-py3 Dependencies: wiringpi , pipyadc_py3 This input relies on an ADS1256 analog-to-digital converter (ADC) to measure pH and/or electrical conductivity (EC) from analog sensors. You can enable or disable either measurement if you want to only connect a pH sensor or an EC sensor by selecting which measurements you want to under Measurements Enabled. Select which channel each sensor is connected to on the ADC. There are default calibration values initially set for the Input. There are also functions to allow you to easily calibrate your sensors with calibration solutions. If you use the Calibrate Slot actions, these values will be calculated and will replace the currently-set values. You can use the Clear Calibration action to delete the database values and return to using the default values. If you delete the Input or create a new Input to use your ADC/sensors with, you will need to recalibrate in order to store new calibration data. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete ADC Channel: pH Select(Options: [Not Connected | Channel 0 | Channel 1 | Channel 2 | Channel 3 | Channel 4 | Channel 5 | Channel 6 | Channel 7] (Default in bold ) The ADC channel the pH sensor is connected ADC Channel: EC Select(Options: [Not Connected | Channel 0 | Channel 1 | Channel 2 | Channel 3 | Channel 4 | Channel 5 | Channel 6 | Channel 7] (Default in bold ) The ADC channel the EC sensor is connected Temperature Compensation Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use pH Calibration Data Cal data: V1 (internal) Decimal - Default Value: 1.5 Calibration data: Voltage Cal data: pH1 (internal) Decimal - Default Value: 7.0 Calibration data: pH Cal data: T1 (internal) Decimal - Default Value: 25.0 Calibration data: Temperature Cal data: V2 (internal) Decimal - Default Value: 2.032 Calibration data: Voltage Cal data: pH2 (internal) Decimal - Default Value: 4.0 Calibration data: pH Cal data: T2 (internal) Decimal - Default Value: 25.0 Calibration data: Temperature EC Calibration Data EC cal data: V1 (internal) Decimal - Default Value: 0.232 EC calibration data: Voltage EC cal data: EC1 (internal) Decimal - Default Value: 1413.0 EC calibration data: EC EC cal data: T1 (internal) Decimal - Default Value: 25.0 EC calibration data: EC EC cal data: V2 (internal) Decimal - Default Value: 2.112 EC calibration data: Voltage EC cal data: EC2 (internal) Decimal - Default Value: 12880.0 EC calibration data: EC EC cal data: T2 (internal) Decimal - Default Value: 25.0 EC calibration data: EC Calibration Select Set the calibration method to perform during Input activation Commands pH Calibration Actions: Place your probe in a solution of known pH. Set the known pH value in the `Calibration buffer pH` field, and press `Calibrate pH, slot 1`. Repeat with a second buffer, and press `Calibrate pH, slot 2`. You don't need to change the values under `Custom Options`. Calibration buffer pH Decimal - Default Value: 7.0 This is the nominal pH of the calibration buffer, usually labelled on the bottle. Calibrate pH, slot 1 Button Calibrate pH, slot 2 Button Clear pH Calibration Slots Button EC Calibration Actions: Place your probe in a solution of known EC. Set the known EC value in the `Calibration standard EC` field, and press `Calibrate EC, slot 1`. Repeat with a second standard, and press `Calibrate EC, slot 2`. You don't need to change the values under `Custom Options`. Calibration standard EC Decimal - Default Value: 1413.0 This is the nominal EC of the calibration standard, usually labelled on the bottle. Calibrate EC, slot 1 Button Calibrate EC, slot 2 Button Clear EC Calibration Slots Button Texas Instruments: ADS1256 ~ Manufacturer: Texas Instruments Measurements: Voltage (Waveshare, Analog-to-Digital Converter) Interfaces: UART Libraries: wiringpi, kizniche/PiPyADC-py3 Dependencies: wiringpi , pipyadc_py3 Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Calibration Select Set the calibration method to perform during Input activation Texas Instruments: ADS1x15 ~ Manufacturer: Texas Instruments Measurements: Voltage (Analog-to-Digital Converter) Interfaces: I 2 C Libraries: Adafruit_ADS1x15 [DEPRECATED] Dependencies: Adafruit-GPIO , Adafruit-ADS1x15 The Adafruit_ADS1x15 is deprecated. It's advised to use The Circuit Python ADS1x15 Input. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Measurements to Average Integer - Default Value: 5 The number of times to measure each channel. An average of the measurements will be stored. Texas Instruments: HDC1000 ~ Manufacturer: Texas Instruments Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: fcntl/io Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Texas Instruments: INA219x ~ Manufacturer: Texas Instruments Measurements: Electrical Current (DC) Interfaces: I 2 C Libraries: Adafruit_CircuitPython Dependencies: adafruit-circuitpython-ina219 , Adafruit-extended-bus Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Measurements to Average Integer - Default Value: 5 The number of times to measure each channel. An average of the measurements will be stored. Calibration Range Select(Options: [ 32V @ 2A max (default) | 32V @ 1A max | 16V @ 400mA max | 16V @ 5A max] (Default in bold ) Set the device calibration range Bus Voltage Range Select(Options: [(0x00) - 16V | (0x01) - 32V (default) ] (Default in bold ) Set the bus voltage range Bus ADC Resolution Select(Options: [(0x00) - 9 Bit / 1 Sample | (0x01) - 10 Bit / 1 Sample | (0x02) - 11 Bit / 1 Sample | (0x03) - 12 Bit / 1 Sample (default) | (0x09) - 12 Bit / 2 Samples | (0x0A) - 12 Bit / 4 Samples | (0x0B) - 12 Bit / 8 Samples | (0x0C) - 12 Bit / 16 Samples | (0x0D) - 12 Bit / 32 Samples | (0x0E) - 12 Bit / 64 Samples | (0x0F) - 12 Bit / 128 Samples] (Default in bold ) Set the Bus ADC Resolution. Shunt ADC Resolution Select(Options: [(0x00) - 9 Bit / 1 Sample | (0x01) - 10 Bit / 1 Sample | (0x02) - 11 Bit / 1 Sample | (0x03) - 12 Bit / 1 Sample (default) | (0x09) - 12 Bit / 2 Samples | (0x0A) - 12 Bit / 4 Samples | (0x0B) - 12 Bit / 8 Samples | (0x0C) - 12 Bit / 16 Samples | (0x0D) - 12 Bit / 32 Samples | (0x0E) - 12 Bit / 64 Samples | (0x0F) - 12 Bit / 128 Samples] (Default in bold ) Set the Shunt ADC Resolution. Texas Instruments: TMP006 ~ Manufacturer: Texas Instruments Measurements: Temperature (Object/Die) Interfaces: I 2 C Libraries: Adafruit_TMP Dependencies: Adafruit-TMP Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete The Things Network: The Things Network: Data Storage (TTN v2) ~ Manufacturer: The Things Network Measurements: Variable measurements Libraries: requests Dependencies: requests This Input receives and stores measurements from the Data Storage Integration on The Things Network. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Start Offset (Seconds) Integer The duration to wait before the first operation Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Application ID Text The Things Network Application ID App API Key Text The Things Network Application API Key Device ID Text The Things Network Device ID Channel Options Name Text A name to distinguish this from others Variable Name Text The TTN variable name The Things Network: The Things Network: Data Storage (TTN v3, Payload Key) ~ Manufacturer: The Things Network Measurements: Variable measurements Libraries: requests Dependencies: requests This Input receives and stores measurements from the Data Storage Integration on The Things Network. If you have key/value pairs as your payload, enter the key name in Variable Name and the corresponding value for that key will be stored in the measurement database. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Start Offset (Seconds) Integer The duration to wait before the first operation Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Application ID Text The Things Network Application ID App API Key Text The Things Network Application API Key Device ID Text The Things Network Device ID Channel Options Name Text A name to distinguish this from others Variable Name Text The TTN variable name The Things Network: The Things Network: Data Storage (TTN v3, Payload jmespath Expression) ~ Manufacturer: The Things Network Measurements: Variable measurements Libraries: requests, jmespath Dependencies: requests , jmespath This Input receives and stores measurements from the Data Storage Integration on The Things Network. The given Payload jmespath Expression is used as a JMESPATH expression to find the corresponding value that will be stored for that channel. Be sure you select and save the Measurement Unit for each channel. Once the unit has been saved, you can convert to other units in the Convert Measurement section. Example expressions for jmespath (https://jmespath.org) include temperature , sensors[0].temperature , and bathroom.temperature which refer to the temperature as a direct key within the first entry of sensors or as a subkey of bathroom, respectively. Jmespath elements and keys that contain special characters have to be enclosed in double quotes, e.g. \"sensor-1\".temperature . Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Start Offset (Seconds) Integer The duration to wait before the first operation Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Application ID Text The Things Network Application ID App API Key Text The Things Network Application API Key Device ID Text The Things Network Device ID Channel Options Name Text A name to distinguish this from others Payload jmespath Expression Text The TTN jmespath expression to return the value to store Weather: OpenWeatherMap (City, Current) ~ Manufacturer: Weather Measurements: Humidity/Temperature/Pressure/Wind Additional URL: Link Obtain a free API key at openweathermap.org. If the city you enter does not return measurements, try another city. Note: the free API subscription is limited to 60 calls per minute Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete API Key Text The API Key for this service's API City Text The city to acquire the weather data Weather: OpenWeatherMap (Lat/Lon, Current/Future) ~ Manufacturer: Weather Measurements: Humidity/Temperature/Pressure/Wind Interfaces: Mycodo Additional URL: Link Obtain a free API key at openweathermap.org. Notes: The free API subscription is limited to 60 calls per minute. If a Day (Future) time is selected, Minimum and Maximum temperatures are available as measurements. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete API Key Text The API Key for this service's API Latitude (decimal) Decimal - Default Value: 33.441792 The latitude to acquire weather data Longitude (decimal) Decimal - Default Value: -94.037689 The longitude to acquire weather data Time Select(Options: [ Current (Present) | 1 Day (Future) | 2 Day (Future) | 3 Day (Future) | 4 Day (Future) | 5 Day (Future) | 6 Day (Future) | 7 Day (Future) | 1 Hour (Future) | 2 Hours (Future) | 3 Hours (Future) | 4 Hours (Future) | 5 Hours (Future) | 6 Hours (Future) | 7 Hours (Future) | 8 Hours (Future) | 9 Hours (Future) | 10 Hours (Future) | 11 Hours (Future) | 12 Hours (Future) | 13 Hours (Future) | 14 Hours (Future) | 15 Hours (Future) | 16 Hours (Future) | 17 Hours (Future) | 18 Hours (Future) | 19 Hours (Future) | 20 Hours (Future) | 21 Hours (Future) | 22 Hours (Future) | 23 Hours (Future) | 24 Hours (Future) | 25 Hours (Future) | 26 Hours (Future) | 27 Hours (Future) | 28 Hours (Future) | 29 Hours (Future) | 30 Hours (Future) | 31 Hours (Future) | 32 Hours (Future) | 33 Hours (Future) | 34 Hours (Future) | 35 Hours (Future) | 36 Hours (Future) | 37 Hours (Future) | 38 Hours (Future) | 39 Hours (Future) | 40 Hours (Future) | 41 Hours (Future) | 42 Hours (Future) | 43 Hours (Future) | 44 Hours (Future) | 45 Hours (Future) | 46 Hours (Future) | 47 Hours (Future) | 48 Hours (Future)] (Default in bold ) Select the time for the current or forecast weather Winsen: MH-Z14A ~ Manufacturer: Winsen Measurements: CO2 Interfaces: UART Libraries: serial Dependencies: RPi.GPIO Manufacturer URL: Link Datasheet URL: Link Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Automatic Self-calibration Boolean - Default Value: True Enable automatic self-calibration Measurement Range Select(Options: [ 400 - 2000 ppmv | 400 - 5000 ppmv | 400 - 10000 ppmv] (Default in bold ) Set the measuring range of the sensor The CO2 measurement can also be obtained using PWM via a GPIO pin. Enter the pin number below or leave blank to disable this option. This also makes it possible to obtain measurements even if the UART interface is not available (note that the sensor can't be configured / calibrated without a working UART interface). GPIO Override Text Obtain readings using PWM on this GPIO pin instead of via UART Commands Calibrate Zero Point Button Span Point (ppmv) Integer - Default Value: 2000 The ppmv concentration for a span point calibration Calibrate Span Point Button Winsen: MH-Z16 ~ Manufacturer: Winsen Measurements: CO2 Interfaces: UART, I 2 C Libraries: smbus2/serial Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Winsen: MH-Z19 ~ Manufacturer: Winsen Measurements: CO2 Interfaces: UART Libraries: serial Datasheet URL: Link This is the version of the sensor that does not include the ability to conduct automatic baseline correction (ABC). See the B version of the sensor if you wish to use ABC. Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Measurement Range Select(Options: [0 - 1000 ppmv | 0 - 2000 ppmv | 0 - 3000 ppmv | 0 - 5000 ppmv ] (Default in bold ) Set the measuring range of the sensor Commands Calibrate Zero Point Button Span Point (ppmv) Integer - Default Value: 2000 The ppmv concentration for a span point calibration Calibrate Span Point Button Winsen: MH-Z19B ~ Manufacturer: Winsen Measurements: CO2 Interfaces: UART Libraries: serial Manufacturer URL: Link Datasheet URL: Link This is the B version of the sensor that includes the ability to conduct automatic baseline correction (ABC). Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Automatic Baseline Correction Boolean Enable automatic baseline correction (ABC) Measurement Range Select(Options: [0 - 1000 ppmv | 0 - 2000 ppmv | 0 - 3000 ppmv | 0 - 5000 ppmv | 0 - 10000 ppmv] (Default in bold ) Set the measuring range of the sensor Commands Calibrate Zero Point Button Span Point (ppmv) Integer - Default Value: 2000 The ppmv concentration for a span point calibration Calibrate Span Point Button Winsen: ZH03B ~ Manufacturer: Winsen Measurements: Particulates Interfaces: UART Libraries: serial Manufacturer URL: Link Datasheet URL: Link Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Fan Off After Measure Boolean Turn the fan on only during the measurement Fan On Duration (Seconds) Decimal - Default Value: 50.0 How long to turn the fan on before acquiring measurements Number of Measurements Integer - Default Value: 3 How many measurements to acquire. If more than 1 are acquired that are less than 1001, the average of the measurements will be stored. Xiaomi: Miflora ~ Manufacturer: Xiaomi Measurements: EC/Light/Moisture/Temperature Interfaces: BT Libraries: miflora Dependencies: libglib2.0-dev , miflora , bluepy Option Type Description Bluetooth MAC (XX:XX:XX:XX:XX:XX) Text The Hci location of the Bluetooth device. Bluetooth Adapter (hci[X]) Text The adapter of the Bluetooth device. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Xiaomi: Mijia LYWSD03MMC (ATC and non-ATC modes) ~ Manufacturer: Xiaomi Measurements: Battery/Humidity/Temperature Interfaces: BT Libraries: bluepy/bluez Dependencies: libglib2.0 , bluez , bluetooth , libbluetooth-dev , bluepy , bluetooth More information about ATC mode can be found at https://github.com/JsBergbau/MiTemperature2 Option Type Description Bluetooth MAC (XX:XX:XX:XX:XX:XX) Text The Hci location of the Bluetooth device. Bluetooth Adapter (hci[X]) Text The adapter of the Bluetooth device. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Enable ATC Mode Boolean Enable sensor ATC mode ams: AS7341 ~ Manufacturer: ams Measurements: Light Interfaces: I 2 C Libraries: Adafruit-CircuitPython-AS7341 Dependencies: adafruit-extended-bus , adafruit-circuitpython-as7341 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Supported Inputs"},{"location":"Supported-Inputs/#built-in-inputs-system","text":"","title":"Built-In Inputs (System)"},{"location":"Supported-Inputs/#linux-bash-command","text":"Manufacturer: Linux Measurements: Return Value Interfaces: Mycodo This Input will execute a command in the shell and store the output as a float value. Perform any unit conversions within your script or command. A measurement/unit is required to be selected. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Command Timeout Integer - Default Value: 60 How long to wait for the command to finish before killing the process. User Text - Default Value: mycodo The user to execute the command Current Working Directory Text - Default Value: /home/pi The current working directory of the shell environment.","title":"Linux: Bash Command"},{"location":"Supported-Inputs/#linux-python-3-code-v10","text":"Manufacturer: Linux Measurements: Store Value(s) Interfaces: Mycodo Dependencies: pylint All channels require a Measurement Unit to be selected and saved in order to store values to the database. Your code is executed from the same Python virtual environment that Mycodo runs from. Therefore, you must install Python libraries to this environment if you want them to be available to your code. This virtualenv is located at /opt/Mycodo/env and if you wanted to install a library, for example \"my_library\" using pip, you would execute \"sudo /opt/Mycodo/env/bin/pip install my_library\". Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Analyze Python Code with Pylint Boolean - Default Value: True Analyze your Python code with pylint when saving","title":"Linux: Python 3 Code (v1.0)"},{"location":"Supported-Inputs/#linux-python-3-code-v20","text":"Manufacturer: Linux Measurements: Store Value(s) Interfaces: Mycodo Dependencies: pylint This is an alternate Python 3 Code Input that uses a different method for storing values to the database. This was created because the Python 3 Code v1.0 Input does not allow the use of Input Actions. This method does allow the use of Input Actions. (11/21/2023 Update: The Python 3 Code (v1.0) Input now allows the execution of Actions). All channels require a Measurement Unit to be selected and saved in order to store values to the database. Your code is executed from the same Python virtual environment that Mycodo runs from. Therefore, you must install Python libraries to this environment if you want them to be available to your code. This virtualenv is located at /opt/Mycodo/env and if you wanted to install a library, for example \"my_library\" using pip, you would execute \"sudo /opt/Mycodo/env/bin/pip install my_library\". Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Python 3 Code The code to execute. Must return a value. Analyze Python Code with Pylint Boolean - Default Value: True Analyze your Python code with pylint when saving","title":"Linux: Python 3 Code (v2.0)"},{"location":"Supported-Inputs/#mycodo-cpu-load","text":"Manufacturer: Mycodo Measurements: CPULoad Libraries: os.getloadavg() Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions","title":"Mycodo: CPU Load"},{"location":"Supported-Inputs/#mycodo-free-space","text":"Manufacturer: Mycodo Measurements: Unallocated Disk Space Libraries: os.statvfs() Option Type Description Period (Seconds) Decimal The duration between measurements or actions","title":"Mycodo: Free Space"},{"location":"Supported-Inputs/#mycodo-mycodo-version","text":"Manufacturer: Mycodo Measurements: Version as Major.Minor.Revision Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions","title":"Mycodo: Mycodo Version"},{"location":"Supported-Inputs/#mycodo-output-state-onoff","text":"Manufacturer: Mycodo Measurements: Boolean This Input stores a 0 (off) or 1 (on) for the selected On/Off Output. Option Type Description Period (Seconds) Decimal The duration between measurements or actions On/Off Output Channel Select Channel (Output_Channels) Select an output to measure","title":"Mycodo: Output State (On/Off)"},{"location":"Supported-Inputs/#mycodo-server-ping","text":"Manufacturer: Mycodo Measurements: Boolean Libraries: ping This Input executes the bash command \"ping -c [times] -w [deadline] [host]\" to determine if the host can be pinged. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Mycodo: Server Ping"},{"location":"Supported-Inputs/#mycodo-server-port-open","text":"Manufacturer: Mycodo Measurements: Boolean Libraries: nc This Input executes the bash command \"nc -zv [host] [port]\" to determine if the host at a particular port is accessible. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Mycodo: Server Port Open"},{"location":"Supported-Inputs/#mycodo-spacer","text":"Manufacturer: Mycodo A spacer to organize Inputs. Option Type Description Color Text - Default Value: #000000 The color of the name text","title":"Mycodo: Spacer"},{"location":"Supported-Inputs/#mycodo-system-and-mycodo-ram","text":"Manufacturer: Mycodo Measurements: RAM Allocation Libraries: psutil, resource.getrusage() Dependencies: psutil Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Mycodo Frontend RAM Endpoint Text - Default Value: https://127.0.0.1/ram The endpoint to get Mycodo frontend ram usage","title":"Mycodo: System and Mycodo RAM"},{"location":"Supported-Inputs/#mycodo-test-input-save-your-own-measurement-value","text":"Manufacturer: Mycodo Measurements: Variable measurements This is a simple test Input that allows you to save any value as a measurement, that will be stored in the measurement database. It can be useful for testing other parts of Mycodo, such as PIDs, Bang-Bang, and Conditional Functions, since you can be completely in control of what values the input provides to the Functions. Note 1: Select and save the Name and Measurement Unit for each channel. Once the unit has been saved, you can convert to other units in the Convert Measurement section. Note 2: Activate the Input before storing measurements. Option Type Description Measurements Enabled Multi-Select The measurements to record Channel Options Name Text A name to distinguish this from others Commands Enter the Value you want to store as a measurement, then press Store Measurement. Channel Integer This is the channel to save the measurement value to Value Decimal - Default Value: 10.0 This is the measurement value to save for this Input Store Measurement Button","title":"Mycodo: Test Input: Save your own measurement value"},{"location":"Supported-Inputs/#mycodo-uptime","text":"Manufacturer: Mycodo Measurements: Seconds Since System Startup Option Type Description Period (Seconds) Decimal The duration between measurements or actions","title":"Mycodo: Uptime"},{"location":"Supported-Inputs/#raspberry-pi-cpugpu-temperature","text":"Manufacturer: Raspberry Pi Measurements: Temperature Interfaces: RPi The internal CPU and GPU temperature of the Raspberry Pi. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Path for CPU Temperature Text - Default Value: /sys/class/thermal/thermal_zone0/temp Reads the CPU temperature from this file Path to vcgencmd Text - Default Value: /usr/bin/vcgencmd Reads the GPU from vcgencmd","title":"Raspberry Pi: CPU/GPU Temperature"},{"location":"Supported-Inputs/#raspberry-pi-edge-detection","text":"Manufacturer: Raspberry Pi Measurements: Rising/Falling Edge Interfaces: GPIO Libraries: RPi.GPIO Dependencies: RPi.GPIO Option Type Description Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Pin Mode Select(Options: [ Floating | Pull Down | Pull Up] (Default in bold ) Enables or disables the pull-up or pull-down resistor","title":"Raspberry Pi: Edge Detection"},{"location":"Supported-Inputs/#raspberry-pi-gpio-state","text":"Manufacturer: Raspberry Pi Measurements: GPIO State Interfaces: GPIO Libraries: RPi.GPIO Dependencies: RPi.GPIO Measures the state of a GPIO pin, returning either 0 (low) or 1 (high). Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Pin Mode Select(Options: [ Floating | Pull Down | Pull Up] (Default in bold ) Enables or disables the pull-up or pull-down resistor","title":"Raspberry Pi: GPIO State"},{"location":"Supported-Inputs/#raspberry-pi-signal-pwm","text":"Manufacturer: Raspberry Pi Measurements: Frequency/Pulse Width/Duty Cycle Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Raspberry Pi: Signal (PWM)"},{"location":"Supported-Inputs/#raspberry-pi-signal-revolutions-pigpio-method-1","text":"Manufacturer: Raspberry Pi Measurements: RPM Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio This calculates RPM from pulses on a pin using pigpio, but has been found to be less accurate than the method #2 module. This is typically used to measure the speed of a fan from a tachometer pin, however this can be used to measure any 3.3-volt pulses from a wire. Use a resistor to pull the measurement pin to 3.3 volts, set pigpio to the lowest latency (1 ms) on the Configure -> Raspberry Pi page. Note 1: Not setting pigpio to the lowest latency will hinder accuracy. Note 2: accuracy decreases as RPM increases. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Raspberry Pi: Signal (Revolutions) (pigpio method #1)"},{"location":"Supported-Inputs/#raspberry-pi-signal-revolutions-pigpio-method-2","text":"Manufacturer: Raspberry Pi Measurements: RPM Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio This is an alternate method to calculate RPM from pulses on a pin using pigpio, and has been found to be more accurate than the method #1 module. This is typically used to measure the speed of a fan from a tachometer pin, however this can be used to measure any 3.3-volt pulses from a wire. Use a resistor to pull the measurement pin to 3.3 volts, set pigpio to the lowest latency (1 ms) on the Configure -> Raspberry Pi page. Note 1: Not setting pigpio to the lowest latency will hinder accuracy. Note 2: accuracy decreases as RPM increases. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Pin: GPIO (BCM) Integer The pin to measure pulses from Sample Time (Seconds) Decimal - Default Value: 5.0 The duration of time to sample Pulses Per Rev Decimal - Default Value: 15.8 The number of pulses per revolution to calculate revolutions per minute (RPM)","title":"Raspberry Pi: Signal (Revolutions) (pigpio method #2)"},{"location":"Supported-Inputs/#built-in-inputs-devices","text":"","title":"Built-In Inputs (Devices)"},{"location":"Supported-Inputs/#ams-as7262","text":"Manufacturer: AMS Measurements: Light at 450, 500, 550, 570, 600, 650 nm Interfaces: I 2 C Libraries: as7262 Dependencies: as7262 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Gain Select(Options: [1x | 3.7x | 16x | 64x ] (Default in bold ) Set the sensor gain Illumination LED Current Select(Options: [ 12.5 mA | 25 mA | 50 mA | 100 mA] (Default in bold ) Set the illumination LED current (milliamps) Illumination LED Mode Select(Options: [ On | Off] (Default in bold ) Turn the illumination LED on or off during a measurement Indicator LED Current Select(Options: [ 1 mA | 2 mA | 4 mA | 8 mA] (Default in bold ) Set the indicator LED current (milliamps) Indicator LED Mode Select(Options: [ On | Off] (Default in bold ) Turn the indicator LED on or off during a measurement Integration Time Decimal - Default Value: 15.0 The integration time (0 - ~91 ms)","title":"AMS: AS7262"},{"location":"Supported-Inputs/#ams-ccs811-with-temperature","text":"Manufacturer: AMS Measurements: CO2/VOC/Temperature Interfaces: I 2 C Libraries: Adafruit_CCS811 Dependencies: Adafruit_CCS811 , Adafruit-GPIO Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"AMS: CCS811 (with Temperature)"},{"location":"Supported-Inputs/#ams-ccs811-without-temperature","text":"Manufacturer: AMS Measurements: CO2/VOC Interfaces: I 2 C Libraries: Adafruit_CircuitPython_CCS811 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-ccs811 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Additional URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"AMS: CCS811 (without Temperature)"},{"location":"Supported-Inputs/#ams-tsl2561","text":"Manufacturer: AMS Measurements: Light Interfaces: I 2 C Libraries: tsl2561 Dependencies: Adafruit-GPIO , Adafruit-PureIO , tsl2561 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"AMS: TSL2561"},{"location":"Supported-Inputs/#ams-tsl2591","text":"Manufacturer: AMS Measurements: Light Interfaces: I 2 C Libraries: maxlklaxl/python-tsl2591 Dependencies: tsl2591 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"AMS: TSL2591"},{"location":"Supported-Inputs/#aosong-am2315am2320","text":"Manufacturer: AOSONG Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: quick2wire-api Dependencies: quick2wire-api Datasheet URL: Link Product URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"AOSONG: AM2315/AM2320"},{"location":"Supported-Inputs/#aosong-dht11","text":"Manufacturer: AOSONG Measurements: Humidity/Temperature Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio Datasheet URL: Link Product URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"AOSONG: DHT11"},{"location":"Supported-Inputs/#aosong-dht20","text":"Manufacturer: AOSONG Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"AOSONG: DHT20"},{"location":"Supported-Inputs/#aosong-dht22","text":"Manufacturer: AOSONG Measurements: Humidity/Temperature Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio Datasheet URL: Link Product URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"AOSONG: DHT22"},{"location":"Supported-Inputs/#asair-ahtx0","text":"Manufacturer: ASAIR Measurements: Temperature/Humidity Interfaces: I 2 C Libraries: Adafruit_CircuitPython_AHTx0 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-ahtx0 Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"ASAIR: AHTx0"},{"location":"Supported-Inputs/#adafruit-i2c-capacitive-moisture-sensor","text":"Manufacturer: Adafruit Measurements: Moisture/Temperature Interfaces: I 2 C Libraries: adafruit_seesaw Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-seesaw Manufacturer URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Adafruit: I2C Capacitive Moisture Sensor"},{"location":"Supported-Inputs/#analog-devices-adt7410","text":"Manufacturer: Analog Devices Measurements: Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_ADT7410 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-adt7410 Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Analog Devices: ADT7410"},{"location":"Supported-Inputs/#analog-devices-adxl34x-343-344-345-346","text":"Manufacturer: Analog Devices Measurements: Acceleration Interfaces: I 2 C Libraries: Adafruit_CircuitPython_ADXL34x Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-adxl34x Datasheet URLs: Link 1 , Link 2 , Link 3 , Link 4 Product URLs: Link 1 , Link 2 , Link 3 , Link 4 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Range Select(Options: [\u00b12 g (\u00b119.6 m/s/s) | \u00b14 g (\u00b139.2 m/s/s) | \u00b18 g (\u00b178.4 m/s/s) | \u00b116 g (\u00b1156.9 m/s/s) ] (Default in bold ) Set the measurement range","title":"Analog Devices: ADXL34x (343, 344, 345, 346)"},{"location":"Supported-Inputs/#anyleaf-anyleaf-ec","text":"Manufacturer: AnyLeaf Measurements: Electrical Conductivity Interfaces: UART Libraries: anyleaf Dependencies: libjpeg-dev , zlib1g-dev , Pillow , scipy , pyusb , Adafruit-extended-bus , anyleaf Manufacturer URL: Link Datasheet URL: Link Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Conductivity Constant Decimal - Default Value: 1.0 Conductivity constant K","title":"AnyLeaf: AnyLeaf EC"},{"location":"Supported-Inputs/#anyleaf-anyleaf-orp","text":"Manufacturer: AnyLeaf Measurements: Oxidation Reduction Potential Interfaces: I 2 C Libraries: anyleaf Dependencies: libjpeg-dev , zlib1g-dev , Pillow , scipy , pyusb , Adafruit-extended-bus , anyleaf Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Calibrate: Voltage (Internal) Decimal - Default Value: 0.4 Calibration data: internal voltage Calibrate: ORP (Internal) Decimal - Default Value: 400.0 Calibration data: internal ORP Commands Calibrate: Buffer ORP (mV) Decimal - Default Value: 400.0 This is the nominal ORP of the calibration buffer in mV, usually labelled on the bottle. Calibrate Button Clear Calibration Slots Button","title":"AnyLeaf: AnyLeaf ORP"},{"location":"Supported-Inputs/#anyleaf-anyleaf-ph","text":"Manufacturer: AnyLeaf Measurements: Ion concentration Interfaces: I 2 C Libraries: anyleaf Dependencies: libjpeg-dev , zlib1g-dev , Pillow , scipy , pyusb , Adafruit-extended-bus , anyleaf Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Cal data: V1 (internal) Decimal Calibration data: Voltage Cal data: pH1 (internal) Decimal - Default Value: 7.0 Calibration data: pH Cal data: T1 (internal) Decimal - Default Value: 23.0 Calibration data: Temperature Cal data: V2 (internal) Decimal - Default Value: 0.17 Calibration data: Voltage Cal data: pH2 (internal) Decimal - Default Value: 4.0 Calibration data: pH Cal data: T2 (internal) Decimal - Default Value: 23.0 Calibration data: Temperature Cal data: V3 (internal) Decimal Calibration data: Voltage Cal data: pH3 (internal) Decimal Calibration data: pH Cal data: T3 (internal) Decimal Calibration data: Temperature Commands Calibration buffer pH Decimal - Default Value: 7.0 This is the nominal pH of the calibration buffer, usually labelled on the bottle. Calibrate, slot 1 Button Calibrate, slot 2 Button Calibrate, slot 3 Button Clear Calibration Slots Button","title":"AnyLeaf: AnyLeaf pH"},{"location":"Supported-Inputs/#atlas-scientific-atlas-co2-carbon-dioxide-gas","text":"Manufacturer: Atlas Scientific Measurements: CO2 Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands A one- or two-point calibration can be performed. After exposing the probe to a concentration of CO2 between 3,000 and 5,000 ppmv until readings stabilize, press Calibrate (High). You can place the probe in a 0 CO2 environment until readings stabilize, then press Calibrate (Zero). You can also clear the currently-saved calibration by pressing Clear Calibration, returning to the factory-set calibration. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. High Point CO2 Integer - Default Value: 3000 The high CO2 calibration point (3000 - 5000 ppmv) Calibrate (High) Button Calibrate (Zero) Button Clear Calibration Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x69 The new I2C to set the device to Set I2C Address Button","title":"Atlas Scientific: Atlas CO2 (Carbon Dioxide Gas)"},{"location":"Supported-Inputs/#atlas-scientific-atlas-color","text":"Manufacturer: Atlas Scientific Measurements: RGB, CIE, LUX, Proximity Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete LED Only For Measure Boolean - Default Value: True Turn the LED on only during the measurement LED Percentage Integer - Default Value: 30 What percentage of power to supply to the LEDs during measurement Gamma Correction Decimal - Default Value: 1.0 Gamma correction between 0.01 and 4.99 (default is 1.0) Commands The EZO-RGB color sensor is designed to be calibrated to a white object at the maximum brightness the object will be viewed under. In order to get the best results, Atlas Scientific strongly recommends that the sensor is mounted into a fixed location. Holding the sensor in your hand during calibration will decrease performance. 1. Embed the EZO-RGB color sensor into its intended use location. 2. Set LED brightness to the desired level. 3. Place a white object in front of the target object and press the Calibration button. 4. A single color reading will be taken and the device will be fully calibrated. Calibrate Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x70 The new I2C to set the device to Set I2C Address Button","title":"Atlas Scientific: Atlas Color"},{"location":"Supported-Inputs/#atlas-scientific-atlas-do","text":"Manufacturer: Atlas Scientific Measurements: Dissolved Oxygen Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Commands A one- or two-point calibration can be performed. After exposing the probe to air for 30 seconds until readings stabilize, press Calibrate (Air). If you require accuracy below 1.0 mg/L, you can place the probe in a 0 mg/L solution for 30 to 90 seconds until readings stabilize, then press Calibrate (0 mg/L). You can also clear the currently-saved calibration by pressing Clear Calibration. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. Calibrate (Air) Button Calibrate (0 mg/L) Button Clear Calibration Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x66 The new I2C to set the device to Set I2C Address Button","title":"Atlas Scientific: Atlas DO"},{"location":"Supported-Inputs/#atlas-scientific-atlas-ec","text":"Manufacturer: Atlas Scientific Measurements: Electrical Conductivity Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Commands Calibration: a one- or two-point calibration can be performed. It's a good idea to clear the calibration before calibrating. Always perform a dry calibration with the probe in the air (not in any fluid). Then perform either a one- or two-point calibration with calibrated solutions. If performing a one-point calibration, use the Single Point Calibration field and button. If performing a two-point calibration, use the Low and High Point Calibration fields and buttons. Allow a minute or two after submerging your probe in a calibration solution for the measurements to equilibrate before calibrating to that solution. The EZO EC circuit default temperature compensation is set to 25 \u00b0C. If the temperature of the calibration solution is +/- 2 \u00b0C from 25 \u00b0C, consider setting the temperature compensation first. Note that at no point should you change the temperature compensation value during calibration. Therefore, if you have previously enabled temperature compensation, allow at least one measurement to occur (to set the compensation value), then disable the temperature compensation measurement while you calibrate. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. Clear Calibration Button Calibrate Dry Button Single Point EC (\u00b5S) Integer - Default Value: 84 The EC (\u00b5S) of the single point calibration solution Calibrate Single Point Button Low Point EC (\u00b5S) Integer - Default Value: 12880 The EC (\u00b5S) of the low point calibration solution Calibrate Low Point Button High Point EC (\u00b5S) Integer - Default Value: 80000 The EC (\u00b5S) of the high point calibration solution Calibrate High Point Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x64 The new I2C to set the device to Set I2C Address Button","title":"Atlas Scientific: Atlas EC"},{"location":"Supported-Inputs/#atlas-scientific-atlas-flow-meter","text":"Manufacturer: Atlas Scientific Measurements: Total Volume, Flow Rate Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Set the Measurement Time Base to a value most appropriate for your anticipated flow (it will affect accuracy). This flow rate time base that is set and returned from the sensor will be converted to liters per minute, which is the default unit for this input module. If you desire a different rate to be stored in the database (such as liters per second or hour), then use the Convert to Unit option. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Flow Meter Type Select(Options: [ Atlas Scientific 3/8\" Flow Meter | Atlas Scientific 1/4\" Flow Meter | Atlas Scientific 1/2\" Flow Meter | Atlas Scientific 3/4\" Flow Meter | Non-Atlas Scientific Flow Meter] (Default in bold ) Set the type of flow meter used Atlas Meter Time Base Select(Options: [Liters per Second | Liters per Minute | Liters per Hour] (Default in bold ) If using an Atlas Scientific flow meter, set the flow rate/time base Internal Resistor Select(Options: [ Use Atlas Scientific Flow Meter | Disable Internal Resistor | 1 K \u03a9 Pull-Up | 1 K \u03a9 Pull-Down | 10 K \u03a9 Pull-Up | 10 K \u03a9 Pull-Down | 100 K \u03a9 Pull-Up | 100 K \u03a9 Pull-Down] (Default in bold ) Set an internal resistor for the flow meter Custom K Value(s) Text If using a non-Atlas Scientific flow meter, enter the meter's K value(s). For a single K value, enter '[volume per pulse],[number of pulses]'. For multiple K values (up to 16), enter '[volume at frequency],[frequency in Hz];[volume at frequency],[frequency in Hz];...'. Leave blank to disable. K Value Time Base Select(Options: [ Use Atlas Scientific Flow Meter | Liters per Second | Liters per Minute | Liters per Hour] (Default in bold ) If using a non-Atlas Scientific flow meter, set the flow rate/time base for the custom K values entered. Commands The total volume can be cleared with the following button or with the Clear Total Volume Function Action. Clear Total: Volume Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x68 The new I2C to set the device to Set I2C Address Button","title":"Atlas Scientific: Atlas Flow Meter"},{"location":"Supported-Inputs/#atlas-scientific-atlas-humidity","text":"Manufacturer: Atlas Scientific Measurements: Humidity/Temperature Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete LED Mode Select(Options: [ Always On | Always Off | Only On During Measure] (Default in bold ) When to turn the LED on Commands New I2C Address Text - Default Value: 0x6f The new I2C to set the device to Set I2C Address Button","title":"Atlas Scientific: Atlas Humidity"},{"location":"Supported-Inputs/#atlas-scientific-atlas-o2-oxygen-gas","text":"Manufacturer: Atlas Scientific Measurements: O2 Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Temperature Compensation: Manual Decimal - Default Value: 20.0 If not using a measurement, set the temperature to compensate LED Mode Select(Options: [ Always On | Always Off | Only On During Measure] (Default in bold ) When to turn the LED on Commands A one- or two-point calibration can be performed. After exposing the probe to a specific concentration of O2 until readings stabilize, press Calibrate (High). You can place the probe in a 0% O2 environment until readings stabilize, then press Calibrate (Zero). You can also clear the currently-saved calibration by pressing Clear Calibration, returning to the factory-set calibration. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. High Point O2 Decimal - Default Value: 20.95 The high O2 calibration point (percent) Calibrate (High) Button Calibrate (Zero) Button Clear Calibration Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x69 The new I2C to set the device to Set I2C Address Button","title":"Atlas Scientific: Atlas O2 (Oxygen Gas)"},{"location":"Supported-Inputs/#atlas-scientific-atlas-orp","text":"Manufacturer: Atlas Scientific Measurements: Oxidation Reduction Potential Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Commands A one-point calibration can be performed. Enter the solution's mV, set the probe in the solution, then press Calibrate. You can also clear the currently-saved calibration by pressing Clear Calibration. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. Calibration Solution mV Integer - Default Value: 225 The value of the calibration solution, in mV Calibrate Button Clear Calibration Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x62 The new I2C to set the device to Set I2C Address Button","title":"Atlas Scientific: Atlas ORP"},{"location":"Supported-Inputs/#atlas-scientific-atlas-pt-1000","text":"Manufacturer: Atlas Scientific Measurements: Temperature Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands New I2C Address Text - Default Value: 0x66 The new I2C to set the device to Set I2C Address Button Temperature (\u00b0C) Decimal - Default Value: 100.0 Temperature for single point calibration Calibrate Button Clear Calibration Button","title":"Atlas Scientific: Atlas PT-1000"},{"location":"Supported-Inputs/#atlas-scientific-atlas-pressure","text":"Manufacturer: Atlas Scientific Measurements: Pressure Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete LED Mode Select(Options: [ Always On | Always Off | Only On During Measure] (Default in bold ) When to turn the LED on Commands New I2C Address Text - Default Value: 0x6a The new I2C to set the device to Set I2C Address Button","title":"Atlas Scientific: Atlas Pressure"},{"location":"Supported-Inputs/#atlas-scientific-atlas-ph","text":"Manufacturer: Atlas Scientific Measurements: Ion Concentration Interfaces: I 2 C, UART, FTDI Libraries: pylibftdi/fcntl/io/serial Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Calibration Measurement is an optional setting that provides a temperature measurement (in Celsius) of the water that the pH is being measured from. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use Commands Calibration: a one-, two- or three-point calibration can be performed. It's a good idea to clear the calibration before calibrating. The first calibration must be the Mid point. The second must be the Low point. And the third must be the High point. You can perform a one-, two- or three-point calibration, but they must be performed in this order. Allow a minute or two after submerging your probe in a calibration solution for the measurements to equilibrate before calibrating to that solution. The EZO pH circuit default temperature compensation is set to 25 \u00b0C. If the temperature of the calibration solution is +/- 2 \u00b0C from 25 \u00b0C, consider setting the temperature compensation first. Note that if you have a Temperature Compensation Measurement selected from the Options, this will overwrite the manual Temperature Compensation set here, so be sure to disable this option if you would like to specify the temperature to compensate with. Status messages will be sent to the Daemon Log, accessible from Config -> Mycodo Logs -> Daemon Log. Compensation Temperature (\u00b0C) Decimal - Default Value: 25.0 The temperature of the calibration solutions Set Temperature Compensation Button Clear Calibration Button Mid Point pH Decimal - Default Value: 7.0 The pH of the mid point calibration solution Calibrate Mid Button Low Point pH Decimal - Default Value: 4.0 The pH of the low point calibration solution Calibrate Low Button High Point pH Decimal - Default Value: 10.0 The pH of the high point calibration solution Calibrate High Button Calibration Export/Import: Export calibration to a series of strings. These can later be imported to restore the calibration. Watch the Daemon Log for the output. Export Calibration Button Calibration String Text The calibration string to import Import Calibration Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x63 The new I2C to set the device to Set I2C Address Button","title":"Atlas Scientific: Atlas pH"},{"location":"Supported-Inputs/#bosch-bme280-adafruit_bme280","text":"Manufacturer: BOSCH Measurements: Pressure/Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_BME280 Dependencies: Adafruit-GPIO , Adafruit_BME280 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"BOSCH: BME280 (Adafruit_BME280)"},{"location":"Supported-Inputs/#bosch-bme280-adafruit_circuitpython_bme280","text":"Manufacturer: BOSCH Measurements: Pressure/Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_BME280 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-bme280 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"BOSCH: BME280 (Adafruit_CircuitPython_BME280)"},{"location":"Supported-Inputs/#bosch-bme280-rpibme280","text":"Manufacturer: BOSCH Measurements: Pressure/Humidity/Temperature Interfaces: I 2 C Libraries: RPi.bme280 Dependencies: RPi.bme280 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"BOSCH: BME280 (RPi.bme280)"},{"location":"Supported-Inputs/#bosch-bme680-adafruit_circuitpython_bme680","text":"Manufacturer: BOSCH Measurements: Temperature/Humidity/Pressure/Gas Interfaces: I 2 C Libraries: Adafruit_CircuitPython_BME680 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-bme680 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Humidity Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. Temperature Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. Pressure Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. IIR Filter Size Select(Options: [0 | 1 | 3 | 7 | 15 | 31 | 63 | 127] (Default in bold ) Optionally remove short term fluctuations from the temperature and pressure readings, increasing their resolution but reducing their bandwidth. Temperature Offset Decimal The amount to offset the temperature, either negative or positive Sea Level Pressure (ha) Decimal - Default Value: 1013.25 The pressure at sea level for the sensor location","title":"BOSCH: BME680 (Adafruit_CircuitPython_BME680)"},{"location":"Supported-Inputs/#bosch-bme680-bme680","text":"Manufacturer: BOSCH Measurements: Temperature/Humidity/Pressure/Gas Interfaces: I 2 C Libraries: bme680 Dependencies: bme680 , smbus2 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Humidity Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. Temperature Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. Pressure Oversampling Select(Options: [NONE | 1X | 2X | 4X | 8X | 16X] (Default in bold ) A higher oversampling value means more stable readings with less noise and jitter. However each step of oversampling adds ~2 ms latency, causing a slower response time to fast transients. IIR Filter Size Select(Options: [0 | 1 | 3 | 7 | 15 | 31 | 63 | 127] (Default in bold ) Optionally remove short term fluctuations from the temperature and pressure readings, increasing their resolution but reducing their bandwidth. Gas Heater Temperature (\u00b0C) Integer - Default Value: 320 What temperature to set Gas Heater Duration (ms) Integer - Default Value: 150 How long of a duration to heat. 20-30 ms are necessary for the heater to reach the intended target temperature. Gas Heater Profile Select Select one of the 10 configured heating durations/set points Temperature Offset Decimal The amount to offset the temperature, either negative or positive","title":"BOSCH: BME680 (bme680)"},{"location":"Supported-Inputs/#bosch-bmp180","text":"Manufacturer: BOSCH Measurements: Pressure/Temperature Interfaces: I 2 C Libraries: Adafruit_BMP Dependencies: Adafruit-BMP , Adafruit-GPIO Datasheet URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"BOSCH: BMP180"},{"location":"Supported-Inputs/#bosch-bmp280-adafruit_gpio","text":"Manufacturer: BOSCH Measurements: Pressure/Temperature Interfaces: I 2 C Libraries: Adafruit_GPIO Dependencies: Adafruit-GPIO Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"BOSCH: BMP280 (Adafruit_GPIO)"},{"location":"Supported-Inputs/#bosch-bmp280-bmp280-python","text":"Manufacturer: BOSCH Measurements: Pressure/Temperature Interfaces: I 2 C Libraries: bmp280-python Dependencies: smbus2 , bmp280 Manufacturer URL: Link Datasheet URL: Link Product URL: Link This is similar to the other BMP280 Input, except it uses a different library, whcih includes the ability to set forced mode. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Enable Forced Mode Boolean Enable heater to evaporate condensation. Turn on heater x seconds every y measurements.","title":"BOSCH: BMP280 (bmp280-python)"},{"location":"Supported-Inputs/#co2meter-k30","text":"Manufacturer: CO2Meter Measurements: CO2 Interfaces: I 2 C, UART Libraries: serial (UART) Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"CO2Meter: K30"},{"location":"Supported-Inputs/#catnip-electronics-chirp","text":"Manufacturer: Catnip Electronics Measurements: Light/Moisture/Temperature Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x20 The new I2C to set the device to Set I2C Address Button","title":"Catnip Electronics: Chirp"},{"location":"Supported-Inputs/#cozir-cozir-co2","text":"Manufacturer: Cozir Measurements: CO2/Humidity/Temperature Interfaces: UART Libraries: pierre-haessig/pycozir Dependencies: cozir Manufacturer URL: Link Datasheet URL: Link Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Cozir: Cozir CO2"},{"location":"Supported-Inputs/#generic-hall-flow-meter","text":"Manufacturer: Generic Measurements: Flow Rate, Total Volume Interfaces: GPIO Libraries: pigpio Dependencies: pigpio, pigpio Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Pulses per Liter Decimal - Default Value: 1.0 Enter the conversion factor for this meter (pulses to Liter). Commands Clear Total: Volume Button","title":"Generic: Hall Flow Meter"},{"location":"Supported-Inputs/#infineon-dps310","text":"Manufacturer: Infineon Measurements: Pressure/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_DPS310 Dependencies: Adafruit-extended-bus , adafruit-circuitpython-dps310 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Infineon: DPS310"},{"location":"Supported-Inputs/#maxim-ds1822","text":"Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button","title":"MAXIM: DS1822"},{"location":"Supported-Inputs/#maxim-ds1825","text":"Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button","title":"MAXIM: DS1825"},{"location":"Supported-Inputs/#maxim-ds18b20-ow-shell","text":"Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: ow-shell Dependencies: ow-shell , owfs Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Additional URL: Link Warning: Counterfeit DS18B20 sensors are common and can cause a host of issues. Review the Additional URL for more information about how to determine if your sensor is authentic. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"MAXIM: DS18B20 (ow-shell)"},{"location":"Supported-Inputs/#maxim-ds18b20-w1thermsensor","text":"Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Additional URL: Link Warning: Counterfeit DS18B20 sensors are common and can cause a host of issues. Review the Additional URL for more information about how to determine if your sensor is authentic. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Offset Decimal The temperature offset (degrees Celsius) to apply Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button","title":"MAXIM: DS18B20 (w1thermsensor)"},{"location":"Supported-Inputs/#maxim-ds18s20","text":"Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button","title":"MAXIM: DS18S20"},{"location":"Supported-Inputs/#maxim-ds28ea00","text":"Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button","title":"MAXIM: DS28EA00"},{"location":"Supported-Inputs/#maxim-max31850k","text":"Manufacturer: MAXIM Measurements: Temperature Interfaces: 1-Wire Libraries: w1thermsensor Dependencies: w1thermsensor Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Commands Set the resolution, precision, and response time for the sensor. This setting will be written to the EEPROM to allow persistence after power loss. The EEPROM has a limited amount of writes (>50k). Resolution Select Select the resolution for the sensor Set Resolution Button","title":"MAXIM: MAX31850K"},{"location":"Supported-Inputs/#maxim-max31855-gravity-pt100-smbus2","text":"Manufacturer: MAXIM Measurements: Temperature Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"MAXIM: MAX31855 (Gravity PT100) (smbus2)"},{"location":"Supported-Inputs/#maxim-max31855-gravity-pt100-wiringpi","text":"Manufacturer: MAXIM Measurements: Temperature Interfaces: I 2 C Libraries: wiringpi Dependencies: wiringpi Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"MAXIM: MAX31855 (Gravity PT100) (wiringpi)"},{"location":"Supported-Inputs/#maxim-max31855-adafruit_max31855","text":"Manufacturer: MAXIM Measurements: Temperature (Object/Die) Interfaces: UART Libraries: Adafruit_MAX31855 Dependencies: Adafruit_MAX31855 , Adafruit-GPIO Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"MAXIM: MAX31855 (Adafruit_MAX31855)"},{"location":"Supported-Inputs/#maxim-max31855-adafruit-circuitpython-max31855","text":"Manufacturer: MAXIM Measurements: Temperature (Object/Die) Interfaces: SPI Libraries: adafruit-circuitpython-max31855 Dependencies: adafruit-circuitpython-max31855 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Chip Select Pin Integer - Default Value: 5 Enter the GPIO Chip Select Pin for your device.","title":"MAXIM: MAX31855 (adafruit-circuitpython-max31855)"},{"location":"Supported-Inputs/#maxim-max31856","text":"Manufacturer: MAXIM Measurements: Temperature (Object/Die) Interfaces: UART Libraries: RPi.GPIO Dependencies: RPi.GPIO Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"MAXIM: MAX31856"},{"location":"Supported-Inputs/#maxim-max31865-adafruit-circuitpython-max31865","text":"Manufacturer: MAXIM Measurements: Temperature Interfaces: SPI Libraries: Adafruit-CircuitPython-MAX31865 Dependencies: adafruit-circuitpython-max31865 Manufacturer URL: Link Datasheet URL: Link Product URL: Link This module was added to allow support for multiple sensors to be connected at the same time, which the original MAX31865 module was not designed for. Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Chip Select Pin Integer - Default Value: 8 Enter the GPIO Chip Select Pin for your device. Number of wires Select(Options: [ 2 Wires | 3 Wires | 4 Wires] (Default in bold ) Select the number of wires your thermocouple has.","title":"MAXIM: MAX31865 (Adafruit-CircuitPython-MAX31865)"},{"location":"Supported-Inputs/#maxim-max31865-rpigpio","text":"Manufacturer: MAXIM Measurements: Temperature Interfaces: UART Libraries: RPi.GPIO Dependencies: RPi.GPIO Manufacturer URL: Link Datasheet URL: Link Product URL: Link Note: This module does not allow for multiple sensors to be connected at the same time. For multi-sensor support, use the MAX31865 CircuitPython Input. Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"MAXIM: MAX31865 (RPi.GPIO)"},{"location":"Supported-Inputs/#mqtt-mqtt-subscribe-json-payload","text":"Manufacturer: MQTT Measurements: Variable measurements Interfaces: Mycodo Libraries: paho-mqtt, jmespath Dependencies: paho-mqtt , jmespath A single topic is subscribed to and the returned JSON payload contains one or more key/value pairs. The given JSON Key is used as a JMESPATH expression to find the corresponding value that will be stored for that channel. Be sure you select and save the Measurement Unit for each channel. Once the unit has been saved, you can convert to other units in the Convert Measurement section. Example expressions for jmespath (https://jmespath.org) include temperature , sensors[0].temperature , and bathroom.temperature which refer to the temperature as a direct key within the first entry of sensors or as a subkey of bathroom, respectively. Jmespath elements and keys that contain special characters have to be enclosed in double quotes, e.g. \"sensor-1\".temperature . Warning: If using multiple MQTT Inputs or Functions, ensure the Client IDs are unique. Option Type Description Measurements Enabled Multi-Select The measurements to record Host Text - Default Value: localhost Host or IP address Port Integer - Default Value: 1883 Host port number Topic Text - Default Value: mqtt/test/input The topic to subscribe to Keep Alive Integer - Default Value: 60 Maximum amount of time between received signals. Set to 0 to disable. Client ID Text - Default Value: client_FGIg092m Unique client ID for connecting to the server Use Login Boolean Send login credentials Use TLS Boolean Send login credentials using TLS Username Text - Default Value: user Username for connecting to the server Password Text Password for connecting to the server. Leave blank to disable. Use Websockets Boolean Use websockets to connect to the server. Channel Options Name Text A name to distinguish this from others JMESPATH Expression Text JMESPATH expression to find value in JSON response","title":"MQTT: MQTT Subscribe (JSON payload)"},{"location":"Supported-Inputs/#mqtt-mqtt-subscribe-value-payload","text":"Manufacturer: MQTT Measurements: Variable measurements Interfaces: Mycodo Libraries: paho-mqtt Dependencies: paho-mqtt A topic is subscribed to for each channel Subscription Topic and the returned payload value will be stored for that channel. Be sure you select and save the Measurement Unit for each of the channels. Once the unit has been saved, you can convert to other units in the Convert Measurement section. Warning: If using multiple MQTT Inputs or Functions, ensure the Client IDs are unique. Option Type Description Measurements Enabled Multi-Select The measurements to record Host Text - Default Value: localhost Host or IP address Port Integer - Default Value: 1883 Host port number Keep Alive Integer - Default Value: 60 Maximum amount of time between received signals. Set to 0 to disable. Client ID Text - Default Value: client_mqUgXLvM Unique client ID for connecting to the server Use Login Boolean Send login credentials Use TLS Boolean Send login credentials using TLS Username Text - Default Value: user Username for connecting to the server Password Text Password for connecting to the server. Leave blank to disable. Use Websockets Boolean Use websockets to connect to the server. Channel Options Name Text A name to distinguish this from others Subscription Topic Text The MQTT topic to subscribe to","title":"MQTT: MQTT Subscribe (Value payload)"},{"location":"Supported-Inputs/#melexis-mlx90393","text":"Manufacturer: Melexis Measurements: Magnetic Flux Interfaces: I 2 C Libraries: Adafruit_CircuitPython_MLX90393 Dependencies: Adafruit-extended-bus , adafruit-circuitpython-mlx90393 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Melexis: MLX90393"},{"location":"Supported-Inputs/#melexis-mlx90614","text":"Manufacturer: Melexis Measurements: Temperature (Ambient/Object) Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Melexis: MLX90614"},{"location":"Supported-Inputs/#microchip-mcp3008-adafruit_circuitpython_mcp3xxx","text":"Manufacturer: Microchip Measurements: Voltage (Analog-to-Digital Converter) Interfaces: UART Libraries: Adafruit_CircuitPython_MCP3xxx Dependencies: adafruit-circuitpython-mcp3xxx Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete VREF (volts) Decimal - Default Value: 3.3 Set the VREF voltage","title":"Microchip: MCP3008 (Adafruit_CircuitPython_MCP3xxx)"},{"location":"Supported-Inputs/#microchip-mcp3008-adafruit_mcp3008","text":"Manufacturer: Microchip Measurements: Voltage (Analog-to-Digital Converter) Interfaces: UART Libraries: Adafruit_MCP3008 Dependencies: Adafruit-MCP3008 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete VREF (volts) Decimal - Default Value: 3.3 Set the VREF voltage","title":"Microchip: MCP3008 (Adafruit_MCP3008)"},{"location":"Supported-Inputs/#microchip-mcp3208","text":"Manufacturer: Microchip Measurements: Voltage (Analog-to-Digital Converter) Interfaces: SPI Libraries: MCP3208 Dependencies: Adafruit-GPIO Manufacturer URL: Link Datasheet URL: Link Option Type Description Pin: Cable Select Integer GPIO (using BCM numbering): Pin: Cable Select Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete SPI Bus Integer The SPI bus ID. SPI Device Integer The SPI device ID. VREF (volts) Decimal - Default Value: 3.3 Set the VREF voltage","title":"Microchip: MCP3208"},{"location":"Supported-Inputs/#microchip-mcp342x-x234678","text":"Manufacturer: Microchip Measurements: Voltage (Analog-to-Digital Converter) Interfaces: I 2 C Libraries: MCP342x Dependencies: smbus2 , MCP342x Manufacturer URLs: Link 1 , Link 2 , Link 3 , Link 4 , Link 5 Datasheet URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Microchip: MCP342x (x=2,3,4,6,7,8)"},{"location":"Supported-Inputs/#microchip-mcp9808","text":"Manufacturer: Microchip Measurements: Temperature Interfaces: I 2 C Libraries: Adafruit_MCP9808 Dependencies: Adafruit-GPIO , Adafruit_MCP9808 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Microchip: MCP9808"},{"location":"Supported-Inputs/#multiple-manufacturers-hc-sr04","text":"Manufacturer: Multiple Manufacturers Measurements: Ultrasonic Distance Interfaces: GPIO Libraries: Adafruit_CircuitPython_HCSR04 Dependencies: libgpiod-dev , pyusb , adafruit-circuitpython-hcsr04 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Additional URL: Link Option Type Description Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Trigger Pin Integer Enter the GPIO Trigger Pin for your device (BCM numbering). Echo Pin Integer Enter the GPIO Echo Pin for your device (BCM numbering).","title":"Multiple Manufacturers: HC-SR04"},{"location":"Supported-Inputs/#panasonic-amg8833","text":"Manufacturer: Panasonic Measurements: 8x8 Temperature Grid Interfaces: I 2 C Libraries: Adafruit_AMG88xx/Pillow/colour Dependencies: libjpeg-dev , zlib1g-dev , colour , Pillow , Adafruit_AMG88xx Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Panasonic: AMG8833"},{"location":"Supported-Inputs/#power-monitor-rpi-power-monitor-6-channels","text":"Manufacturer: Power Monitor Measurements: AC Voltage, Power, Current, Power Factor Libraries: rpi-power-monitor Dependencies: rpi_power_monitor Manufacturer URL: Link Product URL: Link See https://github.com/David00/rpi-power-monitor/wiki/Calibrating-for-Accuracy for calibration procedures. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Grid Voltage Decimal - Default Value: 124.2 The AC voltage measured at the outlet Transformer Voltage Decimal - Default Value: 10.2 The AC voltage measured at the barrel plug of the 9 VAC transformer CT1 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT1 CT2 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT2 CT3 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT3 CT4 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT4 CT5 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT5 CT6 Phase Correction Decimal - Default Value: 1.0 The phase correction value for CT6 CT1 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT1 CT2 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT2 CT3 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT3 CT4 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT4 CT5 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT5 CT6 Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for CT6 AC Accuracy Calibration Decimal - Default Value: 1.0 The accuracy calibration value for AC","title":"Power Monitor: RPi Power Monitor (6 Channels)"},{"location":"Supported-Inputs/#rohm-bh1750","text":"Manufacturer: ROHM Measurements: Light Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"ROHM: BH1750"},{"location":"Supported-Inputs/#raspberry-pi-foundation-sense-hat","text":"Manufacturer: Raspberry Pi Foundation Measurements: hum/temp/press/compass/magnet/accel/gyro Interfaces: I 2 C Libraries: sense-hat Dependencies: git , Bash Commands (see Module for details), sense-hat Manufacturer URL: Link This module acquires measurements from the Raspberry Pi Sense HAT sensors, which include the LPS25H, LSM9DS1, and HTS221. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Raspberry Pi Foundation: Sense HAT"},{"location":"Supported-Inputs/#ruuvi-ruuvitag","text":"Manufacturer: Ruuvi Measurements: Acceleration/Humidity/Pressure/Temperature Interfaces: BT Libraries: ruuvitag_sensor Dependencies: psutil , bluez , bluez-hcidump , ruuvitag-sensor Manufacturer URL: Link Datasheet URL: Link Option Type Description Bluetooth MAC (XX:XX:XX:XX:XX:XX) Text The Hci location of the Bluetooth device. Bluetooth Adapter (hci[X]) Text The adapter of the Bluetooth device. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Ruuvi: RuuviTag"},{"location":"Supported-Inputs/#stmicroelectronics-vl53l0x","text":"Manufacturer: STMicroelectronics Measurements: Millimeter (Time-of-Flight Distance) Interfaces: I 2 C Libraries: VL53L0X_rasp_python Dependencies: VL53L0X Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Accuracy Select(Options: [ Good Accuracy (33 ms, 1.2 m range) | Better Accuracy (66 ms, 1.2 m range) | Best Accuracy (200 ms, 1.2 m range) | Long Range (33 ms, 2 m) | High Speed, Low Accuracy (20 ms, 1.2 m)] (Default in bold ) Set the accuracy. A longer measurement duration yields a more accurate measurement Commands New I2C Address Text - Default Value: 0x52 The new I2C to set the device to Set I2C Address Button","title":"STMicroelectronics: VL53L0X"},{"location":"Supported-Inputs/#stmicroelectronics-vl53l1x","text":"Manufacturer: STMicroelectronics Measurements: Millimeter (Time-of-Flight Distance) Interfaces: I 2 C Libraries: VL53L1X Dependencies: smbus2 , vl53l1x Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Notes when setting a custom timing budget: A higher timing budget results in greater measurement accuracy, but also a higher power consumption. The inter measurement period must be >= the timing budget, otherwise it will be double the expected value. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Range Select(Options: [ Short Range | Medium Range | Long Range | Custom Timing Budget] (Default in bold ) Select a range or select to set a custom Timing Budget and Inter Measurement Period. Timing Budget (microseconds) Integer - Default Value: 66000 Set the timing budget. Must be less than or equal to the Inter Measurement Period. Inter Measurement Period (milliseconds) Integer - Default Value: 70 Set the Inter Measurement Period","title":"STMicroelectronics: VL53L1X"},{"location":"Supported-Inputs/#stmicroelectronics-vl53l4cd","text":"Manufacturer: STMicroelectronics Measurements: Millimeter (Time-of-Flight Distance) Interfaces: I 2 C Libraries: Adafruit-CircuitPython-VL53l4CD Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-vl53l4cd Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Timing Budget (ms) Integer - Default Value: 50 Set the timing budget between 10 to 200 ms. A longer duration yields a more accurate measurement. Inter-Measurement Period (ms) Integer Valid range between Timing Budget and 5000 ms (0 to disable) Commands The I2C address of the sensor can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate the Input and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x29 The new I2C to set the device to Set I2C Address Button","title":"STMicroelectronics: VL53L4CD"},{"location":"Supported-Inputs/#seeedstudio-dht1122","text":"Manufacturer: Seeedstudio Measurements: Humidity/Temperature Interfaces: GROVE Libraries: grovepi Dependencies: libatlas-base-dev , grovepi Manufacturer URLs: Link 1 , Link 2 Enter the Grove Pi+ GPIO pin connected to the sensor and select the sensor type. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Sensor Type Select(Options: [ DHT11 (Blue) | DHT22 (White)] (Default in bold ) Sensor type","title":"Seeedstudio: DHT11/22"},{"location":"Supported-Inputs/#senseair-k96","text":"Manufacturer: Senseair Measurements: Methane/Moisture/CO2/Pressure/Humidity/Temperature Interfaces: UART Libraries: Serial Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Senseair: K96"},{"location":"Supported-Inputs/#sensirion-scd-4x-40-41","text":"Manufacturer: Sensirion Measurements: CO2/Temperature/Humidity Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SCD4x Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-scd4x Manufacturer URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Offset Decimal - Default Value: 4.0 Set the sensor temperature offset Altitude (m) Integer Set the sensor altitude (meters) Automatic Self-Calibration Boolean Set the sensor automatic self-calibration Persist Settings Boolean - Default Value: True Settings will persist after powering off Commands You can force the CO2 calibration for a specific CO2 concentration value (in ppmv). The sensor needs to be active for at least 3 minutes prior to calibration. CO2 Concentration (ppmv) Decimal - Default Value: 400.0 Calibrate to this CO2 concentration that the sensor is being exposed to (in ppmv) Calibrate CO2 Button","title":"Sensirion: SCD-4x (40, 41)"},{"location":"Supported-Inputs/#sensirion-scd30-adafruit_circuitpython_scd30","text":"Manufacturer: Sensirion Measurements: CO2/Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SCD30 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitPython-scd30 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete I2C Frequency: The SCD-30 has temperamental I2C with clock stretching. The datasheet recommends starting at 50,000 Hz. I2C Frequency (Hz) Integer - Default Value: 50000 Automatic Self Ccalibration (ASC): To work correctly, the sensor must be on and active for 7 days after enabling ASC, and exposed to fresh air for at least 1 hour per day. Consult the manufacturer\u2019s documentation for more information. Enable Automatic Self Calibration Boolean Temperature Offset: Specifies the offset to be added to the reported measurements to account for a bias in the measured signal. Must be a positive value, and will reduce the recorded temperature by that amount. Give the sensor adequate time to acclimate after setting this value. Value is in degrees Celsius with a resolution of 0.01 degrees and a maximum value of 655.35 C. Temperature Offset Decimal Ambient Air Pressure (mBar): Specify the ambient air pressure at the measurement location in mBar. Setting this value adjusts the CO2 measurement calculations to account for the air pressure\u2019s effect on readings. Values must be in mBar, from 700 to 1200 mBar. Ambient Air Pressure (mBar) Integer - Default Value: 1200 Altitude: Specifies the altitude at the measurement location in meters above sea level. Setting this value adjusts the CO2 measurement calculations to account for the air pressure\u2019s effect on readings. Altitude (m) Integer - Default Value: 100 Commands A soft reset restores factory default values. Soft Reset Button Forced Re-Calibration: The SCD-30 is placed in an environment with a known CO2 concentration, this concentration value is entered in the CO2 Concentration (ppmv) field, then the Foce Calibration button is pressed. But how do you come up with that known value? That is a caveat of this approach and Sensirion suggests three approaches: 1. Using a separate secondary calibrated CO2 sensor to provide the value. 2. Exposing the SCD-30 to a controlled environment with a known value. 3. Exposing the SCD-30 to fresh outside air and using a value of 400 ppm. CO2 Concentration (ppmv) Integer - Default Value: 800 The CO2 concentration of the sensor environment when forcing calibration Force Recalibration Button","title":"Sensirion: SCD30 (Adafruit_CircuitPython_SCD30)"},{"location":"Supported-Inputs/#sensirion-scd30-scd30_i2c","text":"Manufacturer: Sensirion Measurements: CO2/Humidity/Temperature Interfaces: I 2 C Libraries: scd30_i2c Dependencies: scd30-i2c Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Automatic Self Ccalibration (ASC): To work correctly, the sensor must be on and active for 7 days after enabling ASC, and exposed to fresh air for at least 1 hour per day. Consult the manufacturer\u2019s documentation for more information. Enable Automatic Self Calibration Boolean Commands A soft reset restores factory default values. Soft Reset Button","title":"Sensirion: SCD30 (scd30_i2c)"},{"location":"Supported-Inputs/#sensirion-sht1x7x","text":"Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: GPIO Libraries: sht_sensor Dependencies: sht-sensor Manufacturer URLs: Link 1 , Link 2 Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Sensirion: SHT1x/7x"},{"location":"Supported-Inputs/#sensirion-sht2x-sht20","text":"Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: sht20 Dependencies: sht20 Manufacturer URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Resolution Select(Options: [11-bit | 12-bit | 13-bit | 14-bit ] (Default in bold ) The resolution of the temperature measurement","title":"Sensirion: SHT2x (sht20)"},{"location":"Supported-Inputs/#sensirion-sht2x-smbus2","text":"Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Sensirion: SHT2x (smbus2)"},{"location":"Supported-Inputs/#sensirion-sht31-d","text":"Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SHT31 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-sht31d Manufacturer URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Offset Decimal The temperature offset (degrees Celsius) to apply","title":"Sensirion: SHT31-D"},{"location":"Supported-Inputs/#sensirion-sht3x-30-31-35","text":"Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_SHT31 Dependencies: Adafruit-GPIO , Adafruit-SHT31 Manufacturer URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Enable Heater Boolean Enable heater to evaporate condensation. Turn on heater x seconds every y measurements Heater On Seconds (Seconds) Decimal - Default Value: 1.0 How long to turn the heater on Heater On Period Integer - Default Value: 10 After how many measurements to turn the heater on. This will repeat","title":"Sensirion: SHT3x (30, 31, 35)"},{"location":"Supported-Inputs/#sensirion-sht4x","text":"Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SHT4X Dependencies: pyusb , Adafruit-extended-bus , adafruit_circuitpython_sht4x Manufacturer URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Sensirion: SHT4X"},{"location":"Supported-Inputs/#sensirion-shtc3","text":"Manufacturer: Sensirion Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SHT3C Dependencies: pyusb , Adafruit-extended-bus , adafruit_circuitpython_shtc3 Manufacturer URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Sensirion: SHTC3"},{"location":"Supported-Inputs/#sensorion-sht31-smart-gadget","text":"Manufacturer: Sensorion Measurements: Humidity/Temperature Interfaces: BT Libraries: bluepy Dependencies: pi-bluetooth , libglib2.0-dev , bluepy Manufacturer URL: Link Option Type Description Bluetooth MAC (XX:XX:XX:XX:XX:XX) Text The Hci location of the Bluetooth device. Bluetooth Adapter (hci[X]) Text The adapter of the Bluetooth device. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Download Stored Data Boolean - Default Value: True Download the data logged to the device. Set Logging Interval (Seconds) Integer - Default Value: 600 Set the logging interval the device will store measurements on its internal memory.","title":"Sensorion: SHT31 Smart Gadget"},{"location":"Supported-Inputs/#silicon-labs-si1145","text":"Manufacturer: Silicon Labs Measurements: Light (UV/Visible/IR), Proximity (cm) Interfaces: I 2 C Libraries: si1145 Dependencies: SI1145 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Silicon Labs: SI1145"},{"location":"Supported-Inputs/#silicon-labs-si7021","text":"Manufacturer: Silicon Labs Measurements: Temperature/Humidity Interfaces: I 2 C Libraries: Adafruit_CircuitPython_SI7021 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-si7021 Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Silicon Labs: Si7021"},{"location":"Supported-Inputs/#sonoff-th1610-tasmota-firmware-with-am2301si7021","text":"Manufacturer: Sonoff Measurements: Humidity/Temperature Libraries: requests Dependencies: requests Manufacturer URL: Link This Input module allows the use of any temperature/humidity sensor with the TH10/TH16. Changing the Sensor Name option changes the key that's queried from the returned dictionary of measurements. If you would like to use this module with a version of this device that uses the AM2301, change Sensor Name to AM2301. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete IP Address Text - Default Value: 192.168.0.100 The IP address of the device Sensor Name Text - Default Value: SI7021 The name of the sensor connected to the device (specific key name in the returned dictionary)","title":"Sonoff: TH16/10 (Tasmota firmware) with AM2301/Si7021"},{"location":"Supported-Inputs/#sonoff-th1610-tasmota-firmware-with-am2301","text":"Manufacturer: Sonoff Measurements: Humidity/Temperature Libraries: requests Dependencies: requests Manufacturer URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete IP Address Text - Default Value: 192.168.0.100 The IP address of the device","title":"Sonoff: TH16/10 (Tasmota firmware) with AM2301"},{"location":"Supported-Inputs/#sonoff-th1610-tasmota-firmware-with-ds18b20","text":"Manufacturer: Sonoff Measurements: Temperature Libraries: requests Dependencies: requests Manufacturer URL: Link Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete IP Address Text - Default Value: 192.168.0.100 The IP address of the device","title":"Sonoff: TH16/10 (Tasmota firmware) with DS18B20"},{"location":"Supported-Inputs/#te-connectivity-htu21d-adafruit_circuitpython_htu21d","text":"Manufacturer: TE Connectivity Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: Adafruit_CircuitPython_HTU21D Dependencies: Adafruit-extended-bus , adafruit-circuitpython-HTU21D Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Temperature Offset Decimal The temperature offset (degrees Celsius) to apply","title":"TE Connectivity: HTU21D (Adafruit_CircuitPython_HTU21D)"},{"location":"Supported-Inputs/#te-connectivity-htu21d-pigpio","text":"Manufacturer: TE Connectivity Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: pigpio Dependencies: pigpio, pigpio Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"TE Connectivity: HTU21D (pigpio)"},{"location":"Supported-Inputs/#tp-link-kasa-wifi-power-plugstrip-energy-statistics","text":"Manufacturer: TP-Link Measurements: kilowatt hours Interfaces: IP Libraries: python-kasa Dependencies: python-kasa , aio_msgpack_rpc Manufacturer URL: Link This measures from several Kasa power devices (plugs/strips) capable of measuring energy consumption. These include, but are not limited to the KP115 and HS600. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Device Type Select The type of Kasa device Host Text - Default Value: 0.0.0.0 Host or IP address Asyncio RPC Port Integer - Default Value: 18108 The port to start the asyncio RPC server. Must be unique from other Kasa Outputs. Commands The total kWh can be cleared with the following button or with the Clear Total kWh Function Action. This will also clear all energy stats on the device, not just the total kWh. Clear Total: Kilowatt-hour Button","title":"TP-Link: Kasa WiFi Power Plug/Strip Energy Statistics"},{"location":"Supported-Inputs/#tasmota-tasmota-outlet-energy-monitor-http","text":"Manufacturer: Tasmota Measurements: Total Energy, Amps, Watts Interfaces: HTTP Libraries: requests Manufacturer URL: Link Product URL: Link This input queries the energy usage information from a WiFi outlet that is running the tasmota firmware. There are many WiFi outlets that support tasmota, and many of of those have energy monitoring capabilities. When used with an MQTT Output, you can both control your tasmota outlets as well as mionitor their energy usage. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Host Text - Default Value: 192.168.0.50 Host or IP address","title":"Tasmota: Tasmota Outlet Energy Monitor (HTTP)"},{"location":"Supported-Inputs/#texas-instruments-ads1015","text":"Manufacturer: Texas Instruments Measurements: Voltage (Analog-to-Digital Converter) Interfaces: I 2 C Libraries: Adafruit_CircuitPython_ADS1x15 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-ads1x15 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Measurements to Average Integer - Default Value: 5 The number of times to measure each channel. An average of the measurements will be stored.","title":"Texas Instruments: ADS1015"},{"location":"Supported-Inputs/#texas-instruments-ads1115-generic-analog-phec","text":"Manufacturer: Texas Instruments Measurements: Ion Concentration/Electrical Conductivity Interfaces: I 2 C Libraries: Adafruit_CircuitPython_ADS1x15 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-ads1x15 This input relies on an ADS1115 analog-to-digital converter (ADC) to measure pH and/or electrical conductivity (EC) from analog sensors. You can enable or disable either measurement if you want to only connect a pH sensor or an EC sensor by selecting which measurements you want to under Measurements Enabled. Select which channel each sensor is connected to on the ADC. There are default calibration values initially set for the Input. There are also functions to allow you to easily calibrate your sensors with calibration solutions. If you use the Calibrate Slot actions, these values will be calculated and will replace the currently-set values. You can use the Clear Calibration action to delete the database values and return to using the default values. If you delete the Input or create a new Input to use your ADC/sensors with, you will need to recalibrate in order to store new calibration data. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete ADC Channel: pH Select(Options: [ Channel 0 | Channel 1 | Channel 2 | Channel 3] (Default in bold ) The ADC channel the pH sensor is connected ADC Channel: EC Select(Options: [Channel 0 | Channel 1 | Channel 2 | Channel 3] (Default in bold ) The ADC channel the EC sensor is connected Temperature Compensation Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use pH Calibration Data Cal data: V1 (internal) Decimal - Default Value: 1.5 Calibration data: Voltage Cal data: pH1 (internal) Decimal - Default Value: 7.0 Calibration data: pH Cal data: T1 (internal) Decimal - Default Value: 25.0 Calibration data: Temperature Cal data: V2 (internal) Decimal - Default Value: 2.032 Calibration data: Voltage Cal data: pH2 (internal) Decimal - Default Value: 4.0 Calibration data: pH Cal data: T2 (internal) Decimal - Default Value: 25.0 Calibration data: Temperature EC Calibration Data EC cal data: V1 (internal) Decimal - Default Value: 0.232 EC calibration data: Voltage EC cal data: EC1 (internal) Decimal - Default Value: 1413.0 EC calibration data: EC EC cal data: T1 (internal) Decimal - Default Value: 25.0 EC calibration data: EC EC cal data: V2 (internal) Decimal - Default Value: 2.112 EC calibration data: Voltage EC cal data: EC2 (internal) Decimal - Default Value: 12880.0 EC calibration data: EC EC cal data: T2 (internal) Decimal - Default Value: 25.0 EC calibration data: EC Commands pH Calibration Actions: Place your probe in a solution of known pH. Set the known pH value in the \"Calibration buffer pH\" field, and press \"Calibrate pH, slot 1\". Repeat with a second buffer, and press \"Calibrate pH, slot 2\". You don't need to change the values under \"Custom Options\". Calibration buffer pH Decimal - Default Value: 7.0 This is the nominal pH of the calibration buffer, usually labelled on the bottle. Calibrate pH, slot 1 Button Calibrate pH, slot 2 Button Clear pH Calibration Slots Button EC Calibration Actions: Place your probe in a solution of known EC. Set the known EC value in the \"Calibration standard EC\" field, and press \"Calibrate EC, slot 1\". Repeat with a second standard, and press \"Calibrate EC, slot 2\". You don't need to change the values under \"Custom Options\". Calibration standard EC Decimal - Default Value: 1413.0 This is the nominal EC of the calibration standard, usually labelled on the bottle. Calibrate EC, slot 1 Button Calibrate EC, slot 2 Button Clear EC Calibration Slots Button","title":"Texas Instruments: ADS1115: Generic Analog pH/EC"},{"location":"Supported-Inputs/#texas-instruments-ads1115","text":"Manufacturer: Texas Instruments Measurements: Voltage (Analog-to-Digital Converter) Interfaces: I 2 C Libraries: Adafruit_CircuitPython_ADS1x15 Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-ads1x15 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Measurements to Average Integer - Default Value: 5 The number of times to measure each channel. An average of the measurements will be stored.","title":"Texas Instruments: ADS1115"},{"location":"Supported-Inputs/#texas-instruments-ads1256-generic-analog-phec","text":"Manufacturer: Texas Instruments Measurements: Ion Concentration/Electrical Conductivity Interfaces: UART Libraries: wiringpi, kizniche/PiPyADC-py3 Dependencies: wiringpi , pipyadc_py3 This input relies on an ADS1256 analog-to-digital converter (ADC) to measure pH and/or electrical conductivity (EC) from analog sensors. You can enable or disable either measurement if you want to only connect a pH sensor or an EC sensor by selecting which measurements you want to under Measurements Enabled. Select which channel each sensor is connected to on the ADC. There are default calibration values initially set for the Input. There are also functions to allow you to easily calibrate your sensors with calibration solutions. If you use the Calibrate Slot actions, these values will be calculated and will replace the currently-set values. You can use the Clear Calibration action to delete the database values and return to using the default values. If you delete the Input or create a new Input to use your ADC/sensors with, you will need to recalibrate in order to store new calibration data. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete ADC Channel: pH Select(Options: [Not Connected | Channel 0 | Channel 1 | Channel 2 | Channel 3 | Channel 4 | Channel 5 | Channel 6 | Channel 7] (Default in bold ) The ADC channel the pH sensor is connected ADC Channel: EC Select(Options: [Not Connected | Channel 0 | Channel 1 | Channel 2 | Channel 3 | Channel 4 | Channel 5 | Channel 6 | Channel 7] (Default in bold ) The ADC channel the EC sensor is connected Temperature Compensation Temperature Compensation: Measurement Select Measurement (Input, Function) Select a measurement for temperature compensation Temperature Compensation: Max Age (Seconds) Integer - Default Value: 120 The maximum age of the measurement to use pH Calibration Data Cal data: V1 (internal) Decimal - Default Value: 1.5 Calibration data: Voltage Cal data: pH1 (internal) Decimal - Default Value: 7.0 Calibration data: pH Cal data: T1 (internal) Decimal - Default Value: 25.0 Calibration data: Temperature Cal data: V2 (internal) Decimal - Default Value: 2.032 Calibration data: Voltage Cal data: pH2 (internal) Decimal - Default Value: 4.0 Calibration data: pH Cal data: T2 (internal) Decimal - Default Value: 25.0 Calibration data: Temperature EC Calibration Data EC cal data: V1 (internal) Decimal - Default Value: 0.232 EC calibration data: Voltage EC cal data: EC1 (internal) Decimal - Default Value: 1413.0 EC calibration data: EC EC cal data: T1 (internal) Decimal - Default Value: 25.0 EC calibration data: EC EC cal data: V2 (internal) Decimal - Default Value: 2.112 EC calibration data: Voltage EC cal data: EC2 (internal) Decimal - Default Value: 12880.0 EC calibration data: EC EC cal data: T2 (internal) Decimal - Default Value: 25.0 EC calibration data: EC Calibration Select Set the calibration method to perform during Input activation Commands pH Calibration Actions: Place your probe in a solution of known pH. Set the known pH value in the `Calibration buffer pH` field, and press `Calibrate pH, slot 1`. Repeat with a second buffer, and press `Calibrate pH, slot 2`. You don't need to change the values under `Custom Options`. Calibration buffer pH Decimal - Default Value: 7.0 This is the nominal pH of the calibration buffer, usually labelled on the bottle. Calibrate pH, slot 1 Button Calibrate pH, slot 2 Button Clear pH Calibration Slots Button EC Calibration Actions: Place your probe in a solution of known EC. Set the known EC value in the `Calibration standard EC` field, and press `Calibrate EC, slot 1`. Repeat with a second standard, and press `Calibrate EC, slot 2`. You don't need to change the values under `Custom Options`. Calibration standard EC Decimal - Default Value: 1413.0 This is the nominal EC of the calibration standard, usually labelled on the bottle. Calibrate EC, slot 1 Button Calibrate EC, slot 2 Button Clear EC Calibration Slots Button","title":"Texas Instruments: ADS1256: Generic Analog pH/EC"},{"location":"Supported-Inputs/#texas-instruments-ads1256","text":"Manufacturer: Texas Instruments Measurements: Voltage (Waveshare, Analog-to-Digital Converter) Interfaces: UART Libraries: wiringpi, kizniche/PiPyADC-py3 Dependencies: wiringpi , pipyadc_py3 Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Calibration Select Set the calibration method to perform during Input activation","title":"Texas Instruments: ADS1256"},{"location":"Supported-Inputs/#texas-instruments-ads1x15","text":"Manufacturer: Texas Instruments Measurements: Voltage (Analog-to-Digital Converter) Interfaces: I 2 C Libraries: Adafruit_ADS1x15 [DEPRECATED] Dependencies: Adafruit-GPIO , Adafruit-ADS1x15 The Adafruit_ADS1x15 is deprecated. It's advised to use The Circuit Python ADS1x15 Input. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Measurements to Average Integer - Default Value: 5 The number of times to measure each channel. An average of the measurements will be stored.","title":"Texas Instruments: ADS1x15"},{"location":"Supported-Inputs/#texas-instruments-hdc1000","text":"Manufacturer: Texas Instruments Measurements: Humidity/Temperature Interfaces: I 2 C Libraries: fcntl/io Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Texas Instruments: HDC1000"},{"location":"Supported-Inputs/#texas-instruments-ina219x","text":"Manufacturer: Texas Instruments Measurements: Electrical Current (DC) Interfaces: I 2 C Libraries: Adafruit_CircuitPython Dependencies: adafruit-circuitpython-ina219 , Adafruit-extended-bus Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Measurements to Average Integer - Default Value: 5 The number of times to measure each channel. An average of the measurements will be stored. Calibration Range Select(Options: [ 32V @ 2A max (default) | 32V @ 1A max | 16V @ 400mA max | 16V @ 5A max] (Default in bold ) Set the device calibration range Bus Voltage Range Select(Options: [(0x00) - 16V | (0x01) - 32V (default) ] (Default in bold ) Set the bus voltage range Bus ADC Resolution Select(Options: [(0x00) - 9 Bit / 1 Sample | (0x01) - 10 Bit / 1 Sample | (0x02) - 11 Bit / 1 Sample | (0x03) - 12 Bit / 1 Sample (default) | (0x09) - 12 Bit / 2 Samples | (0x0A) - 12 Bit / 4 Samples | (0x0B) - 12 Bit / 8 Samples | (0x0C) - 12 Bit / 16 Samples | (0x0D) - 12 Bit / 32 Samples | (0x0E) - 12 Bit / 64 Samples | (0x0F) - 12 Bit / 128 Samples] (Default in bold ) Set the Bus ADC Resolution. Shunt ADC Resolution Select(Options: [(0x00) - 9 Bit / 1 Sample | (0x01) - 10 Bit / 1 Sample | (0x02) - 11 Bit / 1 Sample | (0x03) - 12 Bit / 1 Sample (default) | (0x09) - 12 Bit / 2 Samples | (0x0A) - 12 Bit / 4 Samples | (0x0B) - 12 Bit / 8 Samples | (0x0C) - 12 Bit / 16 Samples | (0x0D) - 12 Bit / 32 Samples | (0x0E) - 12 Bit / 64 Samples | (0x0F) - 12 Bit / 128 Samples] (Default in bold ) Set the Shunt ADC Resolution.","title":"Texas Instruments: INA219x"},{"location":"Supported-Inputs/#texas-instruments-tmp006","text":"Manufacturer: Texas Instruments Measurements: Temperature (Object/Die) Interfaces: I 2 C Libraries: Adafruit_TMP Dependencies: Adafruit-TMP Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Texas Instruments: TMP006"},{"location":"Supported-Inputs/#the-things-network-the-things-network-data-storage-ttn-v2","text":"Manufacturer: The Things Network Measurements: Variable measurements Libraries: requests Dependencies: requests This Input receives and stores measurements from the Data Storage Integration on The Things Network. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Start Offset (Seconds) Integer The duration to wait before the first operation Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Application ID Text The Things Network Application ID App API Key Text The Things Network Application API Key Device ID Text The Things Network Device ID Channel Options Name Text A name to distinguish this from others Variable Name Text The TTN variable name","title":"The Things Network: The Things Network: Data Storage (TTN v2)"},{"location":"Supported-Inputs/#the-things-network-the-things-network-data-storage-ttn-v3-payload-key","text":"Manufacturer: The Things Network Measurements: Variable measurements Libraries: requests Dependencies: requests This Input receives and stores measurements from the Data Storage Integration on The Things Network. If you have key/value pairs as your payload, enter the key name in Variable Name and the corresponding value for that key will be stored in the measurement database. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Start Offset (Seconds) Integer The duration to wait before the first operation Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Application ID Text The Things Network Application ID App API Key Text The Things Network Application API Key Device ID Text The Things Network Device ID Channel Options Name Text A name to distinguish this from others Variable Name Text The TTN variable name","title":"The Things Network: The Things Network: Data Storage (TTN v3, Payload Key)"},{"location":"Supported-Inputs/#the-things-network-the-things-network-data-storage-ttn-v3-payload-jmespath-expression","text":"Manufacturer: The Things Network Measurements: Variable measurements Libraries: requests, jmespath Dependencies: requests , jmespath This Input receives and stores measurements from the Data Storage Integration on The Things Network. The given Payload jmespath Expression is used as a JMESPATH expression to find the corresponding value that will be stored for that channel. Be sure you select and save the Measurement Unit for each channel. Once the unit has been saved, you can convert to other units in the Convert Measurement section. Example expressions for jmespath (https://jmespath.org) include temperature , sensors[0].temperature , and bathroom.temperature which refer to the temperature as a direct key within the first entry of sensors or as a subkey of bathroom, respectively. Jmespath elements and keys that contain special characters have to be enclosed in double quotes, e.g. \"sensor-1\".temperature . Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Start Offset (Seconds) Integer The duration to wait before the first operation Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Application ID Text The Things Network Application ID App API Key Text The Things Network Application API Key Device ID Text The Things Network Device ID Channel Options Name Text A name to distinguish this from others Payload jmespath Expression Text The TTN jmespath expression to return the value to store","title":"The Things Network: The Things Network: Data Storage (TTN v3, Payload jmespath Expression)"},{"location":"Supported-Inputs/#weather-openweathermap-city-current","text":"Manufacturer: Weather Measurements: Humidity/Temperature/Pressure/Wind Additional URL: Link Obtain a free API key at openweathermap.org. If the city you enter does not return measurements, try another city. Note: the free API subscription is limited to 60 calls per minute Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete API Key Text The API Key for this service's API City Text The city to acquire the weather data","title":"Weather: OpenWeatherMap (City, Current)"},{"location":"Supported-Inputs/#weather-openweathermap-latlon-currentfuture","text":"Manufacturer: Weather Measurements: Humidity/Temperature/Pressure/Wind Interfaces: Mycodo Additional URL: Link Obtain a free API key at openweathermap.org. Notes: The free API subscription is limited to 60 calls per minute. If a Day (Future) time is selected, Minimum and Maximum temperatures are available as measurements. Option Type Description Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete API Key Text The API Key for this service's API Latitude (decimal) Decimal - Default Value: 33.441792 The latitude to acquire weather data Longitude (decimal) Decimal - Default Value: -94.037689 The longitude to acquire weather data Time Select(Options: [ Current (Present) | 1 Day (Future) | 2 Day (Future) | 3 Day (Future) | 4 Day (Future) | 5 Day (Future) | 6 Day (Future) | 7 Day (Future) | 1 Hour (Future) | 2 Hours (Future) | 3 Hours (Future) | 4 Hours (Future) | 5 Hours (Future) | 6 Hours (Future) | 7 Hours (Future) | 8 Hours (Future) | 9 Hours (Future) | 10 Hours (Future) | 11 Hours (Future) | 12 Hours (Future) | 13 Hours (Future) | 14 Hours (Future) | 15 Hours (Future) | 16 Hours (Future) | 17 Hours (Future) | 18 Hours (Future) | 19 Hours (Future) | 20 Hours (Future) | 21 Hours (Future) | 22 Hours (Future) | 23 Hours (Future) | 24 Hours (Future) | 25 Hours (Future) | 26 Hours (Future) | 27 Hours (Future) | 28 Hours (Future) | 29 Hours (Future) | 30 Hours (Future) | 31 Hours (Future) | 32 Hours (Future) | 33 Hours (Future) | 34 Hours (Future) | 35 Hours (Future) | 36 Hours (Future) | 37 Hours (Future) | 38 Hours (Future) | 39 Hours (Future) | 40 Hours (Future) | 41 Hours (Future) | 42 Hours (Future) | 43 Hours (Future) | 44 Hours (Future) | 45 Hours (Future) | 46 Hours (Future) | 47 Hours (Future) | 48 Hours (Future)] (Default in bold ) Select the time for the current or forecast weather","title":"Weather: OpenWeatherMap (Lat/Lon, Current/Future)"},{"location":"Supported-Inputs/#winsen-mh-z14a","text":"Manufacturer: Winsen Measurements: CO2 Interfaces: UART Libraries: serial Dependencies: RPi.GPIO Manufacturer URL: Link Datasheet URL: Link Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Automatic Self-calibration Boolean - Default Value: True Enable automatic self-calibration Measurement Range Select(Options: [ 400 - 2000 ppmv | 400 - 5000 ppmv | 400 - 10000 ppmv] (Default in bold ) Set the measuring range of the sensor The CO2 measurement can also be obtained using PWM via a GPIO pin. Enter the pin number below or leave blank to disable this option. This also makes it possible to obtain measurements even if the UART interface is not available (note that the sensor can't be configured / calibrated without a working UART interface). GPIO Override Text Obtain readings using PWM on this GPIO pin instead of via UART Commands Calibrate Zero Point Button Span Point (ppmv) Integer - Default Value: 2000 The ppmv concentration for a span point calibration Calibrate Span Point Button","title":"Winsen: MH-Z14A"},{"location":"Supported-Inputs/#winsen-mh-z16","text":"Manufacturer: Winsen Measurements: CO2 Interfaces: UART, I 2 C Libraries: smbus2/serial Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Winsen: MH-Z16"},{"location":"Supported-Inputs/#winsen-mh-z19","text":"Manufacturer: Winsen Measurements: CO2 Interfaces: UART Libraries: serial Datasheet URL: Link This is the version of the sensor that does not include the ability to conduct automatic baseline correction (ABC). See the B version of the sensor if you wish to use ABC. Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Measurement Range Select(Options: [0 - 1000 ppmv | 0 - 2000 ppmv | 0 - 3000 ppmv | 0 - 5000 ppmv ] (Default in bold ) Set the measuring range of the sensor Commands Calibrate Zero Point Button Span Point (ppmv) Integer - Default Value: 2000 The ppmv concentration for a span point calibration Calibrate Span Point Button","title":"Winsen: MH-Z19"},{"location":"Supported-Inputs/#winsen-mh-z19b","text":"Manufacturer: Winsen Measurements: CO2 Interfaces: UART Libraries: serial Manufacturer URL: Link Datasheet URL: Link This is the B version of the sensor that includes the ability to conduct automatic baseline correction (ABC). Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Automatic Baseline Correction Boolean Enable automatic baseline correction (ABC) Measurement Range Select(Options: [0 - 1000 ppmv | 0 - 2000 ppmv | 0 - 3000 ppmv | 0 - 5000 ppmv | 0 - 10000 ppmv] (Default in bold ) Set the measuring range of the sensor Commands Calibrate Zero Point Button Span Point (ppmv) Integer - Default Value: 2000 The ppmv concentration for a span point calibration Calibrate Span Point Button","title":"Winsen: MH-Z19B"},{"location":"Supported-Inputs/#winsen-zh03b","text":"Manufacturer: Winsen Measurements: Particulates Interfaces: UART Libraries: serial Manufacturer URL: Link Datasheet URL: Link Option Type Description UART Device Text The UART device location (e.g. /dev/ttyUSB1) Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Fan Off After Measure Boolean Turn the fan on only during the measurement Fan On Duration (Seconds) Decimal - Default Value: 50.0 How long to turn the fan on before acquiring measurements Number of Measurements Integer - Default Value: 3 How many measurements to acquire. If more than 1 are acquired that are less than 1001, the average of the measurements will be stored.","title":"Winsen: ZH03B"},{"location":"Supported-Inputs/#xiaomi-miflora","text":"Manufacturer: Xiaomi Measurements: EC/Light/Moisture/Temperature Interfaces: BT Libraries: miflora Dependencies: libglib2.0-dev , miflora , bluepy Option Type Description Bluetooth MAC (XX:XX:XX:XX:XX:XX) Text The Hci location of the Bluetooth device. Bluetooth Adapter (hci[X]) Text The adapter of the Bluetooth device. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"Xiaomi: Miflora"},{"location":"Supported-Inputs/#xiaomi-mijia-lywsd03mmc-atc-and-non-atc-modes","text":"Manufacturer: Xiaomi Measurements: Battery/Humidity/Temperature Interfaces: BT Libraries: bluepy/bluez Dependencies: libglib2.0 , bluez , bluetooth , libbluetooth-dev , bluepy , bluetooth More information about ATC mode can be found at https://github.com/JsBergbau/MiTemperature2 Option Type Description Bluetooth MAC (XX:XX:XX:XX:XX:XX) Text The Hci location of the Bluetooth device. Bluetooth Adapter (hci[X]) Text The adapter of the Bluetooth device. Measurements Enabled Multi-Select The measurements to record Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete Enable ATC Mode Boolean Enable sensor ATC mode","title":"Xiaomi: Mijia LYWSD03MMC (ATC and non-ATC modes)"},{"location":"Supported-Inputs/#ams-as7341","text":"Manufacturer: ams Measurements: Light Interfaces: I 2 C Libraries: Adafruit-CircuitPython-AS7341 Dependencies: adafruit-extended-bus , adafruit-circuitpython-as7341 Manufacturer URL: Link Datasheet URL: Link Product URLs: Link 1 , Link 2 , Link 3 Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Period (Seconds) Decimal The duration between measurements or actions Pre Output Select Turn the selected output on before taking every measurement Pre Out Duration (Seconds) Decimal If a Pre Output is selected, set the duration to turn the Pre Output on for before every measurement is acquired. Pre During Measure Boolean Check to turn the output off after (opposed to before) the measurement is complete","title":"ams: AS7341"},{"location":"Supported-Outputs/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Built-In Outputs (System) ~ On/Off: MQTT Publish ~ Manufacturer: Mycodo Interfaces: IP Output Types: On/Off Libraries: paho-mqtt Dependencies: paho-mqtt Additional URL: Link Publish \"on\" or \"off\" (or any other strings of your choosing) to an MQTT server. Option Type Description Channel Options Hostname Text - Default Value: localhost The hostname of the MQTT server Port Integer - Default Value: 1883 The port of the MQTT server Topic Text - Default Value: paho/test/single The topic to publish with Keep Alive Integer - Default Value: 60 The keepalive timeout value for the client. Set to 0 to disable. Client ID Text - Default Value: client_6GggcCon Unique client ID for connecting to the MQTT server On Payload Text - Default Value: on The payload to send when turned on Off Payload Text - Default Value: off The payload to send when turned off Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled Use Login Boolean Send login credentials Username Text - Default Value: user Username for connecting to the server Password Text Password for connecting to the server. Leave blank to disable. Use Websockets Boolean Use websockets to connect to the server. PWM: MQTT Publish ~ Manufacturer: Mycodo Output Types: PWM Libraries: paho-mqtt Dependencies: paho-mqtt Additional URL: Link Publish a PWM value to an MQTT server. Option Type Description Channel Options Hostname Text - Default Value: localhost The hostname of the MQTT server Port Integer - Default Value: 1883 The port of the MQTT server Topic Text - Default Value: paho/test/single The topic to publish with Keep Alive Integer - Default Value: 60 The keepalive timeout value for the client. Set to 0 to disable. Client ID Text - Default Value: client_tO6tBFpx Unique client ID for connecting to the MQTT server Use Login Boolean Send login credentials Username Text - Default Value: user Username for connecting to the server Password Text Password for connecting to the server. Use Websockets Boolean Use websockets to connect to the server. Startup State Select Set the state when Mycodo starts Startup Value Decimal The value when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Shutdown Value Decimal The value when Mycodo shuts down Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Current (Amps) Decimal The current draw of the device being controlled Commands Set the Duty Cycle. Duty Cycle Decimal The duty cycle to set Set Duty Cycle Button Value: MQTT Publish ~ Manufacturer: Mycodo Output Types: Value Libraries: paho-mqtt Dependencies: paho-mqtt Additional URL: Link Publish a value to an MQTT server. Option Type Description Channel Options Hostname Text - Default Value: localhost The hostname of the MQTT server Port Integer - Default Value: 1883 The port of the MQTT server Topic Text - Default Value: paho/test/single The topic to publish with Keep Alive Integer - Default Value: 60 The keepalive timeout value for the client. Set to 0 to disable. Client ID Text - Default Value: client_4ccOuIPc Unique client ID for connecting to the MQTT server Off Value Integer The value to send when an Off command is given Use Login Boolean Send login credentials Username Text - Default Value: user Username for connecting to the server Password Text Password for connecting to the server. Use Websockets Boolean Use websockets to connect to the server. Built-In Outputs (Devices) ~ Digital Potentiometer: DS3502 ~ Manufacturer: Maxim Integrated Interfaces: I 2 C Output Types: Value Dependencies: pyusb , Adafruit_Extended_Bus , adafruit-circuitpython-ds3502 Manufacturer URL: Link Datasheet URL: Link Product URL: Link The DS3502 can generate a 0 - 10k Ohm resistance with 7-bit precision. This equates to 128 possible steps. A value, in Ohms, is passed to this output controller and the step value is calculated and passed to the device. Select whether to round up or down to the nearest step. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Round Step Select(Options: [ Up | Down] (Default in bold ) Round direction to the nearest step value Digital-to-Analog Converter: MCP4728 ~ Manufacturer: MICROCHIP Interfaces: I 2 C Output Types: Value Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-mcp4728 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. VREF (volts) Decimal - Default Value: 4.096 Set the VREF voltage Channel Options Name Text A name to distinguish this from others VREF Select(Options: [ Internal | VDD] (Default in bold ) Select the channel VREF Gain Select(Options: [ 1X | 2X] (Default in bold ) Select the channel Gain Start State Select(Options: [ Previously-Saved State | Specified Value] (Default in bold ) Select the channel start state Start Value (volts) Decimal If Specified Value is selected, set the start state value Shutdown State Select(Options: [ Previously-Saved Value | Specified Value] (Default in bold ) Select the channel shutdown state Shutdown Value (volts) Decimal If Specified Value is selected, set the shutdown state value Motor: Stepper Motor, Bipolar (Generic) (Pi <= 4) ~ Interfaces: GPIO Output Types: Value Libraries: RPi.GPIO Dependencies: RPi.GPIO Manufacturer URLs: Link 1 , Link 2 Datasheet URLs: Link 1 , Link 2 Product URLs: Link 1 , Link 2 This is a generic module for bipolar stepper motor drivers such as the DRV8825, A4988, and others. The value passed to the output is the number of steps. A positive value turns clockwise and a negative value turns counter-clockwise. Option Type Description Channel Options If the Direction or Enable pins are not used, make sure you pull the appropriate pins on your driver high or low to set the proper direction and enable the stepper motor to be energized. Note: For Enable Mode, always having the motor energized will use more energy and produce more heat. Step Pin Integer The Step pin of the controller (BCM numbering) Full Step Delay Decimal - Default Value: 0.005 The Full Step Delay of the controller Direction Pin Integer The Direction pin of the controller (BCM numbering). Set to None to disable. Enable Pin Integer The Enable pin of the controller (BCM numbering). Set to None to disable. Enable Mode Select(Options: [ Only When Turning | Always] (Default in bold ) Choose when to pull the enable pin high to energize the motor. Enable at Shutdown Select(Options: [Enable | Disable ] (Default in bold ) Choose whether the enable pin in pulled high (Enable) or low (Disable) when Mycodo shuts down. If using a Step Resolution other than Full, and all three Mode Pins are set, they will be set high (1) or how (0) according to the values in parentheses to the right of the selected Step Resolution, e.g. (Mode Pin 1, Mode Pin 2, Mode Pin 3). Step Resolution Select(Options: [ Full (modes 0, 0, 0) | Half (modes 1, 0, 0) | 1/4 (modes 0, 1, 0) | 1/8 (modes 1, 1, 0) | 1/16 (modes 0, 0, 1) | 1/32 (modes 1, 0, 1)] (Default in bold ) The Step Resolution of the controller Mode Pin 1 Integer The Mode Pin 1 of the controller (BCM numbering). Set to None to disable. Mode Pin 2 Integer The Mode Pin 2 of the controller (BCM numbering). Set to None to disable. Mode Pin 3 Integer The Mode Pin 3 of the controller (BCM numbering). Set to None to disable. Motor: ULN2003 Stepper Motor, Unipolar (Pi <= 4) ~ Manufacturer: STMicroelectronics Interfaces: GPIO Output Types: Value Libraries: RPi.GPIO, rpimotorlib Dependencies: RPi.GPIO , rpimotorlib Manufacturer URL: Link Datasheet URLs: Link 1 , Link 2 This is a module for the ULN2003 driver. Option Type Description Channel Options Notes about connecting the ULN2003... Pin IN1 Integer - Default Value: 18 The pin (BCM numbering) connected to IN1 of the ULN2003 Pin IN2 Integer - Default Value: 23 The pin (BCM numbering) connected to IN2 of the ULN2003 Pin IN3 Integer - Default Value: 24 The pin (BCM numbering) connected to IN3 of the ULN2003 Pin IN4 Integer - Default Value: 25 The pin (BCM numbering) connected to IN4 of the ULN2003 Step Delay Decimal - Default Value: 0.001 The Step Delay of the controller Notes about step resolution... Step Resolution Select(Options: [ Full | Half | Wave] (Default in bold ) The Step Resolution of the controller On/Off: Grove Multichannel Relay (4- or 8-Channel board) ~ Manufacturer: Grove Interfaces: I 2 C Output Types: On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 4 or 8 channel Grove multichannel relay board. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the relay when Mycodo starts Shutdown State Select Set the state of the relay when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled On/Off: Kasa HS300 6-Outlet WiFi Power Strip (old library, deprecated) ~ Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa Manufacturer URL: Link This output controls the 6 outlets of the Kasa HS300 Smart WiFi Power Strip. This module uses an outdated python library and is deprecated. Do not use it. You will break the current Kasa modules if you do not delete this deprecated Output. Option Type Description Host Text - Default Value: 192.168.0.50 Host or IP address Status Update (Seconds) Integer - Default Value: 60 The period between checking if connected and output states. Channel Options Name Text - Default Value: Outlet Name A name to distinguish this from others Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled On/Off: Kasa HS300 6-Outlet WiFi Power Strip ~ Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa , aio_msgpack_rpc Manufacturer URL: Link This output controls the 6 outlets of the Kasa HS300 Smart WiFi Power Strip. This is a variant that uses the latest python-kasa library. Note: if you see errors in the daemon log about the server starting, try changing the Asyncio RPC Port to another port. Option Type Description Host Text - Default Value: 0.0.0.0 Host or IP address Status Update (Seconds) Integer - Default Value: 300 The period between checking if connected and output states. 0 disables. Asyncio RPC Port Integer - Default Value: 18308 The port to start the asyncio RPC server. Must be unique from other Kasa Outputs. Channel Options Name Text - Default Value: Outlet Name A name to distinguish this from others Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled On/Off: Kasa KP303 3-Outlet WiFi Power Strip (old library, deprecated) ~ Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa Manufacturer URL: Link This output controls the 3 outlets of the Kasa KP303 Smart WiFi Power Strip. This module uses an outdated python library and is deprecated. Do not use it. You will break the current Kasa modules if you do not delete this deprecated Output. Option Type Description Host Text - Default Value: 192.168.0.50 Host or IP address Status Update (Seconds) Integer - Default Value: 60 The period between checking if connected and output states. Channel Options Name Text - Default Value: Outlet Name A name to distinguish this from others Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled On/Off: Kasa KP303 3-Outlet WiFi Power Strip ~ Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa , aio_msgpack_rpc Manufacturer URL: Link This output controls the 3 outlets of the Kasa KP303 Smart WiFi Power Strip. This is a variant that uses the latest python-kasa library. Note: if you see errors in the daemon log about the server starting, try changing the Asyncio RPC Port to another port. Option Type Description Host Text - Default Value: 0.0.0.0 Host or IP address Status Update (Seconds) Integer - Default Value: 300 The period between checking if connected and output states. 0 disables. Asyncio RPC Port Integer - Default Value: 18575 The port to start the asyncio RPC server. Must be unique from other Kasa Outputs. Channel Options Name Text - Default Value: Outlet Name A name to distinguish this from others Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled On/Off: Kasa WiFi Power Plug ~ Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa , aio_msgpack_rpc Manufacturer URL: Link This output controls Kasa WiFi Power Plugs, including the KP105, KP115, KP125, KP401, HS100, HS103, HS105, HS107, and HS110. Note: if you see errors in the daemon log about the server starting, try changing the Asyncio RPC Port to another port. Option Type Description Host Text - Default Value: 0.0.0.0 Host or IP address Status Update (Seconds) Integer - Default Value: 300 The period between checking if connected and output states. 0 disables. Asyncio RPC Port Integer - Default Value: 18331 The port to start the asyncio RPC server. Must be unique from other Kasa Outputs. Channel Options Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled On/Off: Kasa WiFi RGB Light Bulb ~ Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa , aio_msgpack_rpc Manufacturer URL: Link This output controls the the Kasa WiFi Light Bulbs, including the KL125, KL130, and KL135. Note: if you see errors in the daemon log about the server starting, try changing the Asyncio RPC Port to another port. Option Type Description Host Text - Default Value: 0.0.0.0 Host or IP address Status Update (Seconds) Integer - Default Value: 300 The period between checking if connected and output states. 0 disables. Asyncio RPC Port Integer - Default Value: 18299 The port to start the asyncio RPC server. Must be unique from other Kasa Outputs. Channel Options Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled Commands Transition (Milliseconds) Integer - Default Value: 0 The hsv transition period Brightness (Percent) Integer The brightness to set, in percent (0 - 100) Set Button Transition (Milliseconds) Integer - Default Value: 0 The hsv transition period Hue (Degree) Integer The hue to set, in degrees (0 - 360) Set Button Transition (Milliseconds) Integer - Default Value: 0 The hsv transition period Saturation (Percent) Integer The saturation to set, in percent (0 - 100) Set Button Transition (Milliseconds) Integer - Default Value: 0 The hsv transition period Color Temperature (Kelvin) Integer The color temperature to set, in degrees Kelvin Set Button Transition (Milliseconds) Integer - Default Value: 0 The hsv transition period HSV Text - Default Value: 220, 20, 45 The hue, saturation, brightness to set, e.g. \"200, 20, 50\" Set Button Transition (Milliseconds) Integer - Default Value: 1000 The transition period On Button Transition (Milliseconds) Integer - Default Value: 1000 The transition period Off Button On/Off: MCP23017 16-Channel I/O Expander ~ Manufacturer: MICROCHIP Interfaces: I 2 C Output Types: On/Off Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-mcp230xx Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 16 channels of the MCP23017. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled On/Off: Neopixel (WS2812) RGB Strip with Raspberry Pi ~ Manufacturer: Worldsemi Interfaces: GPIO Output Types: On/Off Dependencies: Output Variant 1: adafruit-circuitpython-neopixel ; Output Variant 2: adafruit-circuitpython-neopixel-spi Control the LEDs of a neopixel light strip. USE WITH CAUTION: This library uses the Hardware-PWM0 bus. Only GPIO pins 12 or 18 will work. If you use one of these pins for a NeoPixel strip, you can not use the other for Hardware-PWM control of another output or there will be conflicts that can cause the Mycodo Daemon to crash and the Pi to become unresponsive. If you need to control another PWM output like a servo, fan, or dimmable grow lights, you will need to use the Software-PWM by setting the Output PWM: Raspberry Pi GPIO and set the \"Library\" field to \"Any Pin, <=40kHz\". If you select the \"Hardware Pin, <=30MHz\" option, it will cause conflicts. This output is best used with Actions to control individual LED color and brightness. Option Type Description Data Pin Integer - Default Value: 18 Enter the GPIO Pin connected to your device data wire (BCM numbering). Number of LEDs Integer - Default Value: 1 How many LEDs in the string? On Mode Select(Options: [ Single Color | Rainbow] (Default in bold ) The color mode when turned on Single Color Text - Default Value: 30, 30, 30 The Color when turning on in Single Color Mode, RGB format (red, green, blue), 0 - 255 each. Rainbow Speed (Seconds) Decimal - Default Value: 0.01 The speed to change colors in Rainbow Mode Rainbow Brightness Integer - Default Value: 20 The maximum brightness of LEDs in Rainbow Mode (1 - 255) Rainbow Mode Select(Options: [All LEDs change at once | One LED Changes at a time ] (Default in bold ) How the rainbow is displayed Channel Options Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Commands LED Position Integer Which LED in the strip to change RGB Color Text - Default Value: 10, 0, 0 The color (e.g 10, 0, 0) Set Button On/Off: PCF8574 8-Channel I/O Expander ~ Manufacturer: Texas Instruments Interfaces: I 2 C Output Types: On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 8 channels of the PCF8574. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled On/Off: PCF8575 16-Channel I/O Expander ~ Manufacturer: Texas Instruments Interfaces: I 2 C Output Types: On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 16 channels of the PCF8575. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled On/Off: Python Code ~ Interfaces: Python Output Types: On/Off Dependencies: pylint Python 3 code will be executed when this output is turned on or off. Option Type Description Analyze Python Code with Pylint Boolean - Default Value: True Analyze your Python code with pylint when saving Channel Options On Command Python code to execute when the output is instructed to turn on Off Command Python code to execute when the output is instructed to turn off Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled On/Off: Raspberry Pi GPIO (Pi 5) ~ Interfaces: GPIO Output Types: On/Off Libraries: pinctrl The specified GPIO pin will be set HIGH (3.3 volts) or LOW (0 volts) when turned on or off, depending on the On State option. Option Type Description Channel Options Pin: GPIO (BCM) Integer The pin to control the state of Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled On/Off: Raspberry Pi GPIO (Pi <= 4) ~ Interfaces: GPIO Output Types: On/Off Libraries: RPi.GPIO Dependencies: RPi.GPIO The specified GPIO pin will be set HIGH (3.3 volts) or LOW (0 volts) when turned on or off, depending on the On State option. Option Type Description Channel Options Pin: GPIO (BCM) Integer The pin to control the state of Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled On/Off: Sequent Microsystems 8-Relay HAT for Raspberry Pi ~ Manufacturer: Sequent Microsystems Interfaces: I 2 C Output Types: On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 8 relays of the 8-relay HAT made by Sequent Microsystems. 8 of these boards can be used simultaneously, allowing 64 relays to be controlled. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Board Stack Number Select Select the board stack number when multiple boards are used Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled On/Off: Shell Script ~ Output Types: On/Off Libraries: subprocess.Popen Commands will be executed in the Linux shell by the specified user when this output is turned on or off. Option Type Description Channel Options On Command Text - Default Value: /home/pi/script_on_off.sh on Command to execute when the output is instructed to turn on Off Command Text - Default Value: /home/pi/script_on_off.sh off Command to execute when the output is instructed to turn off User Text - Default Value: mycodo The user to execute the command Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled On/Off: Sparkfun Relay Board (4 Relays) ~ Manufacturer: Sparkfun Interfaces: I 2 C Output Types: On/Off Libraries: sparkfun-qwiic-relay Dependencies: sparkfun-qwiic-relay Manufacturer URL: Link Product URLs: Link 1 , Link 2 Controls the 4 relays of the relay module. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled On/Off: Wireless 315/433 MHz (Pi <= 4) ~ Interfaces: GPIO Output Types: On/Off Libraries: rpi-rf Dependencies: RPi.GPIO , rpi_rf This output uses a 315 or 433 MHz transmitter to turn wireless power outlets on or off. Run /opt/Mycodo/mycodo/devices/wireless_rpi_rf.py with a receiver to discover the codes produced from your remote. Option Type Description Channel Options Pin: GPIO (BCM) Integer The pin to control the state of On Command Text - Default Value: 22559 Command to execute when the output is instructed to turn on Off Command Text - Default Value: 22558 Command to execute when the output is instructed to turn off Protocol Select(Options: [ 1 | 2 | 3 | 4 | 5] (Default in bold ) Pulse Length Integer - Default Value: 189 Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled On/Off: XL9535 16-Channel I/O Expander ~ Manufacturer: Texas Instruments Interfaces: I 2 C Output Types: On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 16 channels of the XL9535. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled PWM: PCA9685 16-Channel LED Controller ~ Manufacturer: NXP Semiconductors Interfaces: I 2 C Output Types: PWM Libraries: adafruit-pca9685 Dependencies: adafruit-pca9685 Manufacturer URL: Link Datasheet URL: Link Product URL: Link The PCA9685 can output a PWM signal to 16 channels at a frequency between 40 and 1600 Hz. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Frequency (Hertz) Integer - Default Value: 1600 The Herts to output the PWM signal (40 - 1600) Channel Options Name Text A name to distinguish this from others Startup State Select Set the state when Mycodo starts Startup Value Decimal The value when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Shutdown Value Decimal The value when Mycodo shuts down Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Current (Amps) Decimal The current draw of the device being controlled PWM: Python 3 Code ~ Interfaces: Python Output Types: PWM Dependencies: pylint Python 3 code will be executed when this output is turned on or off. The \"duty_cycle\" object is a float value that represents the duty cycle that has been set. Option Type Description Analyze Python Code with Pylint Boolean - Default Value: True Analyze your Python code with pylint when saving Channel Options Python 3 Code Python code to execute to set the PWM duty cycle (%) User Text - Default Value: mycodo The user to execute the command Startup State Select Set the state when Mycodo starts Startup Value Decimal The value when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Shutdown Value Decimal The value when Mycodo shuts down Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled Commands Set the Duty Cycle. Duty Cycle Decimal The duty cycle to set Set Duty Cycle Button PWM: Raspberry Pi GPIO (Pi <= 4) ~ Interfaces: GPIO Output Types: PWM Libraries: pigpio Dependencies: pigpio, pigpio See the PWM section of the manual for PWM information and determining which pins may be used for each library option. Option Type Description Channel Options Pin: GPIO (BCM) Integer The pin to control the state of Startup State Select Set the state when Mycodo starts Startup Value Decimal The value when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Shutdown Value Decimal The value when Mycodo shuts down Library Select(Options: [ Any Pin, < = 40 kHz | Hardware Pin, < = 30 MHz] (Default in bold ) Which method to produce the PWM signal (hardware pins can produce higher frequencies) Frequency (Hertz) Integer - Default Value: 22000 The Herts to output the PWM signal (0 - 70,000) Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Current (Amps) Decimal The current draw of the device being controlled Commands Set the Duty Cycle. Duty Cycle Decimal The duty cycle to set Set Duty Cycle Button PWM: Shell Script ~ Interfaces: Shell Output Types: PWM Libraries: subprocess.Popen Commands will be executed in the Linux shell by the specified user when the duty cycle is set for this output. The string \"((duty_cycle))\" in the command will be replaced with the duty cycle being set prior to execution. Option Type Description Channel Options Bash Command Text - Default Value: /home/pi/script_pwm.sh ((duty_cycle)) Command to execute to set the PWM duty cycle (%) User Text - Default Value: mycodo The user to execute the command Startup State Select Set the state when Mycodo starts Startup Value Decimal The value when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Shutdown Value Decimal The value when Mycodo shuts down Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled Peristaltic Pump: Atlas Scientific ~ Manufacturer: Atlas Scientific Interfaces: I 2 C, UART, FTDI Output Types: Volume, On/Off Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Product URL: Link Atlas Scientific peristaltic pumps can be set to dispense at their maximum rate or a rate can be specified. Their minimum flow rate is 0.5 ml/min and their maximum is 105 ml/min. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Channel Options Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Current (Amps) Decimal The current draw of the device being controlled Commands Calibration: a calibration can be performed to increase the accuracy of the pump. It's a good idea to clear the calibration before calibrating. First, remove all air from the line by pumping the fluid you would like to calibrate to through the pump hose. Next, press Dispense Amount and the pump will be instructed to dispense 10 ml (unless you changed the default value). Measure how much fluid was actually dispensed, enter this value in the Actual Volume Dispensed (ml) field, and press Calibrate to Dispensed Amount. Now any further pump volumes dispensed should be accurate. Clear Calibration Button Volume to Dispense (ml) Decimal - Default Value: 10.0 The volume (ml) that is instructed to be dispensed Dispense Amount Button Actual Volume Dispensed (ml) Decimal - Default Value: 10.0 The actual volume (ml) that was dispensed Calibrate to Dispensed Amount Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x67 The new I2C to set the device to Set I2C Address Button Peristaltic Pump: Grove I2C Motor Driver (Board v1.3) ~ Manufacturer: Grove Interfaces: I 2 C Output Types: Volume, On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Controls the Grove I2C Motor Driver Board (v1.3). Both motors will turn at the same time. This output can also dispense volumes of fluid if the motors are attached to peristaltic pumps. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Motor Speed (0 - 100) Integer - Default Value: 100 The motor output that determines the speed Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Fastest Rate (ml/min) Decimal - Default Value: 100.0 The fastest rate that the pump can dispense (ml/min) Peristaltic Pump: Grove I2C Motor Driver (TB6612FNG, Board v1.0) ~ Manufacturer: Grove Interfaces: I 2 C Output Types: Volume, On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Controls the Grove I2C Motor Driver Board (v1.3). Both motors will turn at the same time. This output can also dispense volumes of fluid if the motors are attached to peristaltic pumps. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Motor Speed (0 - 255) Integer - Default Value: 255 The motor output that determines the speed Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Fastest Rate (ml/min) Decimal - Default Value: 100.0 The fastest rate that the pump can dispense (ml/min) Minimum On (Seconds) Decimal - Default Value: 1.0 The minimum duration the pump turns on for every 60 second period (only used for Specify Flow Rate mode). Commands New I2C Address Text - Default Value: 0x14 The new I2C to set the sensor to Set I2C Address Button Peristaltic Pump: L298N DC Motor Controller (Pi <= 4) ~ Manufacturer: STMicroelectronics Interfaces: GPIO Output Types: Volume, On/Off Libraries: RPi.GPIO Dependencies: RPi.GPIO Additional URL: Link The L298N can control 2 DC motors, both speed and direction. If these motors control peristaltic pumps, set the Flow Rate and the output can can be instructed to dispense volumes accurately in addition to being turned on for durations. Option Type Description Channel Options Name Text A name to distinguish this from others Input Pin 1 Integer The Input Pin 1 of the controller (BCM numbering) Input Pin 2 Integer The Input Pin 2 of the controller (BCM numbering) Use Enable Pin Boolean - Default Value: True Enable the use of the Enable Pin Enable Pin Integer The Enable pin of the controller (BCM numbering) Enable Pin Duty Cycle Integer - Default Value: 50 The duty cycle to apply to the Enable Pin (percent, 1 - 100) Direction Select(Options: [ Forward | Backward] (Default in bold ) The direction to turn the motor Volume Rate (ml/min) Decimal - Default Value: 150.0 If a pump, the measured flow rate (ml/min) at the set Duty Cycle Peristaltic Pump: MCP23017 16-Channel I/O Expander ~ Manufacturer: MICROCHIP Interfaces: I 2 C Output Types: Volume, On/Off Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-mcp230xx Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 16 channels of the MCP23017 with a relay and peristaltic pump connected to each channel. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the output channel that corresponds to the pump being on Fastest Rate (ml/min) Decimal - Default Value: 150.0 The fastest rate that the pump can dispense (ml/min) Minimum On (Seconds) Decimal - Default Value: 1.0 The minimum duration the pump should be turned on for every 60 second period Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Current (Amps) Decimal The current draw of the device being controlled Peristaltic Pump: PCF8574 8-Channel I/O Expander ~ Manufacturer: Texas Instruments Interfaces: I 2 C Output Types: Volume, On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 8 channels of the PCF8574 with a relay and peristaltic pump connected to each channel. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the output channel that corresponds to the pump being on Fastest Rate (ml/min) Decimal - Default Value: 150.0 The fastest rate that the pump can dispense (ml/min) Minimum On (Seconds) Decimal - Default Value: 1.0 The minimum duration the pump should be turned on for every 60 second period Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Current (Amps) Decimal The current draw of the device being controlled Peristaltic Pump: Raspberry Pi GPIO (Pi <= 4) ~ Interfaces: GPIO Output Types: Volume, On/Off Libraries: RPi.GPIO Dependencies: RPi.GPIO This output turns a GPIO pin HIGH and LOW to control power to a generic peristaltic pump. The peristaltic pump can then be turned on for a duration or, after determining the pump's maximum flow rate, instructed to dispense a specific volume at the maximum rate or at a specified rate. Option Type Description Channel Options Pin: GPIO (BCM) Integer The pin to control the state of On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Fastest Rate (ml/min) Decimal - Default Value: 150.0 The fastest rate that the pump can dispense (ml/min) Minimum On (Seconds) Decimal - Default Value: 1.0 The minimum duration the pump should be turned on for every 60 second period Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Current (Amps) Decimal The current draw of the device being controlled Remote Mycodo Output: On/Off ~ Interfaces: API Output Types: On/Off Libraries: requests Dependencies: requests This Output allows remote control of another Mycodo On/Off Output over a network using the API. Option Type Description Remote Mycodo Host Text The host or IP address of the remote Mycodo Remote Mycodo API Key Text The API key of the remote Mycodo State Query Period (Seconds) Integer - Default Value: 120 How often to query the state of the output Channel Options Remote Mycodo Output The Remote Mycodo Output to control Startup State Select(Options: [ Do Nothing | Off | On] (Default in bold ) Set the state when Mycodo starts Shutdown State Select(Options: [ Do Nothing | Off | On] (Default in bold ) Set the state when Mycodo shuts down Force Command Boolean Always send the command if instructed, regardless of the current state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Remote Mycodo Output: PWM ~ Interfaces: API Output Types: PWM Libraries: requests Dependencies: requests This Output allows remote control of another Mycodo PWM Output over a network using the API. Option Type Description Remote Mycodo Host Text The host or IP address of the remote Mycodo Remote Mycodo API Key Text The API key of the remote Mycodo State Query Period (Seconds) Integer - Default Value: 120 How often to query the state of the output Channel Options Remote Mycodo Output The Remote Mycodo Output to control Startup State Select Set the state when Mycodo starts Start Duty Cycle Decimal The duty cycle to set at startup, if enabled Shutdown State Select Set the state when Mycodo shuts down Shutdown Duty Cycle Decimal The duty cycle to set at shutdown, if enabled Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Commands Set the Duty Cycle. Duty Cycle Decimal The duty cycle to set Set Duty Cycle Button Spacer ~ A spacer to organize Outputs. Option Type Description Color Text - Default Value: #000000 The color of the name text Value: GP8XXX (8413, 8403) 2-Channel DAC: 0-10 VDC ~ Manufacturer: DFRobot Interfaces: I 2 C Output Types: Value Libraries: GP8XXX-IIC Dependencies: smbus2 , GP8XXX-IIC Datasheet URLs: Link 1 , Link 2 Product URLs: Link 1 , Link 2 Output 0 to 10 VDC signal. GP8403: 12bit DAC Dual Channel I2C to 0-5V/0-10V | GP8413: 15bit DAC Dual Channel I2C to 0-10V Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Device Select(Options: [ GP8403 12-bit | GP8413 15-bit] (Default in bold ) Select your GP8XXX device Channel Options Start State Select(Options: [Previously-Saved State | Specified Value ] (Default in bold ) Select the channel start state Start Value (volts) Decimal If Specified Value is selected, set the start state value Shutdown State Select(Options: [Previously-Saved Value | Specified Value ] (Default in bold ) Select the channel shutdown state Shutdown Value (volts) Decimal If Specified Value is selected, set the shutdown state value Off Value (volts) Decimal If Specified Value to apply when turned off","title":"Supported Outputs"},{"location":"Supported-Outputs/#built-in-outputs-system","text":"","title":"Built-In Outputs (System)"},{"location":"Supported-Outputs/#onoff-mqtt-publish","text":"Manufacturer: Mycodo Interfaces: IP Output Types: On/Off Libraries: paho-mqtt Dependencies: paho-mqtt Additional URL: Link Publish \"on\" or \"off\" (or any other strings of your choosing) to an MQTT server. Option Type Description Channel Options Hostname Text - Default Value: localhost The hostname of the MQTT server Port Integer - Default Value: 1883 The port of the MQTT server Topic Text - Default Value: paho/test/single The topic to publish with Keep Alive Integer - Default Value: 60 The keepalive timeout value for the client. Set to 0 to disable. Client ID Text - Default Value: client_6GggcCon Unique client ID for connecting to the MQTT server On Payload Text - Default Value: on The payload to send when turned on Off Payload Text - Default Value: off The payload to send when turned off Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled Use Login Boolean Send login credentials Username Text - Default Value: user Username for connecting to the server Password Text Password for connecting to the server. Leave blank to disable. Use Websockets Boolean Use websockets to connect to the server.","title":"On/Off: MQTT Publish"},{"location":"Supported-Outputs/#pwm-mqtt-publish","text":"Manufacturer: Mycodo Output Types: PWM Libraries: paho-mqtt Dependencies: paho-mqtt Additional URL: Link Publish a PWM value to an MQTT server. Option Type Description Channel Options Hostname Text - Default Value: localhost The hostname of the MQTT server Port Integer - Default Value: 1883 The port of the MQTT server Topic Text - Default Value: paho/test/single The topic to publish with Keep Alive Integer - Default Value: 60 The keepalive timeout value for the client. Set to 0 to disable. Client ID Text - Default Value: client_tO6tBFpx Unique client ID for connecting to the MQTT server Use Login Boolean Send login credentials Username Text - Default Value: user Username for connecting to the server Password Text Password for connecting to the server. Use Websockets Boolean Use websockets to connect to the server. Startup State Select Set the state when Mycodo starts Startup Value Decimal The value when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Shutdown Value Decimal The value when Mycodo shuts down Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Current (Amps) Decimal The current draw of the device being controlled Commands Set the Duty Cycle. Duty Cycle Decimal The duty cycle to set Set Duty Cycle Button","title":"PWM: MQTT Publish"},{"location":"Supported-Outputs/#value-mqtt-publish","text":"Manufacturer: Mycodo Output Types: Value Libraries: paho-mqtt Dependencies: paho-mqtt Additional URL: Link Publish a value to an MQTT server. Option Type Description Channel Options Hostname Text - Default Value: localhost The hostname of the MQTT server Port Integer - Default Value: 1883 The port of the MQTT server Topic Text - Default Value: paho/test/single The topic to publish with Keep Alive Integer - Default Value: 60 The keepalive timeout value for the client. Set to 0 to disable. Client ID Text - Default Value: client_4ccOuIPc Unique client ID for connecting to the MQTT server Off Value Integer The value to send when an Off command is given Use Login Boolean Send login credentials Username Text - Default Value: user Username for connecting to the server Password Text Password for connecting to the server. Use Websockets Boolean Use websockets to connect to the server.","title":"Value: MQTT Publish"},{"location":"Supported-Outputs/#built-in-outputs-devices","text":"","title":"Built-In Outputs (Devices)"},{"location":"Supported-Outputs/#digital-potentiometer-ds3502","text":"Manufacturer: Maxim Integrated Interfaces: I 2 C Output Types: Value Dependencies: pyusb , Adafruit_Extended_Bus , adafruit-circuitpython-ds3502 Manufacturer URL: Link Datasheet URL: Link Product URL: Link The DS3502 can generate a 0 - 10k Ohm resistance with 7-bit precision. This equates to 128 possible steps. A value, in Ohms, is passed to this output controller and the step value is calculated and passed to the device. Select whether to round up or down to the nearest step. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Round Step Select(Options: [ Up | Down] (Default in bold ) Round direction to the nearest step value","title":"Digital Potentiometer: DS3502"},{"location":"Supported-Outputs/#digital-to-analog-converter-mcp4728","text":"Manufacturer: MICROCHIP Interfaces: I 2 C Output Types: Value Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-mcp4728 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. VREF (volts) Decimal - Default Value: 4.096 Set the VREF voltage Channel Options Name Text A name to distinguish this from others VREF Select(Options: [ Internal | VDD] (Default in bold ) Select the channel VREF Gain Select(Options: [ 1X | 2X] (Default in bold ) Select the channel Gain Start State Select(Options: [ Previously-Saved State | Specified Value] (Default in bold ) Select the channel start state Start Value (volts) Decimal If Specified Value is selected, set the start state value Shutdown State Select(Options: [ Previously-Saved Value | Specified Value] (Default in bold ) Select the channel shutdown state Shutdown Value (volts) Decimal If Specified Value is selected, set the shutdown state value","title":"Digital-to-Analog Converter: MCP4728"},{"location":"Supported-Outputs/#motor-stepper-motor-bipolar-generic-pi-4","text":"Interfaces: GPIO Output Types: Value Libraries: RPi.GPIO Dependencies: RPi.GPIO Manufacturer URLs: Link 1 , Link 2 Datasheet URLs: Link 1 , Link 2 Product URLs: Link 1 , Link 2 This is a generic module for bipolar stepper motor drivers such as the DRV8825, A4988, and others. The value passed to the output is the number of steps. A positive value turns clockwise and a negative value turns counter-clockwise. Option Type Description Channel Options If the Direction or Enable pins are not used, make sure you pull the appropriate pins on your driver high or low to set the proper direction and enable the stepper motor to be energized. Note: For Enable Mode, always having the motor energized will use more energy and produce more heat. Step Pin Integer The Step pin of the controller (BCM numbering) Full Step Delay Decimal - Default Value: 0.005 The Full Step Delay of the controller Direction Pin Integer The Direction pin of the controller (BCM numbering). Set to None to disable. Enable Pin Integer The Enable pin of the controller (BCM numbering). Set to None to disable. Enable Mode Select(Options: [ Only When Turning | Always] (Default in bold ) Choose when to pull the enable pin high to energize the motor. Enable at Shutdown Select(Options: [Enable | Disable ] (Default in bold ) Choose whether the enable pin in pulled high (Enable) or low (Disable) when Mycodo shuts down. If using a Step Resolution other than Full, and all three Mode Pins are set, they will be set high (1) or how (0) according to the values in parentheses to the right of the selected Step Resolution, e.g. (Mode Pin 1, Mode Pin 2, Mode Pin 3). Step Resolution Select(Options: [ Full (modes 0, 0, 0) | Half (modes 1, 0, 0) | 1/4 (modes 0, 1, 0) | 1/8 (modes 1, 1, 0) | 1/16 (modes 0, 0, 1) | 1/32 (modes 1, 0, 1)] (Default in bold ) The Step Resolution of the controller Mode Pin 1 Integer The Mode Pin 1 of the controller (BCM numbering). Set to None to disable. Mode Pin 2 Integer The Mode Pin 2 of the controller (BCM numbering). Set to None to disable. Mode Pin 3 Integer The Mode Pin 3 of the controller (BCM numbering). Set to None to disable.","title":"Motor: Stepper Motor, Bipolar (Generic) (Pi &lt;= 4)"},{"location":"Supported-Outputs/#motor-uln2003-stepper-motor-unipolar-pi-4","text":"Manufacturer: STMicroelectronics Interfaces: GPIO Output Types: Value Libraries: RPi.GPIO, rpimotorlib Dependencies: RPi.GPIO , rpimotorlib Manufacturer URL: Link Datasheet URLs: Link 1 , Link 2 This is a module for the ULN2003 driver. Option Type Description Channel Options Notes about connecting the ULN2003... Pin IN1 Integer - Default Value: 18 The pin (BCM numbering) connected to IN1 of the ULN2003 Pin IN2 Integer - Default Value: 23 The pin (BCM numbering) connected to IN2 of the ULN2003 Pin IN3 Integer - Default Value: 24 The pin (BCM numbering) connected to IN3 of the ULN2003 Pin IN4 Integer - Default Value: 25 The pin (BCM numbering) connected to IN4 of the ULN2003 Step Delay Decimal - Default Value: 0.001 The Step Delay of the controller Notes about step resolution... Step Resolution Select(Options: [ Full | Half | Wave] (Default in bold ) The Step Resolution of the controller","title":"Motor: ULN2003 Stepper Motor, Unipolar (Pi &lt;= 4)"},{"location":"Supported-Outputs/#onoff-grove-multichannel-relay-4-or-8-channel-board","text":"Manufacturer: Grove Interfaces: I 2 C Output Types: On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 4 or 8 channel Grove multichannel relay board. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the relay when Mycodo starts Shutdown State Select Set the state of the relay when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Grove Multichannel Relay (4- or 8-Channel board)"},{"location":"Supported-Outputs/#onoff-kasa-hs300-6-outlet-wifi-power-strip-old-library-deprecated","text":"Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa Manufacturer URL: Link This output controls the 6 outlets of the Kasa HS300 Smart WiFi Power Strip. This module uses an outdated python library and is deprecated. Do not use it. You will break the current Kasa modules if you do not delete this deprecated Output. Option Type Description Host Text - Default Value: 192.168.0.50 Host or IP address Status Update (Seconds) Integer - Default Value: 60 The period between checking if connected and output states. Channel Options Name Text - Default Value: Outlet Name A name to distinguish this from others Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Kasa HS300 6-Outlet WiFi Power Strip (old library, deprecated)"},{"location":"Supported-Outputs/#onoff-kasa-hs300-6-outlet-wifi-power-strip","text":"Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa , aio_msgpack_rpc Manufacturer URL: Link This output controls the 6 outlets of the Kasa HS300 Smart WiFi Power Strip. This is a variant that uses the latest python-kasa library. Note: if you see errors in the daemon log about the server starting, try changing the Asyncio RPC Port to another port. Option Type Description Host Text - Default Value: 0.0.0.0 Host or IP address Status Update (Seconds) Integer - Default Value: 300 The period between checking if connected and output states. 0 disables. Asyncio RPC Port Integer - Default Value: 18308 The port to start the asyncio RPC server. Must be unique from other Kasa Outputs. Channel Options Name Text - Default Value: Outlet Name A name to distinguish this from others Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Kasa HS300 6-Outlet WiFi Power Strip"},{"location":"Supported-Outputs/#onoff-kasa-kp303-3-outlet-wifi-power-strip-old-library-deprecated","text":"Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa Manufacturer URL: Link This output controls the 3 outlets of the Kasa KP303 Smart WiFi Power Strip. This module uses an outdated python library and is deprecated. Do not use it. You will break the current Kasa modules if you do not delete this deprecated Output. Option Type Description Host Text - Default Value: 192.168.0.50 Host or IP address Status Update (Seconds) Integer - Default Value: 60 The period between checking if connected and output states. Channel Options Name Text - Default Value: Outlet Name A name to distinguish this from others Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Kasa KP303 3-Outlet WiFi Power Strip (old library, deprecated)"},{"location":"Supported-Outputs/#onoff-kasa-kp303-3-outlet-wifi-power-strip","text":"Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa , aio_msgpack_rpc Manufacturer URL: Link This output controls the 3 outlets of the Kasa KP303 Smart WiFi Power Strip. This is a variant that uses the latest python-kasa library. Note: if you see errors in the daemon log about the server starting, try changing the Asyncio RPC Port to another port. Option Type Description Host Text - Default Value: 0.0.0.0 Host or IP address Status Update (Seconds) Integer - Default Value: 300 The period between checking if connected and output states. 0 disables. Asyncio RPC Port Integer - Default Value: 18575 The port to start the asyncio RPC server. Must be unique from other Kasa Outputs. Channel Options Name Text - Default Value: Outlet Name A name to distinguish this from others Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Kasa KP303 3-Outlet WiFi Power Strip"},{"location":"Supported-Outputs/#onoff-kasa-wifi-power-plug","text":"Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa , aio_msgpack_rpc Manufacturer URL: Link This output controls Kasa WiFi Power Plugs, including the KP105, KP115, KP125, KP401, HS100, HS103, HS105, HS107, and HS110. Note: if you see errors in the daemon log about the server starting, try changing the Asyncio RPC Port to another port. Option Type Description Host Text - Default Value: 0.0.0.0 Host or IP address Status Update (Seconds) Integer - Default Value: 300 The period between checking if connected and output states. 0 disables. Asyncio RPC Port Integer - Default Value: 18331 The port to start the asyncio RPC server. Must be unique from other Kasa Outputs. Channel Options Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Kasa WiFi Power Plug"},{"location":"Supported-Outputs/#onoff-kasa-wifi-rgb-light-bulb","text":"Manufacturer: TP-Link Interfaces: IP Output Types: On/Off Dependencies: python-kasa , aio_msgpack_rpc Manufacturer URL: Link This output controls the the Kasa WiFi Light Bulbs, including the KL125, KL130, and KL135. Note: if you see errors in the daemon log about the server starting, try changing the Asyncio RPC Port to another port. Option Type Description Host Text - Default Value: 0.0.0.0 Host or IP address Status Update (Seconds) Integer - Default Value: 300 The period between checking if connected and output states. 0 disables. Asyncio RPC Port Integer - Default Value: 18299 The port to start the asyncio RPC server. Must be unique from other Kasa Outputs. Channel Options Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled Commands Transition (Milliseconds) Integer - Default Value: 0 The hsv transition period Brightness (Percent) Integer The brightness to set, in percent (0 - 100) Set Button Transition (Milliseconds) Integer - Default Value: 0 The hsv transition period Hue (Degree) Integer The hue to set, in degrees (0 - 360) Set Button Transition (Milliseconds) Integer - Default Value: 0 The hsv transition period Saturation (Percent) Integer The saturation to set, in percent (0 - 100) Set Button Transition (Milliseconds) Integer - Default Value: 0 The hsv transition period Color Temperature (Kelvin) Integer The color temperature to set, in degrees Kelvin Set Button Transition (Milliseconds) Integer - Default Value: 0 The hsv transition period HSV Text - Default Value: 220, 20, 45 The hue, saturation, brightness to set, e.g. \"200, 20, 50\" Set Button Transition (Milliseconds) Integer - Default Value: 1000 The transition period On Button Transition (Milliseconds) Integer - Default Value: 1000 The transition period Off Button","title":"On/Off: Kasa WiFi RGB Light Bulb"},{"location":"Supported-Outputs/#onoff-mcp23017-16-channel-io-expander","text":"Manufacturer: MICROCHIP Interfaces: I 2 C Output Types: On/Off Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-mcp230xx Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 16 channels of the MCP23017. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: MCP23017 16-Channel I/O Expander"},{"location":"Supported-Outputs/#onoff-neopixel-ws2812-rgb-strip-with-raspberry-pi","text":"Manufacturer: Worldsemi Interfaces: GPIO Output Types: On/Off Dependencies: Output Variant 1: adafruit-circuitpython-neopixel ; Output Variant 2: adafruit-circuitpython-neopixel-spi Control the LEDs of a neopixel light strip. USE WITH CAUTION: This library uses the Hardware-PWM0 bus. Only GPIO pins 12 or 18 will work. If you use one of these pins for a NeoPixel strip, you can not use the other for Hardware-PWM control of another output or there will be conflicts that can cause the Mycodo Daemon to crash and the Pi to become unresponsive. If you need to control another PWM output like a servo, fan, or dimmable grow lights, you will need to use the Software-PWM by setting the Output PWM: Raspberry Pi GPIO and set the \"Library\" field to \"Any Pin, <=40kHz\". If you select the \"Hardware Pin, <=30MHz\" option, it will cause conflicts. This output is best used with Actions to control individual LED color and brightness. Option Type Description Data Pin Integer - Default Value: 18 Enter the GPIO Pin connected to your device data wire (BCM numbering). Number of LEDs Integer - Default Value: 1 How many LEDs in the string? On Mode Select(Options: [ Single Color | Rainbow] (Default in bold ) The color mode when turned on Single Color Text - Default Value: 30, 30, 30 The Color when turning on in Single Color Mode, RGB format (red, green, blue), 0 - 255 each. Rainbow Speed (Seconds) Decimal - Default Value: 0.01 The speed to change colors in Rainbow Mode Rainbow Brightness Integer - Default Value: 20 The maximum brightness of LEDs in Rainbow Mode (1 - 255) Rainbow Mode Select(Options: [All LEDs change at once | One LED Changes at a time ] (Default in bold ) How the rainbow is displayed Channel Options Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Commands LED Position Integer Which LED in the strip to change RGB Color Text - Default Value: 10, 0, 0 The color (e.g 10, 0, 0) Set Button","title":"On/Off: Neopixel (WS2812) RGB Strip with Raspberry Pi"},{"location":"Supported-Outputs/#onoff-pcf8574-8-channel-io-expander","text":"Manufacturer: Texas Instruments Interfaces: I 2 C Output Types: On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 8 channels of the PCF8574. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: PCF8574 8-Channel I/O Expander"},{"location":"Supported-Outputs/#onoff-pcf8575-16-channel-io-expander","text":"Manufacturer: Texas Instruments Interfaces: I 2 C Output Types: On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 16 channels of the PCF8575. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: PCF8575 16-Channel I/O Expander"},{"location":"Supported-Outputs/#onoff-python-code","text":"Interfaces: Python Output Types: On/Off Dependencies: pylint Python 3 code will be executed when this output is turned on or off. Option Type Description Analyze Python Code with Pylint Boolean - Default Value: True Analyze your Python code with pylint when saving Channel Options On Command Python code to execute when the output is instructed to turn on Off Command Python code to execute when the output is instructed to turn off Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Python Code"},{"location":"Supported-Outputs/#onoff-raspberry-pi-gpio-pi-5","text":"Interfaces: GPIO Output Types: On/Off Libraries: pinctrl The specified GPIO pin will be set HIGH (3.3 volts) or LOW (0 volts) when turned on or off, depending on the On State option. Option Type Description Channel Options Pin: GPIO (BCM) Integer The pin to control the state of Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Raspberry Pi GPIO (Pi 5)"},{"location":"Supported-Outputs/#onoff-raspberry-pi-gpio-pi-4","text":"Interfaces: GPIO Output Types: On/Off Libraries: RPi.GPIO Dependencies: RPi.GPIO The specified GPIO pin will be set HIGH (3.3 volts) or LOW (0 volts) when turned on or off, depending on the On State option. Option Type Description Channel Options Pin: GPIO (BCM) Integer The pin to control the state of Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Raspberry Pi GPIO (Pi &lt;= 4)"},{"location":"Supported-Outputs/#onoff-sequent-microsystems-8-relay-hat-for-raspberry-pi","text":"Manufacturer: Sequent Microsystems Interfaces: I 2 C Output Types: On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 8 relays of the 8-relay HAT made by Sequent Microsystems. 8 of these boards can be used simultaneously, allowing 64 relays to be controlled. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Board Stack Number Select Select the board stack number when multiple boards are used Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Sequent Microsystems 8-Relay HAT for Raspberry Pi"},{"location":"Supported-Outputs/#onoff-shell-script","text":"Output Types: On/Off Libraries: subprocess.Popen Commands will be executed in the Linux shell by the specified user when this output is turned on or off. Option Type Description Channel Options On Command Text - Default Value: /home/pi/script_on_off.sh on Command to execute when the output is instructed to turn on Off Command Text - Default Value: /home/pi/script_on_off.sh off Command to execute when the output is instructed to turn off User Text - Default Value: mycodo The user to execute the command Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Shell Script"},{"location":"Supported-Outputs/#onoff-sparkfun-relay-board-4-relays","text":"Manufacturer: Sparkfun Interfaces: I 2 C Output Types: On/Off Libraries: sparkfun-qwiic-relay Dependencies: sparkfun-qwiic-relay Manufacturer URL: Link Product URLs: Link 1 , Link 2 Controls the 4 relays of the relay module. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Sparkfun Relay Board (4 Relays)"},{"location":"Supported-Outputs/#onoff-wireless-315433-mhz-pi-4","text":"Interfaces: GPIO Output Types: On/Off Libraries: rpi-rf Dependencies: RPi.GPIO , rpi_rf This output uses a 315 or 433 MHz transmitter to turn wireless power outlets on or off. Run /opt/Mycodo/mycodo/devices/wireless_rpi_rf.py with a receiver to discover the codes produced from your remote. Option Type Description Channel Options Pin: GPIO (BCM) Integer The pin to control the state of On Command Text - Default Value: 22559 Command to execute when the output is instructed to turn on Off Command Text - Default Value: 22558 Command to execute when the output is instructed to turn off Protocol Select(Options: [ 1 | 2 | 3 | 4 | 5] (Default in bold ) Pulse Length Integer - Default Value: 189 Startup State Select Set the state when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Force Command Boolean Always send the command, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: Wireless 315/433 MHz (Pi &lt;= 4)"},{"location":"Supported-Outputs/#onoff-xl9535-16-channel-io-expander","text":"Manufacturer: Texas Instruments Interfaces: I 2 C Output Types: On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 16 channels of the XL9535. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Startup State Select Set the state of the GPIO when Mycodo starts Shutdown State Select Set the state of the GPIO when Mycodo shuts down On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup Current (Amps) Decimal The current draw of the device being controlled","title":"On/Off: XL9535 16-Channel I/O Expander"},{"location":"Supported-Outputs/#pwm-pca9685-16-channel-led-controller","text":"Manufacturer: NXP Semiconductors Interfaces: I 2 C Output Types: PWM Libraries: adafruit-pca9685 Dependencies: adafruit-pca9685 Manufacturer URL: Link Datasheet URL: Link Product URL: Link The PCA9685 can output a PWM signal to 16 channels at a frequency between 40 and 1600 Hz. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Frequency (Hertz) Integer - Default Value: 1600 The Herts to output the PWM signal (40 - 1600) Channel Options Name Text A name to distinguish this from others Startup State Select Set the state when Mycodo starts Startup Value Decimal The value when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Shutdown Value Decimal The value when Mycodo shuts down Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Current (Amps) Decimal The current draw of the device being controlled","title":"PWM: PCA9685 16-Channel LED Controller"},{"location":"Supported-Outputs/#pwm-python-3-code","text":"Interfaces: Python Output Types: PWM Dependencies: pylint Python 3 code will be executed when this output is turned on or off. The \"duty_cycle\" object is a float value that represents the duty cycle that has been set. Option Type Description Analyze Python Code with Pylint Boolean - Default Value: True Analyze your Python code with pylint when saving Channel Options Python 3 Code Python code to execute to set the PWM duty cycle (%) User Text - Default Value: mycodo The user to execute the command Startup State Select Set the state when Mycodo starts Startup Value Decimal The value when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Shutdown Value Decimal The value when Mycodo shuts down Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled Commands Set the Duty Cycle. Duty Cycle Decimal The duty cycle to set Set Duty Cycle Button","title":"PWM: Python 3 Code"},{"location":"Supported-Outputs/#pwm-raspberry-pi-gpio-pi-4","text":"Interfaces: GPIO Output Types: PWM Libraries: pigpio Dependencies: pigpio, pigpio See the PWM section of the manual for PWM information and determining which pins may be used for each library option. Option Type Description Channel Options Pin: GPIO (BCM) Integer The pin to control the state of Startup State Select Set the state when Mycodo starts Startup Value Decimal The value when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Shutdown Value Decimal The value when Mycodo shuts down Library Select(Options: [ Any Pin, < = 40 kHz | Hardware Pin, < = 30 MHz] (Default in bold ) Which method to produce the PWM signal (hardware pins can produce higher frequencies) Frequency (Hertz) Integer - Default Value: 22000 The Herts to output the PWM signal (0 - 70,000) Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Current (Amps) Decimal The current draw of the device being controlled Commands Set the Duty Cycle. Duty Cycle Decimal The duty cycle to set Set Duty Cycle Button","title":"PWM: Raspberry Pi GPIO (Pi &lt;= 4)"},{"location":"Supported-Outputs/#pwm-shell-script","text":"Interfaces: Shell Output Types: PWM Libraries: subprocess.Popen Commands will be executed in the Linux shell by the specified user when the duty cycle is set for this output. The string \"((duty_cycle))\" in the command will be replaced with the duty cycle being set prior to execution. Option Type Description Channel Options Bash Command Text - Default Value: /home/pi/script_pwm.sh ((duty_cycle)) Command to execute to set the PWM duty cycle (%) User Text - Default Value: mycodo The user to execute the command Startup State Select Set the state when Mycodo starts Startup Value Decimal The value when Mycodo starts Shutdown State Select Set the state when Mycodo shuts down Shutdown Value Decimal The value when Mycodo shuts down Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Force Command Boolean Always send the command if instructed, regardless of the current state Current (Amps) Decimal The current draw of the device being controlled","title":"PWM: Shell Script"},{"location":"Supported-Outputs/#peristaltic-pump-atlas-scientific","text":"Manufacturer: Atlas Scientific Interfaces: I 2 C, UART, FTDI Output Types: Volume, On/Off Dependencies: pylibftdi Manufacturer URL: Link Datasheet URL: Link Product URL: Link Atlas Scientific peristaltic pumps can be set to dispense at their maximum rate or a rate can be specified. Their minimum flow rate is 0.5 ml/min and their maximum is 105 ml/min. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. FTDI Device Text The FTDI device connected to the input/output/etc. UART Device Text The UART device location (e.g. /dev/ttyUSB1) Channel Options Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Current (Amps) Decimal The current draw of the device being controlled Commands Calibration: a calibration can be performed to increase the accuracy of the pump. It's a good idea to clear the calibration before calibrating. First, remove all air from the line by pumping the fluid you would like to calibrate to through the pump hose. Next, press Dispense Amount and the pump will be instructed to dispense 10 ml (unless you changed the default value). Measure how much fluid was actually dispensed, enter this value in the Actual Volume Dispensed (ml) field, and press Calibrate to Dispensed Amount. Now any further pump volumes dispensed should be accurate. Clear Calibration Button Volume to Dispense (ml) Decimal - Default Value: 10.0 The volume (ml) that is instructed to be dispensed Dispense Amount Button Actual Volume Dispensed (ml) Decimal - Default Value: 10.0 The actual volume (ml) that was dispensed Calibrate to Dispensed Amount Button The I2C address can be changed. Enter a new address in the 0xYY format (e.g. 0x22, 0x50), then press Set I2C Address. Remember to deactivate and change the I2C address option after setting the new address. New I2C Address Text - Default Value: 0x67 The new I2C to set the device to Set I2C Address Button","title":"Peristaltic Pump: Atlas Scientific"},{"location":"Supported-Outputs/#peristaltic-pump-grove-i2c-motor-driver-board-v13","text":"Manufacturer: Grove Interfaces: I 2 C Output Types: Volume, On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Controls the Grove I2C Motor Driver Board (v1.3). Both motors will turn at the same time. This output can also dispense volumes of fluid if the motors are attached to peristaltic pumps. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Motor Speed (0 - 100) Integer - Default Value: 100 The motor output that determines the speed Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Fastest Rate (ml/min) Decimal - Default Value: 100.0 The fastest rate that the pump can dispense (ml/min)","title":"Peristaltic Pump: Grove I2C Motor Driver (Board v1.3)"},{"location":"Supported-Outputs/#peristaltic-pump-grove-i2c-motor-driver-tb6612fng-board-v10","text":"Manufacturer: Grove Interfaces: I 2 C Output Types: Volume, On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Controls the Grove I2C Motor Driver Board (v1.3). Both motors will turn at the same time. This output can also dispense volumes of fluid if the motors are attached to peristaltic pumps. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others Motor Speed (0 - 255) Integer - Default Value: 255 The motor output that determines the speed Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Fastest Rate (ml/min) Decimal - Default Value: 100.0 The fastest rate that the pump can dispense (ml/min) Minimum On (Seconds) Decimal - Default Value: 1.0 The minimum duration the pump turns on for every 60 second period (only used for Specify Flow Rate mode). Commands New I2C Address Text - Default Value: 0x14 The new I2C to set the sensor to Set I2C Address Button","title":"Peristaltic Pump: Grove I2C Motor Driver (TB6612FNG, Board v1.0)"},{"location":"Supported-Outputs/#peristaltic-pump-l298n-dc-motor-controller-pi-4","text":"Manufacturer: STMicroelectronics Interfaces: GPIO Output Types: Volume, On/Off Libraries: RPi.GPIO Dependencies: RPi.GPIO Additional URL: Link The L298N can control 2 DC motors, both speed and direction. If these motors control peristaltic pumps, set the Flow Rate and the output can can be instructed to dispense volumes accurately in addition to being turned on for durations. Option Type Description Channel Options Name Text A name to distinguish this from others Input Pin 1 Integer The Input Pin 1 of the controller (BCM numbering) Input Pin 2 Integer The Input Pin 2 of the controller (BCM numbering) Use Enable Pin Boolean - Default Value: True Enable the use of the Enable Pin Enable Pin Integer The Enable pin of the controller (BCM numbering) Enable Pin Duty Cycle Integer - Default Value: 50 The duty cycle to apply to the Enable Pin (percent, 1 - 100) Direction Select(Options: [ Forward | Backward] (Default in bold ) The direction to turn the motor Volume Rate (ml/min) Decimal - Default Value: 150.0 If a pump, the measured flow rate (ml/min) at the set Duty Cycle","title":"Peristaltic Pump: L298N DC Motor Controller (Pi &lt;= 4)"},{"location":"Supported-Outputs/#peristaltic-pump-mcp23017-16-channel-io-expander","text":"Manufacturer: MICROCHIP Interfaces: I 2 C Output Types: Volume, On/Off Dependencies: pyusb , Adafruit-extended-bus , adafruit-circuitpython-mcp230xx Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 16 channels of the MCP23017 with a relay and peristaltic pump connected to each channel. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options Name Text A name to distinguish this from others On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the output channel that corresponds to the pump being on Fastest Rate (ml/min) Decimal - Default Value: 150.0 The fastest rate that the pump can dispense (ml/min) Minimum On (Seconds) Decimal - Default Value: 1.0 The minimum duration the pump should be turned on for every 60 second period Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Current (Amps) Decimal The current draw of the device being controlled","title":"Peristaltic Pump: MCP23017 16-Channel I/O Expander"},{"location":"Supported-Outputs/#peristaltic-pump-pcf8574-8-channel-io-expander","text":"Manufacturer: Texas Instruments Interfaces: I 2 C Output Types: Volume, On/Off Libraries: smbus2 Dependencies: smbus2 Manufacturer URL: Link Datasheet URL: Link Product URL: Link Controls the 8 channels of the PCF8574 with a relay and peristaltic pump connected to each channel. Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Channel Options On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the output channel that corresponds to the pump being on Fastest Rate (ml/min) Decimal - Default Value: 150.0 The fastest rate that the pump can dispense (ml/min) Minimum On (Seconds) Decimal - Default Value: 1.0 The minimum duration the pump should be turned on for every 60 second period Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Current (Amps) Decimal The current draw of the device being controlled","title":"Peristaltic Pump: PCF8574 8-Channel I/O Expander"},{"location":"Supported-Outputs/#peristaltic-pump-raspberry-pi-gpio-pi-4","text":"Interfaces: GPIO Output Types: Volume, On/Off Libraries: RPi.GPIO Dependencies: RPi.GPIO This output turns a GPIO pin HIGH and LOW to control power to a generic peristaltic pump. The peristaltic pump can then be turned on for a duration or, after determining the pump's maximum flow rate, instructed to dispense a specific volume at the maximum rate or at a specified rate. Option Type Description Channel Options Pin: GPIO (BCM) Integer The pin to control the state of On State Select(Options: [ HIGH | LOW] (Default in bold ) The state of the GPIO that corresponds to an On state Fastest Rate (ml/min) Decimal - Default Value: 150.0 The fastest rate that the pump can dispense (ml/min) Minimum On (Seconds) Decimal - Default Value: 1.0 The minimum duration the pump should be turned on for every 60 second period Flow Rate Method Select(Options: [ Fastest Flow Rate | Specify Flow Rate] (Default in bold ) The flow rate to use when pumping a volume Desired Flow Rate (ml/min) Decimal - Default Value: 10.0 Desired flow rate in ml/minute when Specify Flow Rate set Current (Amps) Decimal The current draw of the device being controlled","title":"Peristaltic Pump: Raspberry Pi GPIO (Pi &lt;= 4)"},{"location":"Supported-Outputs/#remote-mycodo-output-onoff","text":"Interfaces: API Output Types: On/Off Libraries: requests Dependencies: requests This Output allows remote control of another Mycodo On/Off Output over a network using the API. Option Type Description Remote Mycodo Host Text The host or IP address of the remote Mycodo Remote Mycodo API Key Text The API key of the remote Mycodo State Query Period (Seconds) Integer - Default Value: 120 How often to query the state of the output Channel Options Remote Mycodo Output The Remote Mycodo Output to control Startup State Select(Options: [ Do Nothing | Off | On] (Default in bold ) Set the state when Mycodo starts Shutdown State Select(Options: [ Do Nothing | Off | On] (Default in bold ) Set the state when Mycodo shuts down Force Command Boolean Always send the command if instructed, regardless of the current state Trigger Functions at Startup Boolean Whether to trigger functions when the output switches at startup","title":"Remote Mycodo Output: On/Off"},{"location":"Supported-Outputs/#remote-mycodo-output-pwm","text":"Interfaces: API Output Types: PWM Libraries: requests Dependencies: requests This Output allows remote control of another Mycodo PWM Output over a network using the API. Option Type Description Remote Mycodo Host Text The host or IP address of the remote Mycodo Remote Mycodo API Key Text The API key of the remote Mycodo State Query Period (Seconds) Integer - Default Value: 120 How often to query the state of the output Channel Options Remote Mycodo Output The Remote Mycodo Output to control Startup State Select Set the state when Mycodo starts Start Duty Cycle Decimal The duty cycle to set at startup, if enabled Shutdown State Select Set the state when Mycodo shuts down Shutdown Duty Cycle Decimal The duty cycle to set at shutdown, if enabled Invert Signal Boolean Invert the PWM signal Invert Stored Signal Boolean Invert the value that is saved to the measurement database Commands Set the Duty Cycle. Duty Cycle Decimal The duty cycle to set Set Duty Cycle Button","title":"Remote Mycodo Output: PWM"},{"location":"Supported-Outputs/#spacer","text":"A spacer to organize Outputs. Option Type Description Color Text - Default Value: #000000 The color of the name text","title":"Spacer"},{"location":"Supported-Outputs/#value-gp8xxx-8413-8403-2-channel-dac-0-10-vdc","text":"Manufacturer: DFRobot Interfaces: I 2 C Output Types: Value Libraries: GP8XXX-IIC Dependencies: smbus2 , GP8XXX-IIC Datasheet URLs: Link 1 , Link 2 Product URLs: Link 1 , Link 2 Output 0 to 10 VDC signal. GP8403: 12bit DAC Dual Channel I2C to 0-5V/0-10V | GP8413: 15bit DAC Dual Channel I2C to 0-10V Option Type Description I 2 C Address Text The address of the I 2 C device. I 2 C Bus Integer The Bus the I 2 C device is connected. Device Select(Options: [ GP8403 12-bit | GP8413 15-bit] (Default in bold ) Select your GP8XXX device Channel Options Start State Select(Options: [Previously-Saved State | Specified Value ] (Default in bold ) Select the channel start state Start Value (volts) Decimal If Specified Value is selected, set the start state value Shutdown State Select(Options: [Previously-Saved Value | Specified Value ] (Default in bold ) Select the channel shutdown state Shutdown Value (volts) Decimal If Specified Value is selected, set the shutdown state value Off Value (volts) Decimal If Specified Value to apply when turned off","title":"Value: GP8XXX (8413, 8403) 2-Channel DAC: 0-10 VDC"},{"location":"Supported-Widgets/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Built-In Widgets ~ Activate/Deactivate Controller ~ Activate/Deactivate a Controller (Inputs and Functions). For manipulating a PID Controller, use the PID Controller Widget. Camera ~ Displays a camera image or stream. Function Status ~ Displays the status of a Function (if supported). Gauge (Angular) [Highcharts] ~ Libraries: Highcharts Dependencies: highstock-9.1.2.js, highcharts-more-9.1.2.js Displays an angular gauge. Be sure to set the Maximum option to the last Stop High value for the gauge to display properly. Gauge (Solid) [Highcharts] ~ Libraries: Highcharts Dependencies: highstock-9.1.2.js, highcharts-more-9.1.2.js, solid-gauge-9.1.2.js Displays a solid gauge. Be sure to set the Maximum option to the last Stop value for the gauge to display properly. Graph (Synchronous) [Highstock] ~ Libraries: Highstock Dependencies: highstock-9.1.2.js, highcharts-more-9.1.2.js, data-9.1.2.js, exporting-9.1.2.js, export-data-9.1.2.js, offline-exporting-9.1.2.js Displays a synchronous graph (all data is downloaded for the selected period on the x-axis). Indicator ~ Displays a red or green circular image based on a measurement value. Useful for showing if an Output is on or off. Measurement (1 Value) ~ Displays a measurement value and timestamp. Measurement (2 Values) ~ Displays two measurement values and timestamps. Output (PWM Slider) ~ Displays and allows control of a PWM output using a slider. Output Control (Channel) ~ Displays and allows control of an output channel. All output options and measurements for the selected channel will be displayed. E.g. pumps will have seconds on and volume as measurements, and can be turned on for a duration (Seconds) or amount (Volume). If NO DATA or TOO OLD is displayed, the Max Age is not sufficiently long enough to find a current measurement. PID Controller ~ Displays and allows control of a PID Controller. Python Code ~ Executes Python code and displays the output within the widget. Spacer ~ A simple widget to use as a spacer, which includes the ability to set text in its contents.","title":"Supported Widgets"},{"location":"Supported-Widgets/#built-in-widgets","text":"","title":"Built-In Widgets"},{"location":"Supported-Widgets/#activatedeactivate-controller","text":"Activate/Deactivate a Controller (Inputs and Functions). For manipulating a PID Controller, use the PID Controller Widget.","title":"Activate/Deactivate Controller"},{"location":"Supported-Widgets/#camera","text":"Displays a camera image or stream.","title":"Camera"},{"location":"Supported-Widgets/#function-status","text":"Displays the status of a Function (if supported).","title":"Function Status"},{"location":"Supported-Widgets/#gauge-angular-highcharts","text":"Libraries: Highcharts Dependencies: highstock-9.1.2.js, highcharts-more-9.1.2.js Displays an angular gauge. Be sure to set the Maximum option to the last Stop High value for the gauge to display properly.","title":"Gauge (Angular) [Highcharts]"},{"location":"Supported-Widgets/#gauge-solid-highcharts","text":"Libraries: Highcharts Dependencies: highstock-9.1.2.js, highcharts-more-9.1.2.js, solid-gauge-9.1.2.js Displays a solid gauge. Be sure to set the Maximum option to the last Stop value for the gauge to display properly.","title":"Gauge (Solid) [Highcharts]"},{"location":"Supported-Widgets/#graph-synchronous-highstock","text":"Libraries: Highstock Dependencies: highstock-9.1.2.js, highcharts-more-9.1.2.js, data-9.1.2.js, exporting-9.1.2.js, export-data-9.1.2.js, offline-exporting-9.1.2.js Displays a synchronous graph (all data is downloaded for the selected period on the x-axis).","title":"Graph (Synchronous) [Highstock]"},{"location":"Supported-Widgets/#indicator","text":"Displays a red or green circular image based on a measurement value. Useful for showing if an Output is on or off.","title":"Indicator"},{"location":"Supported-Widgets/#measurement-1-value","text":"Displays a measurement value and timestamp.","title":"Measurement (1 Value)"},{"location":"Supported-Widgets/#measurement-2-values","text":"Displays two measurement values and timestamps.","title":"Measurement (2 Values)"},{"location":"Supported-Widgets/#output-pwm-slider","text":"Displays and allows control of a PWM output using a slider.","title":"Output (PWM Slider)"},{"location":"Supported-Widgets/#output-control-channel","text":"Displays and allows control of an output channel. All output options and measurements for the selected channel will be displayed. E.g. pumps will have seconds on and volume as measurements, and can be turned on for a duration (Seconds) or amount (Volume). If NO DATA or TOO OLD is displayed, the Max Age is not sufficiently long enough to find a current measurement.","title":"Output Control (Channel)"},{"location":"Supported-Widgets/#pid-controller","text":"Displays and allows control of a PID Controller.","title":"PID Controller"},{"location":"Supported-Widgets/#python-code","text":"Executes Python code and displays the output within the widget.","title":"Python Code"},{"location":"Supported-Widgets/#spacer","text":"A simple widget to use as a spacer, which includes the ability to set text in its contents.","title":"Spacer"},{"location":"System-Information/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Page: [Gear Icon] -> System Information This page serves to provide information about the Mycodo frontend and backend as well as the linux system it's running on. Several commands and their output are listed to give the user information about how their system is running. Command Description Mycodo Version The current version of Mycodo, reported by the configuration file. Python Version The version of python currently running the web user interface. Database Version The current version of the settings database. If the current version is different from what it should be, an error will appear indicating the issue and a link to find out more information about the issue. Daemon Status This will be a green \"Running\" or a red \"Stopped\". Additionally, the Mycodo version and hostname text at the top-left of the screen May be Green, Yellow, or Red to indicate the status. Green = daemon running, yellow = unable to connect, and red = daemon not running. ... Several other status indicators and commands are listed to provide information about the health of the system. Use these in addition to others to investigate software or hardware issues.","title":"System Information"},{"location":"Troubleshooting/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Cannot Access the Web UI Following an Upgrade ~ There are many reasons why the web UI would be inaccessible following an upgrade. Bugs are also continually fixed as they are discovered. Therefore, do not rely on old GitHub Issues or forum posts that have a solution for a similar effect, since the cause of the effect can be something completely different. The first thing that should be done is to review the upgrade log (/var/log/mycodo/mycodoupgrade.log) for any errors. Next, you can attempt to rerun the upgrade by issuing the following command: sudo /opt/Mycodo/mycodo/scripts/upgrade_post.sh Daemon Not Running ~ Check the color of the top left time/version text. Green indicates the daemon is running, while orange or red can indicate an issue. Determine if the Daemon is Running: Execute ps aux | grep mycodo_daemon.py in a terminal and look for an entry to be returned. Check the Logs: From the [Gear Icon] -> Mycodo Logs page or /var/log/mycodo/, check the daemon log for any errors. If the issue began after an upgrade, also check the upgrade log for indications of an issue. If a solution could not be found after investigating the above suggestions, search the GitHub issues for any open issues or the forum for any recent issues. Incorrect Database Version ~ Check the [Gear Icon] -> System Information page. If the \"Database Version\" is green, it is the correct version. An incorrect version wil lbe colored red and indicate the version is incorrect. An incorrect database version means the version stored in the Mycodo settings database ( /opt/Mycodo/databases/mycodo.db ) is not correct for the latest version of Mycodo, determined in the Mycodo config file ( /opt/Mycodo/mycodo/config.py ). This can be caused by an error in the upgrade process from an older database version to a newer version, or from a database that did not upgrade during the Mycodo upgrade process. Check the Upgrade Log for any issues that may have occurred. The log is located at /var/log/mycodo/mycodoupgrade.log but may also be accessed from the web UI (if you're able to): select [Gear Icon] -> Mycodo Logs -> Upgrade Log . Sometimes issues may not immediately present themselves. It is not uncommon to be experiencing a database issue that was actually introduced several Mycodo versions ago, before the latest upgrade. Because of the nature of how many versions the database can be in, correcting a database issue may be very difficult. It may be much easier to delete your database and start fresh without any configuration. Use the following commands to rename your database and restart the web UI. If both commands are successful, refresh your web UI page in your browser in order to generate a new database and create a new Admin user. mv /opt/Mycodo/databases/mycodo.db /opt/Mycodo/databases/mycodo.db.backup sudo service mycodoflask restart Restoring a Backup Without the UI ~ If the web UI is inaccessible, because of an error, for example, you can restore a backup from the command line. See Backup and Restore for more information. More on Diagnosing issues ~ Check out the Diagnosing Issues for more information about diagnosing issues.","title":"Troubleshooting"},{"location":"Troubleshooting/#cannot-access-the-web-ui-following-an-upgrade","text":"There are many reasons why the web UI would be inaccessible following an upgrade. Bugs are also continually fixed as they are discovered. Therefore, do not rely on old GitHub Issues or forum posts that have a solution for a similar effect, since the cause of the effect can be something completely different. The first thing that should be done is to review the upgrade log (/var/log/mycodo/mycodoupgrade.log) for any errors. Next, you can attempt to rerun the upgrade by issuing the following command: sudo /opt/Mycodo/mycodo/scripts/upgrade_post.sh","title":"Cannot Access the Web UI Following an Upgrade"},{"location":"Troubleshooting/#daemon-not-running","text":"Check the color of the top left time/version text. Green indicates the daemon is running, while orange or red can indicate an issue. Determine if the Daemon is Running: Execute ps aux | grep mycodo_daemon.py in a terminal and look for an entry to be returned. Check the Logs: From the [Gear Icon] -> Mycodo Logs page or /var/log/mycodo/, check the daemon log for any errors. If the issue began after an upgrade, also check the upgrade log for indications of an issue. If a solution could not be found after investigating the above suggestions, search the GitHub issues for any open issues or the forum for any recent issues.","title":"Daemon Not Running"},{"location":"Troubleshooting/#incorrect-database-version","text":"Check the [Gear Icon] -> System Information page. If the \"Database Version\" is green, it is the correct version. An incorrect version wil lbe colored red and indicate the version is incorrect. An incorrect database version means the version stored in the Mycodo settings database ( /opt/Mycodo/databases/mycodo.db ) is not correct for the latest version of Mycodo, determined in the Mycodo config file ( /opt/Mycodo/mycodo/config.py ). This can be caused by an error in the upgrade process from an older database version to a newer version, or from a database that did not upgrade during the Mycodo upgrade process. Check the Upgrade Log for any issues that may have occurred. The log is located at /var/log/mycodo/mycodoupgrade.log but may also be accessed from the web UI (if you're able to): select [Gear Icon] -> Mycodo Logs -> Upgrade Log . Sometimes issues may not immediately present themselves. It is not uncommon to be experiencing a database issue that was actually introduced several Mycodo versions ago, before the latest upgrade. Because of the nature of how many versions the database can be in, correcting a database issue may be very difficult. It may be much easier to delete your database and start fresh without any configuration. Use the following commands to rename your database and restart the web UI. If both commands are successful, refresh your web UI page in your browser in order to generate a new database and create a new Admin user. mv /opt/Mycodo/databases/mycodo.db /opt/Mycodo/databases/mycodo.db.backup sudo service mycodoflask restart","title":"Incorrect Database Version"},{"location":"Troubleshooting/#restoring-a-backup-without-the-ui","text":"If the web UI is inaccessible, because of an error, for example, you can restore a backup from the command line. See Backup and Restore for more information.","title":"Restoring a Backup Without the UI"},{"location":"Troubleshooting/#more-on-diagnosing-issues","text":"Check out the Diagnosing Issues for more information about diagnosing issues.","title":"More on Diagnosing issues"},{"location":"Upgrade-Backup-Restore/","text":"Deutsche: Deze pagina is niet vertaald naar het Duits. Espa\u00f1ol: Esta p\u00e1gina no est\u00e1 traducida al castellano. Fran\u00e7ais: Cette page n'est pas traduite en fran\u00e7ais. Bahasa Indonesia: Halaman ini tidak diterjemahkan ke bahasa Indonesia. Italiano: Questa pagina non \u00e8 tradotta in italiano. Norsk: Denne siden er ikke oversatt til norsk. Polski: Ta strona nie jest przet\u0142umaczona na j\u0119zyk polski. Portugu\u00eas: Esta p\u00e1gina n\u00e3o est\u00e1 traduzida para o portugu\u00eas. \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a: \u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a. \u0441\u0440\u043f\u0441\u043a\u0438: \u041e\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0438\u0458\u0435 \u043f\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u0441\u0440\u043f\u0441\u043a\u0438. Svenska: Denna sida \u00e4r inte \u00f6versatt till svenska. T\u00fcrk\u00e7e: Bu sayfa T\u00fcrk\u00e7e'ye \u00e7evrilmemi\u015ftir. \u4e2d\u6587: \u6b64\u9875\u9762\u672a\u7ffb\u8bd1\u6210\u4e2d\u6587. Upgrading ~ Page: [Gear Icon] -> Upgrade If you already have Mycodo installed, you can perform an upgrade to the latest Mycodo Release by either using the Upgrade option in the web interface (recommended) or by issuing the following command in a terminal. A log of the upgrade process is created at /var/log/mycodo/mycodoupgrade.log and is also available from the [Gear Icon] -> Mycodo Logs page. sudo mycodo-commands upgrade-mycodo Backup-Restore ~ Page: [Gear Icon] -> Backup Restore A backup is made to /var/Mycodo-backups when the system is upgraded or instructed to do so from the web interface on the [Gear Icon] -> Backup Restore page. If you need to restore a backup, this can be done on the [Gear Icon] -> Backup Restore page (recommended). Find the backup you would like restored and press the Restore button beside it. If you're unable to access the web interface, a restore can also be initialized through the command line. Use the following command to initialize a restore. The [backup_location] must be the full path to the backup to be restored (e.g. \"/var/Mycodo-backups/Mycodo-backup-2018-03-11_21-19-15-5.6.4/\" without quotes). sudo mycodo-commands backup-restore [ backup_location ]","title":"Upgrade/Backup/Restore"},{"location":"Upgrade-Backup-Restore/#upgrading","text":"Page: [Gear Icon] -> Upgrade If you already have Mycodo installed, you can perform an upgrade to the latest Mycodo Release by either using the Upgrade option in the web interface (recommended) or by issuing the following command in a terminal. A log of the upgrade process is created at /var/log/mycodo/mycodoupgrade.log and is also available from the [Gear Icon] -> Mycodo Logs page. sudo mycodo-commands upgrade-mycodo","title":"Upgrading"},{"location":"Upgrade-Backup-Restore/#backup-restore","text":"Page: [Gear Icon] -> Backup Restore A backup is made to /var/Mycodo-backups when the system is upgraded or instructed to do so from the web interface on the [Gear Icon] -> Backup Restore page. If you need to restore a backup, this can be done on the [Gear Icon] -> Backup Restore page (recommended). Find the backup you would like restored and press the Restore button beside it. If you're unable to access the web interface, a restore can also be initialized through the command line. Use the following command to initialize a restore. The [backup_location] must be the full path to the backup to be restored (e.g. \"/var/Mycodo-backups/Mycodo-backup-2018-03-11_21-19-15-5.6.4/\" without quotes). sudo mycodo-commands backup-restore [ backup_location ]","title":"Backup-Restore"},{"location":"index.de/","text":"English Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo System zur \u00dcberwachung und Regulierung der Umwelt ~ Mycodo ist eine Open-Source-Software, die auf dem Raspberry Pi und anderen Einplatinencomputern (SBCs) l\u00e4uft. Sie verkn\u00fcpft Ein- und Ausg\u00e4nge auf interessante Weise, um die Umgebung zu erfassen und zu manipulieren. Informationen ~ Siehe die README f\u00fcr Funktionen, Projekte, die Mycodo verwenden, Screenshots und andere Informationen. Voraussetzungen ~ Einplatinencomputer (empfohlen: Raspberry Pi , beliebige Version: Zero, 1, 2, 3, oder 4) Debian-basiertes Betriebssystem Eine aktive Internetverbindung Installieren Sie ~ Sobald Sie hochgefahren und eingeloggt sind, f\u00fchren Sie den folgenden Befehl aus, um die Installation von Mycodo zu starten: curl -L https://kizniche.github.io/Mycodo/install | bash \u00d6ffnen Sie nach der Installation einen Webbrowser mit der IP-Adresse des SBC und Sie werden aufgefordert, einen Admin-Benutzer zu erstellen und sich anzumelden. https://127.0.0.1 Unterst\u00fctzung ~ Mycodo on GitHub Mycodo Wiki Mycodo API Diskussionsforum H\u00e4ufig gestellte Fragen Spenden Sie ~ Sponsor werden: github.com/sponsors/kizniche Andere Methoden: KyleGabriel.com/donate","title":"Home"},{"location":"index.de/#mycodo-system-zur-uberwachung-und-regulierung-der-umwelt","text":"Mycodo ist eine Open-Source-Software, die auf dem Raspberry Pi und anderen Einplatinencomputern (SBCs) l\u00e4uft. Sie verkn\u00fcpft Ein- und Ausg\u00e4nge auf interessante Weise, um die Umgebung zu erfassen und zu manipulieren.","title":"Mycodo System zur \u00dcberwachung und Regulierung der Umwelt"},{"location":"index.de/#informationen","text":"Siehe die README f\u00fcr Funktionen, Projekte, die Mycodo verwenden, Screenshots und andere Informationen.","title":"Informationen"},{"location":"index.de/#voraussetzungen","text":"Einplatinencomputer (empfohlen: Raspberry Pi , beliebige Version: Zero, 1, 2, 3, oder 4) Debian-basiertes Betriebssystem Eine aktive Internetverbindung","title":"Voraussetzungen"},{"location":"index.de/#installieren-sie","text":"Sobald Sie hochgefahren und eingeloggt sind, f\u00fchren Sie den folgenden Befehl aus, um die Installation von Mycodo zu starten: curl -L https://kizniche.github.io/Mycodo/install | bash \u00d6ffnen Sie nach der Installation einen Webbrowser mit der IP-Adresse des SBC und Sie werden aufgefordert, einen Admin-Benutzer zu erstellen und sich anzumelden. https://127.0.0.1","title":"Installieren Sie"},{"location":"index.de/#unterstutzung","text":"Mycodo on GitHub Mycodo Wiki Mycodo API Diskussionsforum H\u00e4ufig gestellte Fragen","title":"Unterst\u00fctzung"},{"location":"index.de/#spenden-sie","text":"Sponsor werden: github.com/sponsors/kizniche Andere Methoden: KyleGabriel.com/donate","title":"Spenden Sie"},{"location":"index.es/","text":"English Deutsche Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Sistema de control y regulaci\u00f3n medioambiental Mycodo ~ Mycodo es un software de c\u00f3digo abierto dise\u00f1ado para funcionar en la Raspberry Pi y otros ordenadores de placa \u00fanica (SBC). Acopla las entradas y salidas de forma interesante para percibir y manipular el entorno. Informaci\u00f3n ~ Consulte el README para conocer las caracter\u00edsticas, los proyectos que utilizan Mycodo, las capturas de pantalla y otra informaci\u00f3n. Requisitos previos ~ Ordenador monoplaca (Recomendado: Raspberry Pi , cualquier versi\u00f3n: Cero, 1, 2, 3 o 4) Sistema operativo basado en Debian Una conexi\u00f3n a Internet activa Instalar ~ Una vez arrancado y conectado, ejecute el siguiente comando para iniciar la instalaci\u00f3n de Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash Despu\u00e9s de la instalaci\u00f3n, abra un navegador web a la direcci\u00f3n IP del SBC y se le pedir\u00e1 que cree un usuario administrador e inicie sesi\u00f3n. https://127.0.0.1 Soporte ~ Mycodo on GitHub Mycodo Wiki Mycodo API Foro de discusion Preguntas frecuentes Donar ~ Convi\u00e9rtase en patrocinador: github.com/sponsors/kizniche Otros m\u00e9todos: KyleGabriel.com/donate","title":"Hogar"},{"location":"index.es/#sistema-de-control-y-regulacion-medioambiental-mycodo","text":"Mycodo es un software de c\u00f3digo abierto dise\u00f1ado para funcionar en la Raspberry Pi y otros ordenadores de placa \u00fanica (SBC). Acopla las entradas y salidas de forma interesante para percibir y manipular el entorno.","title":"Sistema de control y regulaci\u00f3n medioambiental Mycodo"},{"location":"index.es/#informacion","text":"Consulte el README para conocer las caracter\u00edsticas, los proyectos que utilizan Mycodo, las capturas de pantalla y otra informaci\u00f3n.","title":"Informaci\u00f3n"},{"location":"index.es/#requisitos-previos","text":"Ordenador monoplaca (Recomendado: Raspberry Pi , cualquier versi\u00f3n: Cero, 1, 2, 3 o 4) Sistema operativo basado en Debian Una conexi\u00f3n a Internet activa","title":"Requisitos previos"},{"location":"index.es/#instalar","text":"Una vez arrancado y conectado, ejecute el siguiente comando para iniciar la instalaci\u00f3n de Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash Despu\u00e9s de la instalaci\u00f3n, abra un navegador web a la direcci\u00f3n IP del SBC y se le pedir\u00e1 que cree un usuario administrador e inicie sesi\u00f3n. https://127.0.0.1","title":"Instalar"},{"location":"index.es/#soporte","text":"Mycodo on GitHub Mycodo Wiki Mycodo API Foro de discusion Preguntas frecuentes","title":"Soporte"},{"location":"index.es/#donar","text":"Convi\u00e9rtase en patrocinador: github.com/sponsors/kizniche Otros m\u00e9todos: KyleGabriel.com/donate","title":"Donar"},{"location":"index.fr/","text":"English Deutsche Espa\u00f1ol Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Syst\u00e8me de surveillance et de r\u00e9gulation environnementale Mycodo ~ Mycodo est un logiciel open source con\u00e7u pour fonctionner sur le Raspberry Pi et d'autres ordinateurs monocartes (SBC). Il couple les entr\u00e9es et les sorties de mani\u00e8re int\u00e9ressante pour d\u00e9tecter et manipuler l'environnement. Informations ~ Voir le README pour les fonctionnalit\u00e9s, les projets utilisant Mycodo, les captures d'\u00e9cran et d'autres informations. Conditions pr\u00e9alables ~ Ordinateur monocarte (recommand\u00e9 : Raspberry Pi , toute version : Zero, 1, 2, 3, ou 4) Syst\u00e8me d'exploitation bas\u00e9 sur Debian Une connexion internet active Installer ~ Une fois d\u00e9marr\u00e9 et connect\u00e9, ex\u00e9cutez la commande suivante pour lancer l'installation de Mycodo : curl -L https://kizniche.github.io/Mycodo/install | bash Apr\u00e8s l'installation, ouvrez un navigateur Web sur l'adresse IP du SBC et vous serez invit\u00e9 \u00e0 cr\u00e9er un utilisateur Admin et \u00e0 vous connecter. https://127.0.0.1 Soutien ~ Mycodo on GitHub Mycodo Wiki Mycodo API Forum de discussion Questions fr\u00e9quemment pos\u00e9es Faire un don ~ Devenir un sponsor: github.com/sponsors/kizniche Autres m\u00e9thodes: KyleGabriel.com/donate","title":"Home"},{"location":"index.fr/#systeme-de-surveillance-et-de-regulation-environnementale-mycodo","text":"Mycodo est un logiciel open source con\u00e7u pour fonctionner sur le Raspberry Pi et d'autres ordinateurs monocartes (SBC). Il couple les entr\u00e9es et les sorties de mani\u00e8re int\u00e9ressante pour d\u00e9tecter et manipuler l'environnement.","title":"Syst\u00e8me de surveillance et de r\u00e9gulation environnementale Mycodo"},{"location":"index.fr/#informations","text":"Voir le README pour les fonctionnalit\u00e9s, les projets utilisant Mycodo, les captures d'\u00e9cran et d'autres informations.","title":"Informations"},{"location":"index.fr/#conditions-prealables","text":"Ordinateur monocarte (recommand\u00e9 : Raspberry Pi , toute version : Zero, 1, 2, 3, ou 4) Syst\u00e8me d'exploitation bas\u00e9 sur Debian Une connexion internet active","title":"Conditions pr\u00e9alables"},{"location":"index.fr/#installer","text":"Une fois d\u00e9marr\u00e9 et connect\u00e9, ex\u00e9cutez la commande suivante pour lancer l'installation de Mycodo : curl -L https://kizniche.github.io/Mycodo/install | bash Apr\u00e8s l'installation, ouvrez un navigateur Web sur l'adresse IP du SBC et vous serez invit\u00e9 \u00e0 cr\u00e9er un utilisateur Admin et \u00e0 vous connecter. https://127.0.0.1","title":"Installer"},{"location":"index.fr/#soutien","text":"Mycodo on GitHub Mycodo Wiki Mycodo API Forum de discussion Questions fr\u00e9quemment pos\u00e9es","title":"Soutien"},{"location":"index.fr/#faire-un-don","text":"Devenir un sponsor: github.com/sponsors/kizniche Autres m\u00e9thodes: KyleGabriel.com/donate","title":"Faire un don"},{"location":"index.id/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Sistem Pemantauan dan Regulasi Lingkungan Mycodo ~ Mycodo adalah perangkat lunak sumber terbuka yang dirancang untuk dijalankan pada Raspberry Pi dan komputer papan tunggal lainnya (SBC). Mycodo memasangkan input dan output dengan cara yang menarik untuk merasakan dan memanipulasi lingkungan. Information ~ Lihat README untuk fitur-fitur, proyek-proyek yang menggunakan Mycodo, screenshot, dan informasi lainnya. Prasyarat ~ Komputer papan tunggal (Direkomendasikan: Raspberry Pi , versi apa pun: Nol, 1, 2, 3, atau 4) Sistem operasi berbasis Debian Koneksi internet yang aktif Pasang ~ Setelah di-boot dan masuk, jalankan perintah berikut untuk memulai instalasi Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash Setelah instalasi, buka browser web ke alamat IP SBC dan Anda akan diminta untuk membuat pengguna Admin dan login. https://127.0.0.1 Support ~ Mycodo on GitHub Mycodo Wiki Mycodo API Discussion Forum Pertanyaan yang Sering Diajukan Donasi ~ Menjadi Sponsor: github.com/sponsors/kizniche Metode Lain: KyleGabriel.com/donate","title":"Home"},{"location":"index.id/#sistem-pemantauan-dan-regulasi-lingkungan-mycodo","text":"Mycodo adalah perangkat lunak sumber terbuka yang dirancang untuk dijalankan pada Raspberry Pi dan komputer papan tunggal lainnya (SBC). Mycodo memasangkan input dan output dengan cara yang menarik untuk merasakan dan memanipulasi lingkungan.","title":"Sistem Pemantauan dan Regulasi Lingkungan Mycodo"},{"location":"index.id/#information","text":"Lihat README untuk fitur-fitur, proyek-proyek yang menggunakan Mycodo, screenshot, dan informasi lainnya.","title":"Information"},{"location":"index.id/#prasyarat","text":"Komputer papan tunggal (Direkomendasikan: Raspberry Pi , versi apa pun: Nol, 1, 2, 3, atau 4) Sistem operasi berbasis Debian Koneksi internet yang aktif","title":"Prasyarat"},{"location":"index.id/#pasang","text":"Setelah di-boot dan masuk, jalankan perintah berikut untuk memulai instalasi Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash Setelah instalasi, buka browser web ke alamat IP SBC dan Anda akan diminta untuk membuat pengguna Admin dan login. https://127.0.0.1","title":"Pasang"},{"location":"index.id/#support","text":"Mycodo on GitHub Mycodo Wiki Mycodo API Discussion Forum Pertanyaan yang Sering Diajukan","title":"Support"},{"location":"index.id/#donasi","text":"Menjadi Sponsor: github.com/sponsors/kizniche Metode Lain: KyleGabriel.com/donate","title":"Donasi"},{"location":"index.it/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Sistema di monitoraggio e regolazione ambientale Mycodo ~ Mycodo \u00e8 un software open source progettato per funzionare su Raspberry Pi e altri computer a scheda singola (SBC). Accoppia ingressi e uscite in modi interessanti per percepire e manipolare l'ambiente. Informazioni ~ Si veda il README per le caratteristiche, i progetti che utilizzano Mycodo, gli screenshot e altre informazioni. Prerequisiti ~ Computer a scheda singola (consigliato: Raspberry Pi , qualsiasi versione: Zero, 1, 2, 3 o 4) Sistema operativo basato su Debian Una connessione internet attiva Installare ~ Una volta avviato e collegato, eseguire il seguente comando per avviare l'installazione di Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash Dopo l'installazione, aprire un browser web all'indirizzo IP dell'SBC e verr\u00e0 richiesto di creare un utente amministratore e di effettuare il login. https://127.0.0.1 Supporto ~ Mycodo on GitHub Mycodo Wiki Mycodo API Forum di discussione Domande frequenti Dona ~ Diventare sponsor: github.com/sponsors/kizniche Altri metodi: KyleGabriel.com/donate","title":"Home"},{"location":"index.it/#sistema-di-monitoraggio-e-regolazione-ambientale-mycodo","text":"Mycodo \u00e8 un software open source progettato per funzionare su Raspberry Pi e altri computer a scheda singola (SBC). Accoppia ingressi e uscite in modi interessanti per percepire e manipolare l'ambiente.","title":"Sistema di monitoraggio e regolazione ambientale Mycodo"},{"location":"index.it/#informazioni","text":"Si veda il README per le caratteristiche, i progetti che utilizzano Mycodo, gli screenshot e altre informazioni.","title":"Informazioni"},{"location":"index.it/#prerequisiti","text":"Computer a scheda singola (consigliato: Raspberry Pi , qualsiasi versione: Zero, 1, 2, 3 o 4) Sistema operativo basato su Debian Una connessione internet attiva","title":"Prerequisiti"},{"location":"index.it/#installare","text":"Una volta avviato e collegato, eseguire il seguente comando per avviare l'installazione di Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash Dopo l'installazione, aprire un browser web all'indirizzo IP dell'SBC e verr\u00e0 richiesto di creare un utente amministratore e di effettuare il login. https://127.0.0.1","title":"Installare"},{"location":"index.it/#supporto","text":"Mycodo on GitHub Mycodo Wiki Mycodo API Forum di discussione Domande frequenti","title":"Supporto"},{"location":"index.it/#dona","text":"Diventare sponsor: github.com/sponsors/kizniche Altri metodi: KyleGabriel.com/donate","title":"Dona"},{"location":"index.nl/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo Milieubewakings- en regelsysteem ~ Mycodo is open source software ontworpen om te draaien op de Raspberry Pi en andere single-board computers (SBC's). Het koppelt inputs en outputs op interessante manieren om de omgeving aan te voelen en te manipuleren. Informatie ~ Zie de README voor functies, projecten die Mycodo gebruiken, schermafbeeldingen en andere informatie. Voorwaarden ~ Single-board computer (Aanbevolen: Raspberry Pi , elke versie: Nul, 1, 2, 3, of 4) Op Debian gebaseerd besturingssysteem Een actieve internetverbinding Installeer ~ Eenmaal opgestart en ingelogd, voer het volgende commando uit om de Mycodo installatie te starten: curl -L https://kizniche.github.io/Mycodo/install | bash Open na de installatie een webbrowser naar het IP-adres van de SBC en u wordt gevraagd een admin-gebruiker aan te maken en in te loggen. https://127.0.0.1 Ondersteuning ~ Mycodo on GitHub Mycodo Wiki Mycodo API Discussieforum Vaak gestelde vragen Doneer ~ Sponsor worden: github.com/sponsors/kizniche Andere methoden: KyleGabriel.com/donate","title":"Home"},{"location":"index.nl/#mycodo-milieubewakings-en-regelsysteem","text":"Mycodo is open source software ontworpen om te draaien op de Raspberry Pi en andere single-board computers (SBC's). Het koppelt inputs en outputs op interessante manieren om de omgeving aan te voelen en te manipuleren.","title":"Mycodo Milieubewakings- en regelsysteem"},{"location":"index.nl/#informatie","text":"Zie de README voor functies, projecten die Mycodo gebruiken, schermafbeeldingen en andere informatie.","title":"Informatie"},{"location":"index.nl/#voorwaarden","text":"Single-board computer (Aanbevolen: Raspberry Pi , elke versie: Nul, 1, 2, 3, of 4) Op Debian gebaseerd besturingssysteem Een actieve internetverbinding","title":"Voorwaarden"},{"location":"index.nl/#installeer","text":"Eenmaal opgestart en ingelogd, voer het volgende commando uit om de Mycodo installatie te starten: curl -L https://kizniche.github.io/Mycodo/install | bash Open na de installatie een webbrowser naar het IP-adres van de SBC en u wordt gevraagd een admin-gebruiker aan te maken en in te loggen. https://127.0.0.1","title":"Installeer"},{"location":"index.nl/#ondersteuning","text":"Mycodo on GitHub Mycodo Wiki Mycodo API Discussieforum Vaak gestelde vragen","title":"Ondersteuning"},{"location":"index.nl/#doneer","text":"Sponsor worden: github.com/sponsors/kizniche Andere methoden: KyleGabriel.com/donate","title":"Doneer"},{"location":"index.nn/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo Environmental Monitoring and Regulation System ~ Mycodo is open source software designed to run on the Raspberry Pi and other single-board computers (SBCs). It couples inputs and outputs in interesting ways to sense and manipulate the environment. Information ~ See the README for features, projects using Mycodo, screenshots, and other information. Prerequisites ~ Single-board computer (Recommended: Raspberry Pi , any version: Zero, 1, 2, 3, or 4) Debian-based operating system An active internet connection Install ~ Once booted and logged in, run the following command to initiate the Mycodo install: curl -L https://kizniche.github.io/Mycodo/install | bash After installation, open a web browser to the SBC's IP address and you will be prompted to create an Admin user and login. https://127.0.0.1 Support ~ Mycodo on GitHub Mycodo Wiki Mycodo API Diskusjonsforum Frequently Asked Questions Donere ~ Become a Sponsor: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"Home"},{"location":"index.nn/#mycodo-environmental-monitoring-and-regulation-system","text":"Mycodo is open source software designed to run on the Raspberry Pi and other single-board computers (SBCs). It couples inputs and outputs in interesting ways to sense and manipulate the environment.","title":"Mycodo Environmental Monitoring and Regulation System"},{"location":"index.nn/#information","text":"See the README for features, projects using Mycodo, screenshots, and other information.","title":"Information"},{"location":"index.nn/#prerequisites","text":"Single-board computer (Recommended: Raspberry Pi , any version: Zero, 1, 2, 3, or 4) Debian-based operating system An active internet connection","title":"Prerequisites"},{"location":"index.nn/#install","text":"Once booted and logged in, run the following command to initiate the Mycodo install: curl -L https://kizniche.github.io/Mycodo/install | bash After installation, open a web browser to the SBC's IP address and you will be prompted to create an Admin user and login. https://127.0.0.1","title":"Install"},{"location":"index.nn/#support","text":"Mycodo on GitHub Mycodo Wiki Mycodo API Diskusjonsforum Frequently Asked Questions","title":"Support"},{"location":"index.nn/#donere","text":"Become a Sponsor: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"Donere"},{"location":"index.pl/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 System monitorowania i regulacji \u015brodowiska Mycodo ~ Mycodo to oprogramowanie open source przeznaczone do uruchamiania na Raspberry Pi i innych komputerach jednop\u0142ytkowych (SBC). \u0141\u0105czy wej\u015bcia i wyj\u015bcia w interesuj\u0105cy spos\u00f3b, aby wyczu\u0107 i manipulowa\u0107 \u015brodowiskiem. Informacje ~ Zobacz README , aby pozna\u0107 funkcje, projekty wykorzystuj\u0105ce Mycodo, zrzuty ekranu i inne informacje. Wymagania wst\u0119pne ~ Komputer jednop\u0142ytkowy (Zalecane: Raspberry Pi , dowolna wersja: Zero, 1, 2, 3 lub 4) System operacyjny oparty na Debianie Aktywne po\u0142\u0105czenie internetowe Zainstaluj ~ Po uruchomieniu i zalogowaniu si\u0119, uruchom nast\u0119puj\u0105ce polecenie, aby zainicjowa\u0107 instalacj\u0119 Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash Po instalacji otw\u00f3rz przegl\u0105dark\u0119 internetow\u0105 na adres IP SBC, a zostaniesz poproszony o utworzenie u\u017cytkownika Admin i zalogowanie si\u0119. https://127.0.0.1 Wsparcie ~ Mycodo on GitHub Mycodo Wiki Mycodo API Forum dyskusyjne Najcz\u0119\u015bciej zadawane pytania Darowizna ~ Zosta\u0144 sponsorem: github.com/sponsors/kizniche Inne metody: KyleGabriel.com/donate","title":"Home"},{"location":"index.pl/#system-monitorowania-i-regulacji-srodowiska-mycodo","text":"Mycodo to oprogramowanie open source przeznaczone do uruchamiania na Raspberry Pi i innych komputerach jednop\u0142ytkowych (SBC). \u0141\u0105czy wej\u015bcia i wyj\u015bcia w interesuj\u0105cy spos\u00f3b, aby wyczu\u0107 i manipulowa\u0107 \u015brodowiskiem.","title":"System monitorowania i regulacji \u015brodowiska Mycodo"},{"location":"index.pl/#informacje","text":"Zobacz README , aby pozna\u0107 funkcje, projekty wykorzystuj\u0105ce Mycodo, zrzuty ekranu i inne informacje.","title":"Informacje"},{"location":"index.pl/#wymagania-wstepne","text":"Komputer jednop\u0142ytkowy (Zalecane: Raspberry Pi , dowolna wersja: Zero, 1, 2, 3 lub 4) System operacyjny oparty na Debianie Aktywne po\u0142\u0105czenie internetowe","title":"Wymagania wst\u0119pne"},{"location":"index.pl/#zainstaluj","text":"Po uruchomieniu i zalogowaniu si\u0119, uruchom nast\u0119puj\u0105ce polecenie, aby zainicjowa\u0107 instalacj\u0119 Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash Po instalacji otw\u00f3rz przegl\u0105dark\u0119 internetow\u0105 na adres IP SBC, a zostaniesz poproszony o utworzenie u\u017cytkownika Admin i zalogowanie si\u0119. https://127.0.0.1","title":"Zainstaluj"},{"location":"index.pl/#wsparcie","text":"Mycodo on GitHub Mycodo Wiki Mycodo API Forum dyskusyjne Najcz\u0119\u015bciej zadawane pytania","title":"Wsparcie"},{"location":"index.pl/#darowizna","text":"Zosta\u0144 sponsorem: github.com/sponsors/kizniche Inne metody: KyleGabriel.com/donate","title":"Darowizna"},{"location":"index.pt/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Sistema de Monitoriza\u00e7\u00e3o e Regula\u00e7\u00e3o Ambiental Mycodo ~ Mycodo \u00e9 software de c\u00f3digo aberto concebido para correr no Raspberry Pi e noutros computadores de placa \u00fanica (SBCs). Combina entradas e sa\u00eddas de formas interessantes para sentir e manipular o ambiente. Informa\u00e7\u00e3o ~ Ver o README para caracter\u00edsticas, projectos utilizando Mycodo, capturas de ecr\u00e3, e outras informa\u00e7\u00f5es. Pr\u00e9-requisitos ~ Computador de placa \u00fanica (Recomendado: Raspberry Pi , qualquer vers\u00e3o: Zero, 1, 2, 3, ou 4) Sistema operativo baseado em Debian Uma liga\u00e7\u00e3o activa \u00e0 Internet Instalar ~ Uma vez iniciados e logados, executar o seguinte comando para iniciar a instala\u00e7\u00e3o do Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash Ap\u00f3s a instala\u00e7\u00e3o, abra um web browser para o endere\u00e7o IP da SBC e ser-lhe-\u00e1 pedido que crie um utilizador Admin e fa\u00e7a o login. https://127.0.0.1 Apoio ~ Mycodo on GitHub Mycodo Wiki Mycodo API F\u00f3rum de discuss\u00e3o Perguntas Mais Frequentes Fa\u00e7a o seu donativo ~ Torne-se um Patrocinador: github.com/sponsors/kizniche Outros m\u00e9todos: KyleGabriel.com/donate","title":"Home"},{"location":"index.pt/#sistema-de-monitorizacao-e-regulacao-ambiental-mycodo","text":"Mycodo \u00e9 software de c\u00f3digo aberto concebido para correr no Raspberry Pi e noutros computadores de placa \u00fanica (SBCs). Combina entradas e sa\u00eddas de formas interessantes para sentir e manipular o ambiente.","title":"Sistema de Monitoriza\u00e7\u00e3o e Regula\u00e7\u00e3o Ambiental Mycodo"},{"location":"index.pt/#informacao","text":"Ver o README para caracter\u00edsticas, projectos utilizando Mycodo, capturas de ecr\u00e3, e outras informa\u00e7\u00f5es.","title":"Informa\u00e7\u00e3o"},{"location":"index.pt/#pre-requisitos","text":"Computador de placa \u00fanica (Recomendado: Raspberry Pi , qualquer vers\u00e3o: Zero, 1, 2, 3, ou 4) Sistema operativo baseado em Debian Uma liga\u00e7\u00e3o activa \u00e0 Internet","title":"Pr\u00e9-requisitos"},{"location":"index.pt/#instalar","text":"Uma vez iniciados e logados, executar o seguinte comando para iniciar a instala\u00e7\u00e3o do Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash Ap\u00f3s a instala\u00e7\u00e3o, abra um web browser para o endere\u00e7o IP da SBC e ser-lhe-\u00e1 pedido que crie um utilizador Admin e fa\u00e7a o login. https://127.0.0.1","title":"Instalar"},{"location":"index.pt/#apoio","text":"Mycodo on GitHub Mycodo Wiki Mycodo API F\u00f3rum de discuss\u00e3o Perguntas Mais Frequentes","title":"Apoio"},{"location":"index.pt/#faca-o-seu-donativo","text":"Torne-se um Patrocinador: github.com/sponsors/kizniche Outros m\u00e9todos: KyleGabriel.com/donate","title":"Fa\u00e7a o seu donativo"},{"location":"index.ru/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e \u4e2d\u6587 \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0438 \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Mycodo ~ Mycodo - \u044d\u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 Raspberry Pi \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0434\u043d\u043e\u043f\u043b\u0430\u0442\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430\u0445 (SBC). \u041e\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0432\u0445\u043e\u0434\u044b \u0438 \u0432\u044b\u0445\u043e\u0434\u044b \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u0447\u0443\u0432\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0438 \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0439 \u0441\u0440\u0435\u0434\u043e\u0439. Information ~ \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 Mycodo, \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u044b \u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 README . \u041f\u0440\u0435\u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b ~ \u041e\u0434\u043d\u043e\u043f\u043b\u0430\u0442\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f: Raspberry Pi , \u043b\u044e\u0431\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f: Zero, 1, 2, 3 \u0438\u043b\u0438 4) \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0430 \u0431\u0430\u0437\u0435 Debian \u0410\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0443 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 ~ \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0447\u0430\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0432\u0435\u0431-\u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043d\u0430 IP-\u0430\u0434\u0440\u0435\u0441\u0435 SBC, \u0438 \u0432\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f Admin \u0438 \u0432\u043e\u0439\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443. https://127.0.0.1 Support ~ Mycodo on GitHub Mycodo Wiki Mycodo API \u0424\u043e\u0440\u0443\u043c \u0427\u0430\u0441\u0442\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u041f\u043e\u0436\u0435\u0440\u0442\u0432\u043e\u0432\u0430\u0442\u044c ~ \u0421\u0442\u0430\u0442\u044c \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u043e\u043c: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"Home"},{"location":"index.ru/#mycodo","text":"Mycodo - \u044d\u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 Raspberry Pi \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0434\u043d\u043e\u043f\u043b\u0430\u0442\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430\u0445 (SBC). \u041e\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0432\u0445\u043e\u0434\u044b \u0438 \u0432\u044b\u0445\u043e\u0434\u044b \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u0447\u0443\u0432\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0438 \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u043a\u0440\u0443\u0436\u0430\u044e\u0449\u0435\u0439 \u0441\u0440\u0435\u0434\u043e\u0439.","title":"\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0438 \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Mycodo"},{"location":"index.ru/#information","text":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 Mycodo, \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u044b \u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 README .","title":"Information"},{"location":"index.ru/#_1","text":"\u041e\u0434\u043d\u043e\u043f\u043b\u0430\u0442\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f: Raspberry Pi , \u043b\u044e\u0431\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f: Zero, 1, 2, 3 \u0438\u043b\u0438 4) \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0430 \u0431\u0430\u0437\u0435 Debian \u0410\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0443","title":"\u041f\u0440\u0435\u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b"},{"location":"index.ru/#_2","text":"\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0447\u0430\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 Mycodo: curl -L https://kizniche.github.io/Mycodo/install | bash \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0432\u0435\u0431-\u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043d\u0430 IP-\u0430\u0434\u0440\u0435\u0441\u0435 SBC, \u0438 \u0432\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f Admin \u0438 \u0432\u043e\u0439\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443. https://127.0.0.1","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435"},{"location":"index.ru/#support","text":"Mycodo on GitHub Mycodo Wiki Mycodo API \u0424\u043e\u0440\u0443\u043c \u0427\u0430\u0441\u0442\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b","title":"Support"},{"location":"index.ru/#_3","text":"\u0421\u0442\u0430\u0442\u044c \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u043e\u043c: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"\u041f\u043e\u0436\u0435\u0440\u0442\u0432\u043e\u0432\u0430\u0442\u044c"},{"location":"index.sr/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a Svenska T\u00fcrk\u00e7e \u4e2d\u6587 Mycodo Environmental Monitoring and Regulation System ~ Mycodo is open source software designed to run on the Raspberry Pi and other single-board computers (SBCs). It couples inputs and outputs in interesting ways to sense and manipulate the environment. Information ~ See the README for features, projects using Mycodo, screenshots, and other information. Prerequisites ~ Single-board computer (Recommended: Raspberry Pi , any version: Zero, 1, 2, 3, or 4) Debian-based operating system An active internet connection Install ~ Once booted and logged in, run the following command to initiate the Mycodo install: curl -L https://kizniche.github.io/Mycodo/install | bash After installation, open a web browser to the SBC's IP address and you will be prompted to create an Admin user and login. https://127.0.0.1 Support ~ Mycodo on GitHub Mycodo Wiki Mycodo API \u0424\u043e\u0440\u0443\u043c Frequently Asked Questions \u0434\u043e\u043d\u0438\u0440\u0430\u0442\u0438 ~ Become a Sponsor: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"Home"},{"location":"index.sr/#mycodo-environmental-monitoring-and-regulation-system","text":"Mycodo is open source software designed to run on the Raspberry Pi and other single-board computers (SBCs). It couples inputs and outputs in interesting ways to sense and manipulate the environment.","title":"Mycodo Environmental Monitoring and Regulation System"},{"location":"index.sr/#information","text":"See the README for features, projects using Mycodo, screenshots, and other information.","title":"Information"},{"location":"index.sr/#prerequisites","text":"Single-board computer (Recommended: Raspberry Pi , any version: Zero, 1, 2, 3, or 4) Debian-based operating system An active internet connection","title":"Prerequisites"},{"location":"index.sr/#install","text":"Once booted and logged in, run the following command to initiate the Mycodo install: curl -L https://kizniche.github.io/Mycodo/install | bash After installation, open a web browser to the SBC's IP address and you will be prompted to create an Admin user and login. https://127.0.0.1","title":"Install"},{"location":"index.sr/#support","text":"Mycodo on GitHub Mycodo Wiki Mycodo API \u0424\u043e\u0440\u0443\u043c Frequently Asked Questions","title":"Support"},{"location":"index.sr/#_1","text":"Become a Sponsor: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"\u0434\u043e\u043d\u0438\u0440\u0430\u0442\u0438"},{"location":"index.sv/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 T\u00fcrk\u00e7e \u4e2d\u6587 System f\u00f6r milj\u00f6\u00f6vervakning och milj\u00f6reglering av Mycodo ~ Mycodo \u00e4r en programvara med \u00f6ppen k\u00e4llkod som \u00e4r utformad f\u00f6r att k\u00f6ras p\u00e5 Raspberry Pi och andra enbordsdatorer (SBC). Den kopplar ihop in- och utg\u00e5ngar p\u00e5 intressanta s\u00e4tt f\u00f6r att k\u00e4nna av och manipulera milj\u00f6n. Information ~ Se README f\u00f6r funktioner, projekt som anv\u00e4nder Mycodo, sk\u00e4rmdumpar och annan information. F\u00f6ruts\u00e4ttningar ~ Enbordsdator (Rekommenderas: Raspberry Pi , vilken version som helst: Zero, 1, 2, 3 eller 4) Debianbaserat operativsystem En aktiv internetanslutning Installera ~ N\u00e4r du har startat upp och loggat in k\u00f6r du f\u00f6ljande kommando f\u00f6r att p\u00e5b\u00f6rja Mycodo-installationen: curl -L https://kizniche.github.io/Mycodo/install | bash Efter installationen \u00f6ppnar du en webbl\u00e4sare till SBC:s IP-adress och du kommer att uppmanas att skapa en administrat\u00f6rsanv\u00e4ndare och logga in. https://127.0.0.1 St\u00f6d ~ Mycodo on GitHub Mycodo Wiki Mycodo API Diskussionsforum Ofta st\u00e4llda fr\u00e5gor Donera ~ Bli en sponsor: github.com/sponsors/kizniche Andra metoder: KyleGabriel.com/donate","title":"Home"},{"location":"index.sv/#system-for-miljoovervakning-och-miljoreglering-av-mycodo","text":"Mycodo \u00e4r en programvara med \u00f6ppen k\u00e4llkod som \u00e4r utformad f\u00f6r att k\u00f6ras p\u00e5 Raspberry Pi och andra enbordsdatorer (SBC). Den kopplar ihop in- och utg\u00e5ngar p\u00e5 intressanta s\u00e4tt f\u00f6r att k\u00e4nna av och manipulera milj\u00f6n.","title":"System f\u00f6r milj\u00f6\u00f6vervakning och milj\u00f6reglering av Mycodo"},{"location":"index.sv/#information","text":"Se README f\u00f6r funktioner, projekt som anv\u00e4nder Mycodo, sk\u00e4rmdumpar och annan information.","title":"Information"},{"location":"index.sv/#forutsattningar","text":"Enbordsdator (Rekommenderas: Raspberry Pi , vilken version som helst: Zero, 1, 2, 3 eller 4) Debianbaserat operativsystem En aktiv internetanslutning","title":"F\u00f6ruts\u00e4ttningar"},{"location":"index.sv/#installera","text":"N\u00e4r du har startat upp och loggat in k\u00f6r du f\u00f6ljande kommando f\u00f6r att p\u00e5b\u00f6rja Mycodo-installationen: curl -L https://kizniche.github.io/Mycodo/install | bash Efter installationen \u00f6ppnar du en webbl\u00e4sare till SBC:s IP-adress och du kommer att uppmanas att skapa en administrat\u00f6rsanv\u00e4ndare och logga in. https://127.0.0.1","title":"Installera"},{"location":"index.sv/#stod","text":"Mycodo on GitHub Mycodo Wiki Mycodo API Diskussionsforum Ofta st\u00e4llda fr\u00e5gor","title":"St\u00f6d"},{"location":"index.sv/#donera","text":"Bli en sponsor: github.com/sponsors/kizniche Andra metoder: KyleGabriel.com/donate","title":"Donera"},{"location":"index.tr/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska \u4e2d\u6587 Mycodo \u00c7evresel \u0130zleme ve D\u00fczenleme Sistemi ~ Mycodo, Raspberry Pi ve di\u011fer tek kartl\u0131 bilgisayarlarda (SBC'ler) \u00e7al\u0131\u015fmak \u00fczere tasarlanm\u0131\u015f a\u00e7\u0131k kaynakl\u0131 bir yaz\u0131l\u0131md\u0131r. \u00c7evreyi alg\u0131lamak ve manip\u00fcle etmek i\u00e7in giri\u015f ve \u00e7\u0131k\u0131\u015flar\u0131 ilgin\u00e7 \u015fekillerde birle\u015ftirir. Information ~ \u00d6zellikler, Mycodo kullanan projeler, ekran g\u00f6r\u00fcnt\u00fcleri ve di\u011fer bilgiler i\u00e7in README adresine bak\u0131n. \u00d6n Ko\u015fullar ~ Tek kartl\u0131 bilgisayar (\u00d6nerilen: Raspberry Pi , herhangi bir s\u00fcr\u00fcm: S\u0131f\u0131r, 1, 2, 3 veya 4) Debian tabanl\u0131 i\u015fletim sistemi Aktif bir internet ba\u011flant\u0131s\u0131 Kurulum ~ \u00d6ny\u00fckleme yap\u0131ld\u0131ktan ve oturum a\u00e7\u0131ld\u0131ktan sonra, Mycodo y\u00fcklemesini ba\u015flatmak i\u00e7in a\u015fa\u011f\u0131daki komutu \u00e7al\u0131\u015ft\u0131r\u0131n: curl -L https://kizniche.github.io/Mycodo/install | bash Kurulumdan sonra, SBC'nin IP adresine bir web taray\u0131c\u0131s\u0131 a\u00e7\u0131n ve bir Y\u00f6netici kullan\u0131c\u0131s\u0131 olu\u015fturup oturum a\u00e7man\u0131z istenecektir. https://127.0.0.1 Support ~ Mycodo on GitHub Mycodo Wiki Mycodo API Discussion Forum S\u0131k\u00e7a Sorulan Sorular Ba\u011f\u0131\u015f Yap\u0131n ~ Sponsor Olun: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"Home"},{"location":"index.tr/#mycodo-cevresel-izleme-ve-duzenleme-sistemi","text":"Mycodo, Raspberry Pi ve di\u011fer tek kartl\u0131 bilgisayarlarda (SBC'ler) \u00e7al\u0131\u015fmak \u00fczere tasarlanm\u0131\u015f a\u00e7\u0131k kaynakl\u0131 bir yaz\u0131l\u0131md\u0131r. \u00c7evreyi alg\u0131lamak ve manip\u00fcle etmek i\u00e7in giri\u015f ve \u00e7\u0131k\u0131\u015flar\u0131 ilgin\u00e7 \u015fekillerde birle\u015ftirir.","title":"Mycodo \u00c7evresel \u0130zleme ve D\u00fczenleme Sistemi"},{"location":"index.tr/#information","text":"\u00d6zellikler, Mycodo kullanan projeler, ekran g\u00f6r\u00fcnt\u00fcleri ve di\u011fer bilgiler i\u00e7in README adresine bak\u0131n.","title":"Information"},{"location":"index.tr/#on-kosullar","text":"Tek kartl\u0131 bilgisayar (\u00d6nerilen: Raspberry Pi , herhangi bir s\u00fcr\u00fcm: S\u0131f\u0131r, 1, 2, 3 veya 4) Debian tabanl\u0131 i\u015fletim sistemi Aktif bir internet ba\u011flant\u0131s\u0131","title":"\u00d6n Ko\u015fullar"},{"location":"index.tr/#kurulum","text":"\u00d6ny\u00fckleme yap\u0131ld\u0131ktan ve oturum a\u00e7\u0131ld\u0131ktan sonra, Mycodo y\u00fcklemesini ba\u015flatmak i\u00e7in a\u015fa\u011f\u0131daki komutu \u00e7al\u0131\u015ft\u0131r\u0131n: curl -L https://kizniche.github.io/Mycodo/install | bash Kurulumdan sonra, SBC'nin IP adresine bir web taray\u0131c\u0131s\u0131 a\u00e7\u0131n ve bir Y\u00f6netici kullan\u0131c\u0131s\u0131 olu\u015fturup oturum a\u00e7man\u0131z istenecektir. https://127.0.0.1","title":"Kurulum"},{"location":"index.tr/#support","text":"Mycodo on GitHub Mycodo Wiki Mycodo API Discussion Forum S\u0131k\u00e7a Sorulan Sorular","title":"Support"},{"location":"index.tr/#bags-yapn","text":"Sponsor Olun: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"Ba\u011f\u0131\u015f Yap\u0131n"},{"location":"index.zh/","text":"English Deutsche Espa\u00f1ol Fran\u00e7ais Bahasa Indonesia Italiano Nederlands Norsk Polski Portugu\u00eas \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441\u0440\u043f\u0441\u043a\u0438 Svenska T\u00fcrk\u00e7e Mycodo\u73af\u5883\u76d1\u6d4b\u548c\u76d1\u7ba1\u7cfb\u7edf ~ Mycodo\u662f\u5f00\u6e90\u8f6f\u4ef6\uff0c\u65e8\u5728\u8fd0\u884c\u5728 \u6811\u8393\u6d3e \u548c\u5176\u4ed6\u5355\u677f\u8ba1\u7b97\u673a(SBC)\u4e0a\u3002\u5b83\u4ee5\u6709\u8da3\u7684\u65b9\u5f0f\u5c06\u8f93\u5165\u548c\u8f93\u51fa\u8026\u5408\u8d77\u6765\uff0c\u4ee5\u611f\u77e5\u548c\u64cd\u7eb5\u73af\u5883\u3002 Information ~ \u6709\u5173\u529f\u80fd\u3001\u4f7f\u7528Mycodo\u7684\u9879\u76ee\u3001\u5c4f\u5e55\u622a\u56fe\u548c\u5176\u4ed6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 README \u3002 \u5148\u51b3\u6761\u4ef6 ~ \u5355\u677f\u8ba1\u7b97\u673a\uff08\u63a8\u8350\u3002 Raspberry Pi \uff0c\u4efb\u4f55\u7248\u672c\u3002\u96f6\uff0c1\uff0c2\uff0c3\uff0c\u62164) \u57fa\u4e8eDebian\u7684\u64cd\u4f5c\u7cfb\u7edf \u4e00\u4e2a\u6d3b\u8dc3\u7684\u4e92\u8054\u7f51\u8fde\u63a5 \u5b89\u88c5 ~ \u542f\u52a8\u5e76\u767b\u5f55\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u542f\u52a8Mycodo\u5b89\u88c5\u3002 curl -L https://kizniche.github.io/Mycodo/install | bash \u5b89\u88c5\u540e\uff0c\u6253\u5f00Web\u6d4f\u89c8\u5668\u5230SBC\u7684IP\u5730\u5740\uff0c\u4f1a\u63d0\u793a\u4f60\u521b\u5efa\u4e00\u4e2a\u7ba1\u7406\u5458\u7528\u6237\u5e76\u767b\u5f55\u3002 https://127.0.0.1 Support ~ Mycodo on GitHub Mycodo Wiki Mycodo API \u8bba\u575b \u5e38\u89c1\u95ee\u9898 \u6350\u8d60 ~ \u6210\u4e3a\u8d5e\u52a9\u5546: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"Home"},{"location":"index.zh/#mycodo","text":"Mycodo\u662f\u5f00\u6e90\u8f6f\u4ef6\uff0c\u65e8\u5728\u8fd0\u884c\u5728 \u6811\u8393\u6d3e \u548c\u5176\u4ed6\u5355\u677f\u8ba1\u7b97\u673a(SBC)\u4e0a\u3002\u5b83\u4ee5\u6709\u8da3\u7684\u65b9\u5f0f\u5c06\u8f93\u5165\u548c\u8f93\u51fa\u8026\u5408\u8d77\u6765\uff0c\u4ee5\u611f\u77e5\u548c\u64cd\u7eb5\u73af\u5883\u3002","title":"Mycodo\u73af\u5883\u76d1\u6d4b\u548c\u76d1\u7ba1\u7cfb\u7edf"},{"location":"index.zh/#information","text":"\u6709\u5173\u529f\u80fd\u3001\u4f7f\u7528Mycodo\u7684\u9879\u76ee\u3001\u5c4f\u5e55\u622a\u56fe\u548c\u5176\u4ed6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 README \u3002","title":"Information"},{"location":"index.zh/#_1","text":"\u5355\u677f\u8ba1\u7b97\u673a\uff08\u63a8\u8350\u3002 Raspberry Pi \uff0c\u4efb\u4f55\u7248\u672c\u3002\u96f6\uff0c1\uff0c2\uff0c3\uff0c\u62164) \u57fa\u4e8eDebian\u7684\u64cd\u4f5c\u7cfb\u7edf \u4e00\u4e2a\u6d3b\u8dc3\u7684\u4e92\u8054\u7f51\u8fde\u63a5","title":"\u5148\u51b3\u6761\u4ef6"},{"location":"index.zh/#_2","text":"\u542f\u52a8\u5e76\u767b\u5f55\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u542f\u52a8Mycodo\u5b89\u88c5\u3002 curl -L https://kizniche.github.io/Mycodo/install | bash \u5b89\u88c5\u540e\uff0c\u6253\u5f00Web\u6d4f\u89c8\u5668\u5230SBC\u7684IP\u5730\u5740\uff0c\u4f1a\u63d0\u793a\u4f60\u521b\u5efa\u4e00\u4e2a\u7ba1\u7406\u5458\u7528\u6237\u5e76\u767b\u5f55\u3002 https://127.0.0.1","title":"\u5b89\u88c5"},{"location":"index.zh/#support","text":"Mycodo on GitHub Mycodo Wiki Mycodo API \u8bba\u575b \u5e38\u89c1\u95ee\u9898","title":"Support"},{"location":"index.zh/#_3","text":"\u6210\u4e3a\u8d5e\u52a9\u5546: github.com/sponsors/kizniche Other Methods: KyleGabriel.com/donate","title":"\u6350\u8d60"}]}